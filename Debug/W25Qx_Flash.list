
W25Qx_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a8  080035a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080035a8  080035a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a8  080035a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080035b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000013c  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200001a4  200001a4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044c7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000df6  00000000  00000000  0002455f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000280  00000000  00000000  00025358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f8  00000000  00000000  000255d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b258  00000000  00000000  000257d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004c26  00000000  00000000  00040a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9f8  00000000  00000000  0004564e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d5046  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cdc  00000000  00000000  000d5098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003534 	.word	0x08003534

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08003534 	.word	0x08003534

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <Console_Init>:
int callback = 0;



 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if(port == USART1)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a9d      	ldr	r2, [pc, #628]	; (8000524 <Console_Init+0x284>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13b      	bne.n	800032a <Console_Init+0x8a>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80002b2:	4b9d      	ldr	r3, [pc, #628]	; (8000528 <Console_Init+0x288>)
 80002b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b6:	4a9c      	ldr	r2, [pc, #624]	; (8000528 <Console_Init+0x288>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80002be:	4b9a      	ldr	r3, [pc, #616]	; (8000528 <Console_Init+0x288>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a99      	ldr	r2, [pc, #612]	; (8000528 <Console_Init+0x288>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
		port -> CR3 |= USART_CR3_DMAT;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	615a      	str	r2, [r3, #20]
		DMA2_Stream7 -> CR |= 4 << 25  | 0 << 16 | 0 << 13 | 0 << 11 | 1 << 10 | 0 << 8 | 1 << 6 |
 80002d6:	4b95      	ldr	r3, [pc, #596]	; (800052c <Console_Init+0x28c>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4994      	ldr	r1, [pc, #592]	; (800052c <Console_Init+0x28c>)
 80002dc:	4b94      	ldr	r3, [pc, #592]	; (8000530 <Console_Init+0x290>)
 80002de:	4313      	orrs	r3, r2
 80002e0:	600b      	str	r3, [r1, #0]
				1 << 4 | 3 << 16;
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80002e2:	2307      	movs	r3, #7
 80002e4:	228c      	movs	r2, #140	; 0x8c
 80002e6:	2109      	movs	r1, #9
 80002e8:	4892      	ldr	r0, [pc, #584]	; (8000534 <Console_Init+0x294>)
 80002ea:	f001 fef7 	bl	80020dc <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART1_RX);
 80002ee:	2307      	movs	r3, #7
 80002f0:	229c      	movs	r2, #156	; 0x9c
 80002f2:	210a      	movs	r1, #10
 80002f4:	488f      	ldr	r0, [pc, #572]	; (8000534 <Console_Init+0x294>)
 80002f6:	f001 fef1 	bl	80020dc <GPIO_Pin_Setup>

		port ->BRR |= (int)(84000000 / (16 * baudrate)) << 4;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	498d      	ldr	r1, [pc, #564]	; (8000538 <Console_Init+0x298>)
 8000304:	fb91 f2f2 	sdiv	r2, r1, r2
 8000308:	0112      	lsls	r2, r2, #4
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	609a      	str	r2, [r3, #8]
		port -> CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	f043 020c 	orr.w	r2, r3, #12
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
		port -> CR1 |= USART_CR1_UE;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
	}



}
 8000328:	e0f8      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a83      	ldr	r2, [pc, #524]	; (800053c <Console_Init+0x29c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d12d      	bne.n	800038e <Console_Init+0xee>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8000332:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <Console_Init+0x288>)
 8000334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000336:	4a7c      	ldr	r2, [pc, #496]	; (8000528 <Console_Init+0x288>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOC, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 800033e:	2307      	movs	r3, #7
 8000340:	228c      	movs	r2, #140	; 0x8c
 8000342:	2106      	movs	r1, #6
 8000344:	487e      	ldr	r0, [pc, #504]	; (8000540 <Console_Init+0x2a0>)
 8000346:	f001 fec9 	bl	80020dc <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOC, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 800034a:	2307      	movs	r3, #7
 800034c:	228c      	movs	r2, #140	; 0x8c
 800034e:	2107      	movs	r1, #7
 8000350:	487b      	ldr	r0, [pc, #492]	; (8000540 <Console_Init+0x2a0>)
 8000352:	f001 fec3 	bl	80020dc <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / (16 * baudrate)) << 4;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	4a74      	ldr	r2, [pc, #464]	; (8000538 <Console_Init+0x298>)
 8000368:	fb92 f3f3 	sdiv	r3, r2, r3
 800036c:	011b      	lsls	r3, r3, #4
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	f043 0208 	orr.w	r2, r3, #8
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	f043 0204 	orr.w	r2, r3, #4
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	e0c6      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART2)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a6c      	ldr	r2, [pc, #432]	; (8000544 <Console_Init+0x2a4>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d12d      	bne.n	80003f2 <Console_Init+0x152>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000396:	4b64      	ldr	r3, [pc, #400]	; (8000528 <Console_Init+0x288>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	4a63      	ldr	r2, [pc, #396]	; (8000528 <Console_Init+0x288>)
 800039c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 80003a2:	2307      	movs	r3, #7
 80003a4:	228c      	movs	r2, #140	; 0x8c
 80003a6:	2102      	movs	r1, #2
 80003a8:	4862      	ldr	r0, [pc, #392]	; (8000534 <Console_Init+0x294>)
 80003aa:	f001 fe97 	bl	80020dc <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART2_RX);
 80003ae:	2307      	movs	r3, #7
 80003b0:	229c      	movs	r2, #156	; 0x9c
 80003b2:	2103      	movs	r1, #3
 80003b4:	485f      	ldr	r0, [pc, #380]	; (8000534 <Console_Init+0x294>)
 80003b6:	f001 fe91 	bl	80020dc <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	015b      	lsls	r3, r3, #5
 80003ca:	4a5b      	ldr	r2, [pc, #364]	; (8000538 <Console_Init+0x298>)
 80003cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	461a      	mov	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	f043 0208 	orr.w	r2, r3, #8
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	f043 0204 	orr.w	r2, r3, #4
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	60da      	str	r2, [r3, #12]
}
 80003f0:	e094      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART3)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a54      	ldr	r2, [pc, #336]	; (8000548 <Console_Init+0x2a8>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d12d      	bne.n	8000456 <Console_Init+0x1b6>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80003fa:	4b4b      	ldr	r3, [pc, #300]	; (8000528 <Console_Init+0x288>)
 80003fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fe:	4a4a      	ldr	r2, [pc, #296]	; (8000528 <Console_Init+0x288>)
 8000400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000404:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART3_TX);
 8000406:	2307      	movs	r3, #7
 8000408:	228c      	movs	r2, #140	; 0x8c
 800040a:	210a      	movs	r1, #10
 800040c:	484f      	ldr	r0, [pc, #316]	; (800054c <Console_Init+0x2ac>)
 800040e:	f001 fe65 	bl	80020dc <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 11, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART3_RX);
 8000412:	2307      	movs	r3, #7
 8000414:	229c      	movs	r2, #156	; 0x9c
 8000416:	210b      	movs	r1, #11
 8000418:	484c      	ldr	r0, [pc, #304]	; (800054c <Console_Init+0x2ac>)
 800041a:	f001 fe5f 	bl	80020dc <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	015b      	lsls	r3, r3, #5
 800042e:	4a42      	ldr	r2, [pc, #264]	; (8000538 <Console_Init+0x298>)
 8000430:	fb92 f3f3 	sdiv	r3, r2, r3
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	461a      	mov	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	f043 0208 	orr.w	r2, r3, #8
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	f043 0204 	orr.w	r2, r3, #4
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	60da      	str	r2, [r3, #12]
}
 8000454:	e062      	b.n	800051c <Console_Init+0x27c>
	else if(port == UART4)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <Console_Init+0x2b0>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d12d      	bne.n	80004ba <Console_Init+0x21a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <Console_Init+0x288>)
 8000460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000462:	4a31      	ldr	r2, [pc, #196]	; (8000528 <Console_Init+0x288>)
 8000464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000468:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 0, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART4_TX);
 800046a:	2307      	movs	r3, #7
 800046c:	228c      	movs	r2, #140	; 0x8c
 800046e:	2100      	movs	r1, #0
 8000470:	4830      	ldr	r0, [pc, #192]	; (8000534 <Console_Init+0x294>)
 8000472:	f001 fe33 	bl	80020dc <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 1, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART4_RX);
 8000476:	2307      	movs	r3, #7
 8000478:	229c      	movs	r2, #156	; 0x9c
 800047a:	2101      	movs	r1, #1
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <Console_Init+0x294>)
 800047e:	f001 fe2d 	bl	80020dc <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	015b      	lsls	r3, r3, #5
 8000492:	4a29      	ldr	r2, [pc, #164]	; (8000538 <Console_Init+0x298>)
 8000494:	fb92 f3f3 	sdiv	r3, r2, r3
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f043 0208 	orr.w	r2, r3, #8
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	f043 0204 	orr.w	r2, r3, #4
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	60da      	str	r2, [r3, #12]
}
 80004b8:	e030      	b.n	800051c <Console_Init+0x27c>
	else if(port == UART5)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a25      	ldr	r2, [pc, #148]	; (8000554 <Console_Init+0x2b4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d12c      	bne.n	800051c <Console_Init+0x27c>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <Console_Init+0x288>)
 80004c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <Console_Init+0x288>)
 80004c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004cc:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART5_TX);
 80004ce:	2307      	movs	r3, #7
 80004d0:	228c      	movs	r2, #140	; 0x8c
 80004d2:	210c      	movs	r1, #12
 80004d4:	481a      	ldr	r0, [pc, #104]	; (8000540 <Console_Init+0x2a0>)
 80004d6:	f001 fe01 	bl	80020dc <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOD, 2, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART5_RX);
 80004da:	2307      	movs	r3, #7
 80004dc:	229c      	movs	r2, #156	; 0x9c
 80004de:	2102      	movs	r1, #2
 80004e0:	481d      	ldr	r0, [pc, #116]	; (8000558 <Console_Init+0x2b8>)
 80004e2:	f001 fdfb 	bl	80020dc <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	015b      	lsls	r3, r3, #5
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <Console_Init+0x298>)
 80004f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	461a      	mov	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	f043 0208 	orr.w	r2, r3, #8
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f043 0204 	orr.w	r2, r3, #4
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60da      	str	r2, [r3, #12]
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40011000 	.word	0x40011000
 8000528:	40023800 	.word	0x40023800
 800052c:	400264b8 	.word	0x400264b8
 8000530:	08030450 	.word	0x08030450
 8000534:	40020000 	.word	0x40020000
 8000538:	0501bd00 	.word	0x0501bd00
 800053c:	40011400 	.word	0x40011400
 8000540:	40020800 	.word	0x40020800
 8000544:	40004400 	.word	0x40004400
 8000548:	40004800 	.word	0x40004800
 800054c:	40020400 	.word	0x40020400
 8000550:	40004c00 	.word	0x40004c00
 8000554:	40005000 	.word	0x40005000
 8000558:	40020c00 	.word	0x40020c00

0800055c <printConsole>:


 void printConsole(USART_TypeDef *port,char *msg, ...)
{
 800055c:	b40e      	push	{r1, r2, r3}
 800055e:	b580      	push	{r7, lr}
 8000560:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8000564:	af00      	add	r7, sp, #0
 8000566:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800056a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800056e:	6018      	str	r0, [r3, #0]

char buff[1000];
//	#ifdef DEBUG_UART
	va_list args;
	va_start(args, msg);
 8000570:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8000574:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000578:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800057c:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800057e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000582:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8000586:	f107 0010 	add.w	r0, r7, #16
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8000590:	f002 fb78 	bl	8002c84 <vsiprintf>
	DMA2_Stream7 -> PAR = (uint32_t)&port -> DR;
 8000594:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000598:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1d1a      	adds	r2, r3, #4
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <printConsole+0x98>)
 80005a2:	609a      	str	r2, [r3, #8]
	DMA2_Stream7 -> M0AR = (uint32_t)&buff[0];
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <printConsole+0x98>)
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	60d3      	str	r3, [r2, #12]
	DMA2_Stream7 -> NDTR = (uint16_t)strlen(buff);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe1d 	bl	80001f0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <printConsole+0x98>)
 80005bc:	605a      	str	r2, [r3, #4]
	DMA2_Stream7 -> CR |= DMA_SxCR_EN;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <printConsole+0x98>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <printConsole+0x98>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
	while((DMA2->HISR & DMA_HIFCR_CTCIF7) == 0){}
 80005ca:	bf00      	nop
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <printConsole+0x9c>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f9      	beq.n	80005cc <printConsole+0x70>
	DMA2 ->HIFCR |= DMA_HIFCR_CTCIF7;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <printConsole+0x9c>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <printConsole+0x9c>)
 80005de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005e2:	60d3      	str	r3, [r2, #12]
////		port -> CR1 |= USART_CR1_SBK;
//		while (!(port->SR & USART_SR_TXE));
//	}

//	#endif
}
 80005e4:	bf00      	nop
 80005e6:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80005ea:	46bd      	mov	sp, r7
 80005ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f0:	b003      	add	sp, #12
 80005f2:	4770      	bx	lr
 80005f4:	400264b8 	.word	0x400264b8
 80005f8:	40026400 	.word	0x40026400

080005fc <DMA_Init>:
	}
}


int DMA_Init(DMA_Init_Typedef *DMA_Config)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	int ret_value = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
	if(DMA_Config->DMA_Port == DMA1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a88      	ldr	r2, [pc, #544]	; (8000830 <DMA_Init+0x234>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <DMA_Init+0x24>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000612:	4b88      	ldr	r3, [pc, #544]	; (8000834 <DMA_Init+0x238>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a87      	ldr	r2, [pc, #540]	; (8000834 <DMA_Init+0x238>)
 8000618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	e00e      	b.n	800063e <DMA_Init+0x42>
	}
	else if(DMA_Config->DMA_Port == DMA2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a84      	ldr	r2, [pc, #528]	; (8000838 <DMA_Init+0x23c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <DMA_Init+0x3c>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800062a:	4b82      	ldr	r3, [pc, #520]	; (8000834 <DMA_Init+0x238>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a81      	ldr	r2, [pc, #516]	; (8000834 <DMA_Init+0x238>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	e002      	b.n	800063e <DMA_Init+0x42>
	}
	else
	{
		ret_value = -1;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	60fb      	str	r3, [r7, #12]
	}

	if( (DMA_Config -> Stream == DMA1_Stream0) || (DMA_Config -> Stream == DMA2_Stream0) ) DMA_Config -> stream_temp = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	4a7e      	ldr	r2, [pc, #504]	; (800083c <DMA_Init+0x240>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d004      	beq.n	8000652 <DMA_Init+0x56>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a7c      	ldr	r2, [pc, #496]	; (8000840 <DMA_Init+0x244>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d102      	bne.n	8000658 <DMA_Init+0x5c>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream1) || (DMA_Config -> Stream == DMA2_Stream1) ) DMA_Config -> stream_temp = 1;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a79      	ldr	r2, [pc, #484]	; (8000844 <DMA_Init+0x248>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d004      	beq.n	800066c <DMA_Init+0x70>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	4a78      	ldr	r2, [pc, #480]	; (8000848 <DMA_Init+0x24c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d102      	bne.n	8000672 <DMA_Init+0x76>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream2) || (DMA_Config -> Stream == DMA2_Stream2) ) DMA_Config -> stream_temp = 2;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	4a75      	ldr	r2, [pc, #468]	; (800084c <DMA_Init+0x250>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d004      	beq.n	8000686 <DMA_Init+0x8a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a73      	ldr	r2, [pc, #460]	; (8000850 <DMA_Init+0x254>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d102      	bne.n	800068c <DMA_Init+0x90>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2202      	movs	r2, #2
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream3) || (DMA_Config -> Stream == DMA2_Stream3) ) DMA_Config -> stream_temp = 3;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a70      	ldr	r2, [pc, #448]	; (8000854 <DMA_Init+0x258>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d004      	beq.n	80006a0 <DMA_Init+0xa4>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a6f      	ldr	r2, [pc, #444]	; (8000858 <DMA_Init+0x25c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d102      	bne.n	80006a6 <DMA_Init+0xaa>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2203      	movs	r2, #3
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream4) || (DMA_Config -> Stream == DMA2_Stream4) ) DMA_Config -> stream_temp = 4;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	4a6c      	ldr	r2, [pc, #432]	; (800085c <DMA_Init+0x260>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d004      	beq.n	80006ba <DMA_Init+0xbe>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a6a      	ldr	r2, [pc, #424]	; (8000860 <DMA_Init+0x264>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d102      	bne.n	80006c0 <DMA_Init+0xc4>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2204      	movs	r2, #4
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream5) || (DMA_Config -> Stream == DMA2_Stream5) ) DMA_Config -> stream_temp = 5;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4a67      	ldr	r2, [pc, #412]	; (8000864 <DMA_Init+0x268>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d004      	beq.n	80006d4 <DMA_Init+0xd8>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	4a66      	ldr	r2, [pc, #408]	; (8000868 <DMA_Init+0x26c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d102      	bne.n	80006da <DMA_Init+0xde>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2205      	movs	r2, #5
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream6) || (DMA_Config -> Stream == DMA2_Stream6) ) DMA_Config -> stream_temp = 6;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	4a63      	ldr	r2, [pc, #396]	; (800086c <DMA_Init+0x270>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d004      	beq.n	80006ee <DMA_Init+0xf2>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a61      	ldr	r2, [pc, #388]	; (8000870 <DMA_Init+0x274>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d102      	bne.n	80006f4 <DMA_Init+0xf8>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2206      	movs	r2, #6
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
	if( (DMA_Config -> Stream == DMA1_Stream7) || (DMA_Config -> Stream == DMA2_Stream7) ) DMA_Config -> stream_temp = 7;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	4a5e      	ldr	r2, [pc, #376]	; (8000874 <DMA_Init+0x278>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d004      	beq.n	8000708 <DMA_Init+0x10c>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	4a5d      	ldr	r2, [pc, #372]	; (8000878 <DMA_Init+0x27c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d102      	bne.n	800070e <DMA_Init+0x112>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2207      	movs	r2, #7
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

	DMA_Config -> Stream->CR &= ~DMA_SxCR_EN; //Disable DMA Stream
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f022 0201 	bic.w	r2, r2, #1
 800071c:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR |= (DMA_Config->channel) << DMA_SxCR_CHSEL_Pos; //Select Channel
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	065b      	lsls	r3, r3, #25
 800072a:	4619      	mov	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]

	DMA_Config -> Stream->CR |= DMA_SxCR_MINC; //Enable memory increment mode
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000742:	601a      	str	r2, [r3, #0]
	//Disable Interrupt
	DMA_Config -> Stream->CR  &= ~(DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f022 021e 	bic.w	r2, r2, #30
 8000752:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->FCR &= ~(DMA_SxFCR_FEIE);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000762:	615a      	str	r2, [r3, #20]
	//Enable Interrupt
	DMA_Config -> Stream->CR  |= (DMA_Config->Half_Transfer_interrupt     << DMA_SxCR_HTIE_Pos);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7b5b      	ldrb	r3, [r3, #13]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	430a      	orrs	r2, r1
 8000778:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR  |= (DMA_Config->Transfer_Complete_interrupt << DMA_SxCR_TCIE_Pos);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7b9b      	ldrb	r3, [r3, #14]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4619      	mov	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	430a      	orrs	r2, r1
 800078e:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR  |= (DMA_Config->Transfer_Error_interrupt    << DMA_SxCR_TEIE_Pos);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7bdb      	ldrb	r3, [r3, #15]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4619      	mov	r1, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR  |= (DMA_Config->Direct_Mode_Error_interrupt << DMA_SxCR_DIR_Pos);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7c5b      	ldrb	r3, [r3, #17]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	4619      	mov	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->FCR |= (DMA_Config->FIFO_Overrun_Underrun_interrupt << DMA_SxFCR_FEIE_Pos);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7c1b      	ldrb	r3, [r3, #16]
 80007c6:	01db      	lsls	r3, r3, #7
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	615a      	str	r2, [r3, #20]

	//Priority
	DMA_Config -> Stream->CR &= ~DMA_SxCR_PL;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80007e0:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR |=  DMA_Config->priority << DMA_SxCR_PL_Pos;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]

	//Direction
	DMA_Config -> Stream->CR &= ~DMA_SxCR_DIR;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000808:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR |=  DMA_Config->direction << DMA_SxCR_DIR_Pos;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	4619      	mov	r1, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	601a      	str	r2, [r3, #0]

	return ret_value;
 8000822:	68fb      	ldr	r3, [r7, #12]

}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40026000 	.word	0x40026000
 8000834:	40023800 	.word	0x40023800
 8000838:	40026400 	.word	0x40026400
 800083c:	40026010 	.word	0x40026010
 8000840:	40026410 	.word	0x40026410
 8000844:	40026028 	.word	0x40026028
 8000848:	40026428 	.word	0x40026428
 800084c:	40026040 	.word	0x40026040
 8000850:	40026440 	.word	0x40026440
 8000854:	40026058 	.word	0x40026058
 8000858:	40026458 	.word	0x40026458
 800085c:	40026070 	.word	0x40026070
 8000860:	40026470 	.word	0x40026470
 8000864:	40026088 	.word	0x40026088
 8000868:	40026488 	.word	0x40026488
 800086c:	400260a0 	.word	0x400260a0
 8000870:	400264a0 	.word	0x400264a0
 8000874:	400260b8 	.word	0x400260b8
 8000878:	400264b8 	.word	0x400264b8

0800087c <DMA_Set_Target>:

void DMA_Set_Target(DMA_Init_Typedef *DMA_Config)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	DMA_Config->Stream->M0AR = (uint32_t)(DMA_Config->Desitnation_Address);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	6952      	ldr	r2, [r2, #20]
 800088c:	60da      	str	r2, [r3, #12]
	DMA_Config->Stream->PAR  = (uint32_t)(DMA_Config->Source_Address);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6992      	ldr	r2, [r2, #24]
 8000896:	609a      	str	r2, [r3, #8]
	DMA_Config->Stream->NDTR = (uint16_t)(DMA_Config->data_length);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	b29a      	uxth	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	605a      	str	r2, [r3, #4]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DMA_Enable>:

void DMA_Enable(DMA_Init_Typedef *DMA_Config)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	DMA_Config->Stream->CR |= DMA_SxCR_EN;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f042 0201 	orr.w	r2, r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DMA_Disable>:

void DMA_Disable(DMA_Init_Typedef *DMA_Config)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	DMA_Config->Stream->CR &= ~DMA_SxCR_EN;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f022 0201 	bic.w	r2, r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DMA_Trigger>:



int DMA_Trigger(DMA_Init_Typedef *DMA_Config, bool blocking_enable)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	int ret_value = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
	DMA_Config->Stream->M0AR = (uint32_t)(DMA_Config->Desitnation_Address);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	6952      	ldr	r2, [r2, #20]
 8000910:	60da      	str	r2, [r3, #12]
	DMA_Config->Stream->PAR  = (uint32_t)(DMA_Config->Source_Address);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	6992      	ldr	r2, [r2, #24]
 800091a:	609a      	str	r2, [r3, #8]
	DMA_Config->Stream->NDTR = (uint16_t)(DMA_Config->data_length);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	b29a      	uxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	605a      	str	r2, [r3, #4]
	DMA_Config->Stream->CR |= DMA_SxCR_EN;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f042 0201 	orr.w	r2, r2, #1
 8000936:	601a      	str	r2, [r3, #0]

	if(blocking_enable)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 80df 	beq.w	8000afe <DMA_Trigger+0x206>
	{
		if(DMA_Config -> stream_temp == 0)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000944:	2b00      	cmp	r3, #0
 8000946:	d118      	bne.n	800097a <DMA_Trigger+0x82>
		{
			while((DMA_Config -> DMA_Port -> LISR & (DMA_LISR_TCIF0_Msk)) == 0){}
 8000948:	bf00      	nop
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f8      	beq.n	800094a <DMA_Trigger+0x52>
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f042 0220 	orr.w	r2, r2, #32
 8000966:	609a      	str	r2, [r3, #8]
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f042 0210 	orr.w	r2, r2, #16
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	e0c1      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097e:	2b01      	cmp	r3, #1
 8000980:	d118      	bne.n	80009b4 <DMA_Trigger+0xbc>
		{
			while((DMA_Config -> DMA_Port -> LISR & (DMA_LISR_TCIF1_Msk)) == 0){}
 8000982:	bf00      	nop
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f8      	beq.n	8000984 <DMA_Trigger+0x8c>
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009a0:	609a      	str	r2, [r3, #8]
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CHTIF1;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	e0a4      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d110      	bne.n	80009de <DMA_Trigger+0xe6>
		{
	//		while((DMA_Config -> DMA_Port -> LISR & (DMA_LISR_TCIF2_Msk)) == 0){}
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CTCIF2;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80009ca:	609a      	str	r2, [r3, #8]
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CHTIF2;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	e08f      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 3)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d118      	bne.n	8000a18 <DMA_Trigger+0x120>
		{
			while((DMA_Config -> DMA_Port -> LISR & (DMA_LISR_TCIF3_Msk)) == 0){}
 80009e6:	bf00      	nop
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0f8      	beq.n	80009e8 <DMA_Trigger+0xf0>
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CTCIF3;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000a04:	609a      	str	r2, [r3, #8]
			DMA_Config -> DMA_Port -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	e072      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 4)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d118      	bne.n	8000a52 <DMA_Trigger+0x15a>
		{
			while((DMA_Config -> DMA_Port -> HISR & (DMA_HISR_TCIF4_Msk)) == 0){}
 8000a20:	bf00      	nop
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f8      	beq.n	8000a22 <DMA_Trigger+0x12a>
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0220 	orr.w	r2, r2, #32
 8000a3e:	60da      	str	r2, [r3, #12]
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0210 	orr.w	r2, r2, #16
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	e055      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 5)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a56:	2b05      	cmp	r3, #5
 8000a58:	d118      	bne.n	8000a8c <DMA_Trigger+0x194>
		{
			while((DMA_Config -> DMA_Port -> HISR & (DMA_HISR_TCIF5_Msk)) == 0){}
 8000a5a:	bf00      	nop
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f8      	beq.n	8000a5c <DMA_Trigger+0x164>
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a78:	60da      	str	r2, [r3, #12]
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	e038      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 6)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d118      	bne.n	8000ac6 <DMA_Trigger+0x1ce>
		{
			while((DMA_Config -> DMA_Port -> HISR & (DMA_HISR_TCIF6_Msk)) == 0){}
 8000a94:	bf00      	nop
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f8      	beq.n	8000a96 <DMA_Trigger+0x19e>
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000ab2:	60da      	str	r2, [r3, #12]
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	e01b      	b.n	8000afe <DMA_Trigger+0x206>
		}
		else if(DMA_Config -> stream_temp == 7)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	2b07      	cmp	r3, #7
 8000acc:	d117      	bne.n	8000afe <DMA_Trigger+0x206>
		{
			while((DMA_Config -> DMA_Port -> HISR & (DMA_HISR_TCIF7_Msk)) == 0){}
 8000ace:	bf00      	nop
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f8      	beq.n	8000ad0 <DMA_Trigger+0x1d8>
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000aec:	60da      	str	r2, [r3, #12]
			DMA_Config -> DMA_Port -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000afc:	60da      	str	r2, [r3, #12]
		}
	}

	DMA_DeInit(DMA_Config);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 f8b8 	bl	8000c74 <DMA_DeInit>


	return ret_value;
 8000b04:	68fb      	ldr	r3, [r7, #12]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <DMA_Memory_To_Memory_Transfer>:

void DMA_Memory_To_Memory_Transfer(uint32_t *source,
						  uint8_t source_data_size, uint8_t dest_data_size,
		                  uint32_t *destination, bool source_increment,
						  bool destination_increment, uint16_t length)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	72fb      	strb	r3, [r7, #11]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	72bb      	strb	r3, [r7, #10]

	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <DMA_Memory_To_Memory_Transfer+0x158>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a50      	ldr	r2, [pc, #320]	; (8000c68 <DMA_Memory_To_Memory_Transfer+0x158>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
	DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a4e      	ldr	r2, [pc, #312]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b34:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8000b38:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= (DMA_Direction_Memory_to_Memory << DMA_SxCR_DIR_Pos);
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a4b      	ldr	r2, [pc, #300]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b4c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6013      	str	r3, [r2, #0]

	if(source_data_size == 32)
 8000b56:	7afb      	ldrb	r3, [r7, #11]
 8000b58:	2b20      	cmp	r3, #32
 8000b5a:	d106      	bne.n	8000b6a <DMA_Memory_To_Memory_Transfer+0x5a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b62:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e015      	b.n	8000b96 <DMA_Memory_To_Memory_Transfer+0x86>
	}else if(source_data_size == 16)
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	2b10      	cmp	r3, #16
 8000b6e:	d10c      	bne.n	8000b8a <DMA_Memory_To_Memory_Transfer+0x7a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8000b70:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a3d      	ldr	r2, [pc, #244]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b7a:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	e005      	b.n	8000b96 <DMA_Memory_To_Memory_Transfer+0x86>
	}else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 8000b8a:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b90:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b94:	6013      	str	r3, [r2, #0]
	}

	if(dest_data_size == 32)
 8000b96:	7abb      	ldrb	r3, [r7, #10]
 8000b98:	2b20      	cmp	r3, #32
 8000b9a:	d106      	bne.n	8000baa <DMA_Memory_To_Memory_Transfer+0x9a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a32      	ldr	r2, [pc, #200]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000ba2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e015      	b.n	8000bd6 <DMA_Memory_To_Memory_Transfer+0xc6>
	}else if(dest_data_size == 16)
 8000baa:	7abb      	ldrb	r3, [r7, #10]
 8000bac:	2b10      	cmp	r3, #16
 8000bae:	d10c      	bne.n	8000bca <DMA_Memory_To_Memory_Transfer+0xba>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bba:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e005      	b.n	8000bd6 <DMA_Memory_To_Memory_Transfer+0xc6>
	}else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bd0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000bd4:	6013      	str	r3, [r2, #0]
	}

	if(source_increment == 1)
 8000bd6:	7e3b      	ldrb	r3, [r7, #24]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <DMA_Memory_To_Memory_Transfer+0xda>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PINC;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e005      	b.n	8000bf6 <DMA_Memory_To_Memory_Transfer+0xe6>
	}
	else{
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bf4:	6013      	str	r3, [r2, #0]
	}

	if(destination_increment == 1)
 8000bf6:	7f3b      	ldrb	r3, [r7, #28]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <DMA_Memory_To_Memory_Transfer+0xfa>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e005      	b.n	8000c16 <DMA_Memory_To_Memory_Transfer+0x106>
	}
	else{
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c14:	6013      	str	r3, [r2, #0]
	}

	DMA2_Stream0 -> PAR = (uint32_t)(source);
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6093      	str	r3, [r2, #8]
	DMA2_Stream0 -> M0AR = (uint32_t)(destination);
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60d3      	str	r3, [r2, #12]
	DMA2_Stream0 -> NDTR = (uint16_t)length;
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c24:	8c3b      	ldrh	r3, [r7, #32]
 8000c26:	6053      	str	r3, [r2, #4]
	DMA2_Stream0 -> CR |= DMA_SxCR_EN;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

	while((DMA2 -> LISR & (DMA_LISR_TCIF0_Msk)) == 0){}
 8000c34:	bf00      	nop
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <DMA_Memory_To_Memory_Transfer+0x160>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f9      	beq.n	8000c36 <DMA_Memory_To_Memory_Transfer+0x126>
	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <DMA_Memory_To_Memory_Transfer+0x160>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <DMA_Memory_To_Memory_Transfer+0x160>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6093      	str	r3, [r2, #8]

	DMA2_Stream0 -> CR &= ~DMA_SxCR_EN;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40026410 	.word	0x40026410
 8000c70:	40026400 	.word	0x40026400

08000c74 <DMA_DeInit>:


void DMA_DeInit(DMA_Init_Typedef *DMA_Config)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	DMA_Config -> Stream->CR &= ~DMA_SxCR_CHSEL;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8000c8a:	601a      	str	r2, [r3, #0]
	DMA_Config -> Stream->CR &= ~DMA_SxCR_EN;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f022 0201 	bic.w	r2, r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <Delay_us>:
	return (0UL);                                                     /* Function successful */
}


__STATIC_INLINE uint32_t Delay_us(float us)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = 167 * us;
 8000cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000cec <Delay_us+0x44>
 8000cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <Delay_us+0x48>)
 8000cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cc4:	ee17 2a90 	vmov	r2, s15
 8000cc8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <Delay_us+0x48>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000cd0:	bf00      	nop
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <Delay_us+0x48>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f9      	beq.n	8000cd2 <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	43270000 	.word	0x43270000
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <Read_Status_Register>:
 * ############################################### Internal Operation ######################################
 * #########################################################################################################
 */

static void Read_Status_Register(void)
{
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	b095      	sub	sp, #84	; 0x54
 8000cf8:	af10      	add	r7, sp, #64	; 0x40
	int x[3];
	SPI_CSS_Low(W25QX);
 8000cfa:	4e74      	ldr	r6, [pc, #464]	; (8000ecc <Read_Status_Register+0x1d8>)
 8000cfc:	466d      	mov	r5, sp
 8000cfe:	f106 0410 	add.w	r4, r6, #16
 8000d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d16:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d1a:	f001 fc9a 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x05);
 8000d1e:	4e6b      	ldr	r6, [pc, #428]	; (8000ecc <Read_Status_Register+0x1d8>)
 8000d20:	2305      	movs	r3, #5
 8000d22:	930e      	str	r3, [sp, #56]	; 0x38
 8000d24:	466d      	mov	r5, sp
 8000d26:	f106 0410 	add.w	r4, r6, #16
 8000d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d42:	f001 fcae 	bl	80026a2 <SPI_TRX_Data>
	x[0] = SPI_TRX_Data(W25QX, 0xAA);
 8000d46:	4e61      	ldr	r6, [pc, #388]	; (8000ecc <Read_Status_Register+0x1d8>)
 8000d48:	23aa      	movs	r3, #170	; 0xaa
 8000d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8000d4c:	466d      	mov	r5, sp
 8000d4e:	f106 0410 	add.w	r4, r6, #16
 8000d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d6a:	f001 fc9a 	bl	80026a2 <SPI_TRX_Data>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	607b      	str	r3, [r7, #4]
	x[1] = SPI_TRX_Data(W25QX, 0xAA);
 8000d72:	4e56      	ldr	r6, [pc, #344]	; (8000ecc <Read_Status_Register+0x1d8>)
 8000d74:	23aa      	movs	r3, #170	; 0xaa
 8000d76:	930e      	str	r3, [sp, #56]	; 0x38
 8000d78:	466d      	mov	r5, sp
 8000d7a:	f106 0410 	add.w	r4, r6, #16
 8000d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d96:	f001 fc84 	bl	80026a2 <SPI_TRX_Data>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60bb      	str	r3, [r7, #8]
	x[2] = SPI_TRX_Data(W25QX, 0xAA);
 8000d9e:	4e4b      	ldr	r6, [pc, #300]	; (8000ecc <Read_Status_Register+0x1d8>)
 8000da0:	23aa      	movs	r3, #170	; 0xaa
 8000da2:	930e      	str	r3, [sp, #56]	; 0x38
 8000da4:	466d      	mov	r5, sp
 8000da6:	f106 0410 	add.w	r4, r6, #16
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dbe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dc2:	f001 fc6e 	bl	80026a2 <SPI_TRX_Data>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60fb      	str	r3, [r7, #12]
	SPI_CSS_High(W25QX);
 8000dca:	4e40      	ldr	r6, [pc, #256]	; (8000ecc <Read_Status_Register+0x1d8>)
 8000dcc:	466d      	mov	r5, sp
 8000dce:	f106 0410 	add.w	r4, r6, #16
 8000dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000de6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dea:	f001 fc46 	bl	800267a <SPI_CSS_High>

	SR.SRP  = ((1 << 7) & x[0]) >> 7;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	11db      	asrs	r3, r3, #7
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	4a36      	ldr	r2, [pc, #216]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000df8:	6013      	str	r3, [r2, #0]
	SR.SEC  = ((1 << 6) & x[0]) >> 6;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	119b      	asrs	r3, r3, #6
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e04:	6053      	str	r3, [r2, #4]
	SR.TB   = ((1 << 5) & x[0]) >> 5;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	115b      	asrs	r3, r3, #5
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e10:	6093      	str	r3, [r2, #8]
	SR.BP2  = ((1 << 4) & x[0]) >> 4;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	111b      	asrs	r3, r3, #4
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e1c:	60d3      	str	r3, [r2, #12]
	SR.BP1  = ((1 << 3) & x[0]) >> 3;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	10db      	asrs	r3, r3, #3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	4a2a      	ldr	r2, [pc, #168]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e28:	6113      	str	r3, [r2, #16]
	SR.BP0  = ((1 << 2) & x[0]) >> 2;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	109b      	asrs	r3, r3, #2
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e34:	6153      	str	r3, [r2, #20]
	SR.WEL  = ((1 << 1) & x[0]) >> 1;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	105b      	asrs	r3, r3, #1
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e40:	6193      	str	r3, [r2, #24]
	SR.BUSY = ((1 << 0) & x[0]) >> 0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e4a:	61d3      	str	r3, [r2, #28]

	SR.SUS  = ((1 << 7) & x[1]) >> 7;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	11db      	asrs	r3, r3, #7
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e56:	6213      	str	r3, [r2, #32]
	SR.CMP  = ((1 << 6) & x[1]) >> 6;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	119b      	asrs	r3, r3, #6
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e62:	6253      	str	r3, [r2, #36]	; 0x24
	SR.LB3  = ((1 << 5) & x[1]) >> 5;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	115b      	asrs	r3, r3, #5
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e6e:	6293      	str	r3, [r2, #40]	; 0x28
	SR.LB2  = ((1 << 4) & x[1]) >> 4;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	111b      	asrs	r3, r3, #4
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SR.LB1  = ((1 << 3) & x[1]) >> 3;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	10db      	asrs	r3, r3, #3
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
	SR.QE   = ((1 << 1) & x[1]) >> 1;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	105b      	asrs	r3, r3, #1
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e92:	6353      	str	r3, [r2, #52]	; 0x34
	SR.SRL  = ((1 << 0) & x[1]) >> 0;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000e9c:	6393      	str	r3, [r2, #56]	; 0x38

	SR.DRV1  = ((1 << 6) & x[1]) >> 6;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	119b      	asrs	r3, r3, #6
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000ea8:	63d3      	str	r3, [r2, #60]	; 0x3c
	SR.DRV2  = ((1 << 5) & x[1]) >> 5;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	115b      	asrs	r3, r3, #5
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
	SR.WPS  = ((1 << 2) & x[1]) >> 2;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	109b      	asrs	r3, r3, #2
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <Read_Status_Register+0x1dc>)
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000084 	.word	0x20000084
 8000ed0:	20000124 	.word	0x20000124

08000ed4 <Write_Enable>:

static int Write_Enable()
{
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed6:	b093      	sub	sp, #76	; 0x4c
 8000ed8:	af10      	add	r7, sp, #64	; 0x40
	int retval;
	SPI_CSS_Low(W25QX);
 8000eda:	4e24      	ldr	r6, [pc, #144]	; (8000f6c <Write_Enable+0x98>)
 8000edc:	466d      	mov	r5, sp
 8000ede:	f106 0410 	add.w	r4, r6, #16
 8000ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ef6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000efa:	f001 fbaa 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x06);
 8000efe:	4e1b      	ldr	r6, [pc, #108]	; (8000f6c <Write_Enable+0x98>)
 8000f00:	2306      	movs	r3, #6
 8000f02:	930e      	str	r3, [sp, #56]	; 0x38
 8000f04:	466d      	mov	r5, sp
 8000f06:	f106 0410 	add.w	r4, r6, #16
 8000f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f1e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f22:	f001 fbbe 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8000f26:	4e11      	ldr	r6, [pc, #68]	; (8000f6c <Write_Enable+0x98>)
 8000f28:	466d      	mov	r5, sp
 8000f2a:	f106 0410 	add.w	r4, r6, #16
 8000f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f46:	f001 fb98 	bl	800267a <SPI_CSS_High>

	Read_Status_Register();
 8000f4a:	f7ff fed3 	bl	8000cf4 <Read_Status_Register>
	if(SR.WEL)
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <Write_Enable+0x9c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <Write_Enable+0x88>
	{
		retval = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	e002      	b.n	8000f62 <Write_Enable+0x8e>
	}
	else
	{
		retval = -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	607b      	str	r3, [r7, #4]
	}
	return retval;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	20000084 	.word	0x20000084
 8000f70:	20000124 	.word	0x20000124

08000f74 <Write_Disable>:

static int Write_Disable()
{
 8000f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f76:	b093      	sub	sp, #76	; 0x4c
 8000f78:	af10      	add	r7, sp, #64	; 0x40
	int retval;
	SPI_CSS_Low(W25QX);
 8000f7a:	4e24      	ldr	r6, [pc, #144]	; (800100c <Write_Disable+0x98>)
 8000f7c:	466d      	mov	r5, sp
 8000f7e:	f106 0410 	add.w	r4, r6, #16
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f9a:	f001 fb5a 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x04);
 8000f9e:	4e1b      	ldr	r6, [pc, #108]	; (800100c <Write_Disable+0x98>)
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8000fa4:	466d      	mov	r5, sp
 8000fa6:	f106 0410 	add.w	r4, r6, #16
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fbe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fc2:	f001 fb6e 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8000fc6:	4e11      	ldr	r6, [pc, #68]	; (800100c <Write_Disable+0x98>)
 8000fc8:	466d      	mov	r5, sp
 8000fca:	f106 0410 	add.w	r4, r6, #16
 8000fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fe2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fe6:	f001 fb48 	bl	800267a <SPI_CSS_High>
	Read_Status_Register();
 8000fea:	f7ff fe83 	bl	8000cf4 <Read_Status_Register>
	if(SR.WEL)
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <Write_Disable+0x9c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <Write_Disable+0x8a>
	{
		retval = -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	e001      	b.n	8001002 <Write_Disable+0x8e>
	}
	else
	{
		retval = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
	}
	return retval;
 8001002:	687b      	ldr	r3, [r7, #4]
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100c:	20000084 	.word	0x20000084
 8001010:	20000124 	.word	0x20000124

08001014 <W25QX_Init>:
 * ############################################### Operation ###############################################
 * #########################################################################################################
 */

void W25QX_Init(W25Qx_Typedef *self)
{
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001018:	b0b1      	sub	sp, #196	; 0xc4
 800101a:	af10      	add	r7, sp, #64	; 0x40
 800101c:	6378      	str	r0, [r7, #52]	; 0x34
	W25QX.SPI = self->SPI_Port;
 800101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b9d      	ldr	r3, [pc, #628]	; (8001298 <W25QX_Init+0x284>)
 8001024:	601a      	str	r2, [r3, #0]
	W25QX.Frame = SPI_Frame_8Bit;
 8001026:	4a9c      	ldr	r2, [pc, #624]	; (8001298 <W25QX_Init+0x284>)
 8001028:	2300      	movs	r3, #0
 800102a:	7493      	strb	r3, [r2, #18]
	W25QX.type = SPI_Full_Duplex_Master;
 800102c:	4a9a      	ldr	r2, [pc, #616]	; (8001298 <W25QX_Init+0x284>)
 800102e:	2300      	movs	r3, #0
 8001030:	7153      	strb	r3, [r2, #5]
	W25QX.mode = SPI_Master;
 8001032:	4a99      	ldr	r2, [pc, #612]	; (8001298 <W25QX_Init+0x284>)
 8001034:	2301      	movs	r3, #1
 8001036:	7193      	strb	r3, [r2, #6]
	W25QX.LSB_MSB = 0;
 8001038:	4a97      	ldr	r2, [pc, #604]	; (8001298 <W25QX_Init+0x284>)
 800103a:	2300      	movs	r3, #0
 800103c:	7393      	strb	r3, [r2, #14]
	W25QX.frequency = 3;
 800103e:	4a96      	ldr	r2, [pc, #600]	; (8001298 <W25QX_Init+0x284>)
 8001040:	2303      	movs	r3, #3
 8001042:	6093      	str	r3, [r2, #8]
	W25QX.nCSS_Port = self->nCSS_Port;
 8001044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4b93      	ldr	r3, [pc, #588]	; (8001298 <W25QX_Init+0x284>)
 800104a:	615a      	str	r2, [r3, #20]
	W25QX.nCSS_pin = self->nCSS_Pin;
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	7a1b      	ldrb	r3, [r3, #8]
 8001050:	4a91      	ldr	r2, [pc, #580]	; (8001298 <W25QX_Init+0x284>)
 8001052:	7613      	strb	r3, [r2, #24]
	W25QX.pin_remap = self->pin_remap;
 8001054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001056:	7a5b      	ldrb	r3, [r3, #9]
 8001058:	4a8f      	ldr	r2, [pc, #572]	; (8001298 <W25QX_Init+0x284>)
 800105a:	7113      	strb	r3, [r2, #4]
	W25QX.polarity = 1;
 800105c:	4a8e      	ldr	r2, [pc, #568]	; (8001298 <W25QX_Init+0x284>)
 800105e:	2301      	movs	r3, #1
 8001060:	7353      	strb	r3, [r2, #13]
	W25QX.phase = 1;
 8001062:	4a8d      	ldr	r2, [pc, #564]	; (8001298 <W25QX_Init+0x284>)
 8001064:	2301      	movs	r3, #1
 8001066:	7313      	strb	r3, [r2, #12]
	W25QX.DMA_TX = 1;
 8001068:	4a8b      	ldr	r2, [pc, #556]	; (8001298 <W25QX_Init+0x284>)
 800106a:	2301      	movs	r3, #1
 800106c:	7413      	strb	r3, [r2, #16]
	W25QX.DMA_RX = 0;
 800106e:	4a8a      	ldr	r2, [pc, #552]	; (8001298 <W25QX_Init+0x284>)
 8001070:	2300      	movs	r3, #0
 8001072:	7453      	strb	r3, [r2, #17]
	SPI_Init(W25QX);
 8001074:	4e88      	ldr	r6, [pc, #544]	; (8001298 <W25QX_Init+0x284>)
 8001076:	466d      	mov	r5, sp
 8001078:	f106 0410 	add.w	r4, r6, #16
 800107c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001090:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001094:	f001 f92a 	bl	80022ec <SPI_Init>

/*************************************************************************************/

	W25Qx_Release_Power_Down();
 8001098:	f000 f9da 	bl	8001450 <W25Qx_Release_Power_Down>
	Delay_us(5);
 800109c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80010a0:	f7ff fe02 	bl	8000ca8 <Delay_us>

	SPI_CSS_Low(W25QX);
 80010a4:	4e7c      	ldr	r6, [pc, #496]	; (8001298 <W25QX_Init+0x284>)
 80010a6:	466d      	mov	r5, sp
 80010a8:	f106 0410 	add.w	r4, r6, #16
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80010c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010c4:	f001 fac5 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x9F);
 80010c8:	4e73      	ldr	r6, [pc, #460]	; (8001298 <W25QX_Init+0x284>)
 80010ca:	239f      	movs	r3, #159	; 0x9f
 80010cc:	930e      	str	r3, [sp, #56]	; 0x38
 80010ce:	466d      	mov	r5, sp
 80010d0:	f106 0410 	add.w	r4, r6, #16
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010ec:	f001 fad9 	bl	80026a2 <SPI_TRX_Data>
	self->Manufacturer_ID = SPI_TRX_Data(W25QX, 0xAA);
 80010f0:	4e69      	ldr	r6, [pc, #420]	; (8001298 <W25QX_Init+0x284>)
 80010f2:	23aa      	movs	r3, #170	; 0xaa
 80010f4:	930e      	str	r3, [sp, #56]	; 0x38
 80010f6:	466d      	mov	r5, sp
 80010f8:	f106 0410 	add.w	r4, r6, #16
 80010fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800110c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001110:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001114:	f001 fac5 	bl	80026a2 <SPI_TRX_Data>
 8001118:	4603      	mov	r3, r0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800111e:	7293      	strb	r3, [r2, #10]
	self->Memory_Type = SPI_TRX_Data(W25QX, 0xAA);
 8001120:	4e5d      	ldr	r6, [pc, #372]	; (8001298 <W25QX_Init+0x284>)
 8001122:	23aa      	movs	r3, #170	; 0xaa
 8001124:	930e      	str	r3, [sp, #56]	; 0x38
 8001126:	466d      	mov	r5, sp
 8001128:	f106 0410 	add.w	r4, r6, #16
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001140:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001144:	f001 faad 	bl	80026a2 <SPI_TRX_Data>
 8001148:	4603      	mov	r3, r0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800114e:	72d3      	strb	r3, [r2, #11]
	self->Capacity = SPI_TRX_Data(W25QX, 0xAA);
 8001150:	4e51      	ldr	r6, [pc, #324]	; (8001298 <W25QX_Init+0x284>)
 8001152:	23aa      	movs	r3, #170	; 0xaa
 8001154:	930e      	str	r3, [sp, #56]	; 0x38
 8001156:	466d      	mov	r5, sp
 8001158:	f106 0410 	add.w	r4, r6, #16
 800115c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001170:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001174:	f001 fa95 	bl	80026a2 <SPI_TRX_Data>
 8001178:	4603      	mov	r3, r0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800117e:	7313      	strb	r3, [r2, #12]
	SPI_CSS_High(W25QX);
 8001180:	4e45      	ldr	r6, [pc, #276]	; (8001298 <W25QX_Init+0x284>)
 8001182:	466d      	mov	r5, sp
 8001184:	f106 0410 	add.w	r4, r6, #16
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001198:	e885 0003 	stmia.w	r5, {r0, r1}
 800119c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a0:	f001 fa6b 	bl	800267a <SPI_CSS_High>

	uint64_t x[8];
	SPI_CSS_Low(W25QX);
 80011a4:	4e3c      	ldr	r6, [pc, #240]	; (8001298 <W25QX_Init+0x284>)
 80011a6:	466d      	mov	r5, sp
 80011a8:	f106 0410 	add.w	r4, r6, #16
 80011ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011c4:	f001 fa45 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x4B);
 80011c8:	4e33      	ldr	r6, [pc, #204]	; (8001298 <W25QX_Init+0x284>)
 80011ca:	234b      	movs	r3, #75	; 0x4b
 80011cc:	930e      	str	r3, [sp, #56]	; 0x38
 80011ce:	466d      	mov	r5, sp
 80011d0:	f106 0410 	add.w	r4, r6, #16
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011ec:	f001 fa59 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 80011f0:	4e29      	ldr	r6, [pc, #164]	; (8001298 <W25QX_Init+0x284>)
 80011f2:	23aa      	movs	r3, #170	; 0xaa
 80011f4:	930e      	str	r3, [sp, #56]	; 0x38
 80011f6:	466d      	mov	r5, sp
 80011f8:	f106 0410 	add.w	r4, r6, #16
 80011fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001208:	e894 0003 	ldmia.w	r4, {r0, r1}
 800120c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001210:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001214:	f001 fa45 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8001218:	4e1f      	ldr	r6, [pc, #124]	; (8001298 <W25QX_Init+0x284>)
 800121a:	23aa      	movs	r3, #170	; 0xaa
 800121c:	930e      	str	r3, [sp, #56]	; 0x38
 800121e:	466d      	mov	r5, sp
 8001220:	f106 0410 	add.w	r4, r6, #16
 8001224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001234:	e885 0003 	stmia.w	r5, {r0, r1}
 8001238:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800123c:	f001 fa31 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8001240:	4e15      	ldr	r6, [pc, #84]	; (8001298 <W25QX_Init+0x284>)
 8001242:	23aa      	movs	r3, #170	; 0xaa
 8001244:	930e      	str	r3, [sp, #56]	; 0x38
 8001246:	466d      	mov	r5, sp
 8001248:	f106 0410 	add.w	r4, r6, #16
 800124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001258:	e894 0003 	ldmia.w	r4, {r0, r1}
 800125c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001260:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001264:	f001 fa1d 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8001268:	4e0b      	ldr	r6, [pc, #44]	; (8001298 <W25QX_Init+0x284>)
 800126a:	23aa      	movs	r3, #170	; 0xaa
 800126c:	930e      	str	r3, [sp, #56]	; 0x38
 800126e:	466d      	mov	r5, sp
 8001270:	f106 0410 	add.w	r4, r6, #16
 8001274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001284:	e885 0003 	stmia.w	r5, {r0, r1}
 8001288:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800128c:	f001 fa09 	bl	80026a2 <SPI_TRX_Data>
	for(int i = 0 ; i < 8; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001294:	e028      	b.n	80012e8 <W25QX_Init+0x2d4>
 8001296:	bf00      	nop
 8001298:	20000084 	.word	0x20000084
	{
		x[i] = SPI_TRX_Data(W25QX, 0xAA);
 800129c:	4e68      	ldr	r6, [pc, #416]	; (8001440 <W25QX_Init+0x42c>)
 800129e:	23aa      	movs	r3, #170	; 0xaa
 80012a0:	930e      	str	r3, [sp, #56]	; 0x38
 80012a2:	466d      	mov	r5, sp
 80012a4:	f106 0410 	add.w	r4, r6, #16
 80012a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80012bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012c0:	f001 f9ef 	bl	80026a2 <SPI_TRX_Data>
 80012c4:	4603      	mov	r3, r0
 80012c6:	17da      	asrs	r2, r3, #31
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	3350      	adds	r3, #80	; 0x50
 80012d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012d6:	4413      	add	r3, r2
 80012d8:	3b48      	subs	r3, #72	; 0x48
 80012da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80012de:	e9c3 1200 	strd	r1, r2, [r3]
	for(int i = 0 ; i < 8; i++)
 80012e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012e4:	3301      	adds	r3, #1
 80012e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	ddd6      	ble.n	800129c <W25QX_Init+0x288>
	}
	self->Unique_ID = (x[0] << 56) | (x[1] << 48) | (x[2] << 40) | (x[3] << 32) | (x[4] << 24) | (x[5] << 16) |
 80012ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	f04f 0500 	mov.w	r5, #0
 80012fa:	0615      	lsls	r5, r2, #24
 80012fc:	2400      	movs	r4, #0
 80012fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	0411      	lsls	r1, r2, #16
 800130c:	2000      	movs	r0, #0
 800130e:	ea44 0800 	orr.w	r8, r4, r0
 8001312:	ea45 0901 	orr.w	r9, r5, r1
 8001316:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	0211      	lsls	r1, r2, #8
 8001324:	2000      	movs	r0, #0
 8001326:	ea48 0a00 	orr.w	sl, r8, r0
 800132a:	ea49 0b01 	orr.w	fp, r9, r1
 800132e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	0003      	movs	r3, r0
 800133c:	2200      	movs	r2, #0
 800133e:	ea4a 0102 	orr.w	r1, sl, r2
 8001342:	6239      	str	r1, [r7, #32]
 8001344:	ea4b 0303 	orr.w	r3, fp, r3
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	060b      	lsls	r3, r1, #24
 8001358:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 800135c:	0602      	lsls	r2, r0, #24
 800135e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001362:	4621      	mov	r1, r4
 8001364:	4311      	orrs	r1, r2
 8001366:	61b9      	str	r1, [r7, #24]
 8001368:	4629      	mov	r1, r5
 800136a:	4319      	orrs	r1, r3
 800136c:	61f9      	str	r1, [r7, #28]
 800136e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	040b      	lsls	r3, r1, #16
 800137c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001380:	0402      	lsls	r2, r0, #16
 8001382:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001386:	4621      	mov	r1, r4
 8001388:	4311      	orrs	r1, r2
 800138a:	6139      	str	r1, [r7, #16]
 800138c:	4629      	mov	r1, r5
 800138e:	4319      	orrs	r1, r3
 8001390:	6179      	str	r1, [r7, #20]
			(x[6] << 8) | (x[7] << 0);
 8001392:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	020b      	lsls	r3, r1, #8
 80013a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80013a4:	0202      	lsls	r2, r0, #8
	self->Unique_ID = (x[0] << 56) | (x[1] << 48) | (x[2] << 40) | (x[3] << 32) | (x[4] << 24) | (x[5] << 16) |
 80013a6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80013aa:	4621      	mov	r1, r4
 80013ac:	4311      	orrs	r1, r2
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	4629      	mov	r1, r5
 80013b2:	4319      	orrs	r1, r3
 80013b4:	60f9      	str	r1, [r7, #12]
			(x[6] << 8) | (x[7] << 0);
 80013b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80013ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013be:	4621      	mov	r1, r4
 80013c0:	4311      	orrs	r1, r2
 80013c2:	6039      	str	r1, [r7, #0]
 80013c4:	4629      	mov	r1, r5
 80013c6:	4319      	orrs	r1, r3
 80013c8:	6079      	str	r1, [r7, #4]
	self->Unique_ID = (x[0] << 56) | (x[1] << 48) | (x[2] << 40) | (x[3] << 32) | (x[4] << 24) | (x[5] << 16) |
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80013d0:	e9c3 1204 	strd	r1, r2, [r3, #16]
	SPI_CSS_High(W25QX);
 80013d4:	4e1a      	ldr	r6, [pc, #104]	; (8001440 <W25QX_Init+0x42c>)
 80013d6:	466d      	mov	r5, sp
 80013d8:	f106 0410 	add.w	r4, r6, #16
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80013f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013f4:	f001 f941 	bl	800267a <SPI_CSS_High>

	if(self->Memory_Type == 0x13)	//W25Q80
 80013f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fa:	7adb      	ldrb	r3, [r3, #11]
 80013fc:	2b13      	cmp	r3, #19
 80013fe:	d105      	bne.n	800140c <W25QX_Init+0x3f8>
	{
		self->Last_Address = 0x0FFFFF;
 8001400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <W25QX_Init+0x430>)
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if(self->Memory_Type == 64)	//W25Q16
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	7adb      	ldrb	r3, [r3, #11]
 8001410:	2b40      	cmp	r3, #64	; 0x40
 8001412:	d105      	bne.n	8001420 <W25QX_Init+0x40c>
	{
		self->Last_Address = 0x1FFFFF;
 8001414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <W25QX_Init+0x434>)
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if(self->Memory_Type == 0x15)	//W25Q32
 8001420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001422:	7adb      	ldrb	r3, [r3, #11]
 8001424:	2b15      	cmp	r3, #21
 8001426:	d105      	bne.n	8001434 <W25QX_Init+0x420>
	{
		self->Last_Address = 0x3FFFFF;
 8001428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <W25QX_Init+0x438>)
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

}
 8001434:	bf00      	nop
 8001436:	3784      	adds	r7, #132	; 0x84
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800143e:	bf00      	nop
 8001440:	20000084 	.word	0x20000084
 8001444:	000fffff 	.word	0x000fffff
 8001448:	001fffff 	.word	0x001fffff
 800144c:	003fffff 	.word	0x003fffff

08001450 <W25Qx_Release_Power_Down>:

void W25Qx_Release_Power_Down(void)
{
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	b091      	sub	sp, #68	; 0x44
 8001454:	af10      	add	r7, sp, #64	; 0x40
	SPI_CSS_Low(W25QX);
 8001456:	4e1e      	ldr	r6, [pc, #120]	; (80014d0 <W25Qx_Release_Power_Down+0x80>)
 8001458:	466d      	mov	r5, sp
 800145a:	f106 0410 	add.w	r4, r6, #16
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001472:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001476:	f001 f8ec 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0xAB);
 800147a:	4e15      	ldr	r6, [pc, #84]	; (80014d0 <W25Qx_Release_Power_Down+0x80>)
 800147c:	23ab      	movs	r3, #171	; 0xab
 800147e:	930e      	str	r3, [sp, #56]	; 0x38
 8001480:	466d      	mov	r5, sp
 8001482:	f106 0410 	add.w	r4, r6, #16
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001496:	e885 0003 	stmia.w	r5, {r0, r1}
 800149a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800149e:	f001 f900 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 80014a2:	4e0b      	ldr	r6, [pc, #44]	; (80014d0 <W25Qx_Release_Power_Down+0x80>)
 80014a4:	466d      	mov	r5, sp
 80014a6:	f106 0410 	add.w	r4, r6, #16
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014c2:	f001 f8da 	bl	800267a <SPI_CSS_High>
}
 80014c6:	bf00      	nop
 80014c8:	3704      	adds	r7, #4
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000084 	.word	0x20000084

080014d4 <W25Qx_Read_Byte>:
}



int W25Qx_Read_Byte(uint32_t address)
{
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b095      	sub	sp, #84	; 0x54
 80014d8:	af10      	add	r7, sp, #64	; 0x40
 80014da:	6078      	str	r0, [r7, #4]
	int32_t LA = (int32_t)address;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60fb      	str	r3, [r7, #12]
	int read = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
	SPI_CSS_Low(W25QX);
 80014e4:	4e49      	ldr	r6, [pc, #292]	; (800160c <W25Qx_Read_Byte+0x138>)
 80014e6:	466d      	mov	r5, sp
 80014e8:	f106 0410 	add.w	r4, r6, #16
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001500:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001504:	f001 f8a5 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x03);
 8001508:	4e40      	ldr	r6, [pc, #256]	; (800160c <W25Qx_Read_Byte+0x138>)
 800150a:	2303      	movs	r3, #3
 800150c:	930e      	str	r3, [sp, #56]	; 0x38
 800150e:	466d      	mov	r5, sp
 8001510:	f106 0410 	add.w	r4, r6, #16
 8001514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001524:	e885 0003 	stmia.w	r5, {r0, r1}
 8001528:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800152c:	f001 f8b9 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & LA) >> 16);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	141b      	asrs	r3, r3, #16
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4e35      	ldr	r6, [pc, #212]	; (800160c <W25Qx_Read_Byte+0x138>)
 8001538:	930e      	str	r3, [sp, #56]	; 0x38
 800153a:	466d      	mov	r5, sp
 800153c:	f106 0410 	add.w	r4, r6, #16
 8001540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001550:	e885 0003 	stmia.w	r5, {r0, r1}
 8001554:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001558:	f001 f8a3 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & LA) >> 8);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	121b      	asrs	r3, r3, #8
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4e2a      	ldr	r6, [pc, #168]	; (800160c <W25Qx_Read_Byte+0x138>)
 8001564:	930e      	str	r3, [sp, #56]	; 0x38
 8001566:	466d      	mov	r5, sp
 8001568:	f106 0410 	add.w	r4, r6, #16
 800156c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001580:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001584:	f001 f88d 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & LA) >> 0);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4e1f      	ldr	r6, [pc, #124]	; (800160c <W25Qx_Read_Byte+0x138>)
 800158e:	930e      	str	r3, [sp, #56]	; 0x38
 8001590:	466d      	mov	r5, sp
 8001592:	f106 0410 	add.w	r4, r6, #16
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ae:	f001 f878 	bl	80026a2 <SPI_TRX_Data>
	read = SPI_TRX_Data(W25QX, 0xAA);
 80015b2:	4e16      	ldr	r6, [pc, #88]	; (800160c <W25Qx_Read_Byte+0x138>)
 80015b4:	23aa      	movs	r3, #170	; 0xaa
 80015b6:	930e      	str	r3, [sp, #56]	; 0x38
 80015b8:	466d      	mov	r5, sp
 80015ba:	f106 0410 	add.w	r4, r6, #16
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015d6:	f001 f864 	bl	80026a2 <SPI_TRX_Data>
 80015da:	60b8      	str	r0, [r7, #8]
	SPI_CSS_High(W25QX);
 80015dc:	4e0b      	ldr	r6, [pc, #44]	; (800160c <W25Qx_Read_Byte+0x138>)
 80015de:	466d      	mov	r5, sp
 80015e0:	f106 0410 	add.w	r4, r6, #16
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015fc:	f001 f83d 	bl	800267a <SPI_CSS_High>
	return read;
 8001600:	68bb      	ldr	r3, [r7, #8]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160a:	bf00      	nop
 800160c:	20000084 	.word	0x20000084

08001610 <W25Qx_Store_Last_Position>:




void W25Qx_Store_Last_Position(W25Qx_Typedef *self, uint64_t last_address)
{
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001614:	b09d      	sub	sp, #116	; 0x74
 8001616:	af10      	add	r7, sp, #64	; 0x40
 8001618:	61f8      	str	r0, [r7, #28]
 800161a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t write[3];

	last_address = last_address + 0;

	write[0] = (0xFF0000 & last_address) >> 16;
 800161e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	0c02      	lsrs	r2, r0, #16
 800162c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001630:	0c0b      	lsrs	r3, r1, #16
 8001632:	4613      	mov	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
	write[1] = (0x00FF00 & last_address) >> 8;
 8001638:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	0a02      	lsrs	r2, r0, #8
 8001646:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800164a:	0a0b      	lsrs	r3, r1, #8
 800164c:	4613      	mov	r3, r2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
	write[2] = (0x0000FF & last_address) >> 0;
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c

	Write_Enable();
 8001658:	f7ff fc3c 	bl	8000ed4 <Write_Enable>
	SPI_CSS_Low(W25QX);
 800165c:	4ebb      	ldr	r6, [pc, #748]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 800165e:	466d      	mov	r5, sp
 8001660:	f106 0410 	add.w	r4, r6, #16
 8001664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001674:	e885 0003 	stmia.w	r5, {r0, r1}
 8001678:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800167c:	f000 ffe9 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x02);
 8001680:	4eb2      	ldr	r6, [pc, #712]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 8001682:	2302      	movs	r3, #2
 8001684:	930e      	str	r3, [sp, #56]	; 0x38
 8001686:	466d      	mov	r5, sp
 8001688:	f106 0410 	add.w	r4, r6, #16
 800168c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169c:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016a4:	f000 fffd 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & (self->Last_Address -0)) >> 16);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	0c02      	lsrs	r2, r0, #16
 80016b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016bc:	0c0b      	lsrs	r3, r1, #16
 80016be:	4613      	mov	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4ea2      	ldr	r6, [pc, #648]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 80016c4:	930e      	str	r3, [sp, #56]	; 0x38
 80016c6:	466d      	mov	r5, sp
 80016c8:	f106 0410 	add.w	r4, r6, #16
 80016cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016e4:	f000 ffdd 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & (self->Last_Address -0)) >> 8);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	0a02      	lsrs	r2, r0, #8
 80016f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016fc:	0a0b      	lsrs	r3, r1, #8
 80016fe:	4613      	mov	r3, r2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4e92      	ldr	r6, [pc, #584]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 8001704:	930e      	str	r3, [sp, #56]	; 0x38
 8001706:	466d      	mov	r5, sp
 8001708:	f106 0410 	add.w	r4, r6, #16
 800170c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001720:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001724:	f000 ffbd 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & (self->Last_Address -0)) >> 0);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800172e:	4613      	mov	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4e86      	ldr	r6, [pc, #536]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 8001734:	930e      	str	r3, [sp, #56]	; 0x38
 8001736:	466d      	mov	r5, sp
 8001738:	f106 0410 	add.w	r4, r6, #16
 800173c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001750:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001754:	f000 ffa5 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, write[0]);
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	4e7c      	ldr	r6, [pc, #496]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 800175c:	930e      	str	r3, [sp, #56]	; 0x38
 800175e:	466d      	mov	r5, sp
 8001760:	f106 0410 	add.w	r4, r6, #16
 8001764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001774:	e885 0003 	stmia.w	r5, {r0, r1}
 8001778:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800177c:	f000 ff91 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8001780:	4e72      	ldr	r6, [pc, #456]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 8001782:	466d      	mov	r5, sp
 8001784:	f106 0410 	add.w	r4, r6, #16
 8001788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001798:	e885 0003 	stmia.w	r5, {r0, r1}
 800179c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017a0:	f000 ff6b 	bl	800267a <SPI_CSS_High>
	Write_Disable();
 80017a4:	f7ff fbe6 	bl	8000f74 <Write_Disable>

	Write_Enable();
 80017a8:	f7ff fb94 	bl	8000ed4 <Write_Enable>
	SPI_CSS_Low(W25QX);
 80017ac:	4e67      	ldr	r6, [pc, #412]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 80017ae:	466d      	mov	r5, sp
 80017b0:	f106 0410 	add.w	r4, r6, #16
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017cc:	f000 ff41 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x02);
 80017d0:	4e5e      	ldr	r6, [pc, #376]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 80017d2:	2302      	movs	r3, #2
 80017d4:	930e      	str	r3, [sp, #56]	; 0x38
 80017d6:	466d      	mov	r5, sp
 80017d8:	f106 0410 	add.w	r4, r6, #16
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017f4:	f000 ff55 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & (self->Last_Address -1)) >> 16);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017fe:	1e51      	subs	r1, r2, #1
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001814:	4621      	mov	r1, r4
 8001816:	0c0a      	lsrs	r2, r1, #16
 8001818:	4629      	mov	r1, r5
 800181a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800181e:	4629      	mov	r1, r5
 8001820:	0c0b      	lsrs	r3, r1, #16
 8001822:	4613      	mov	r3, r2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4e49      	ldr	r6, [pc, #292]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 8001828:	930e      	str	r3, [sp, #56]	; 0x38
 800182a:	466d      	mov	r5, sp
 800182c:	f106 0410 	add.w	r4, r6, #16
 8001830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001840:	e885 0003 	stmia.w	r5, {r0, r1}
 8001844:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001848:	f000 ff2b 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & (self->Last_Address -1)) >> 8);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001852:	1e51      	subs	r1, r2, #1
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	f143 33ff 	adc.w	r3, r3, #4294967295
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001868:	4621      	mov	r1, r4
 800186a:	0a0a      	lsrs	r2, r1, #8
 800186c:	4629      	mov	r1, r5
 800186e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001872:	4629      	mov	r1, r5
 8001874:	0a0b      	lsrs	r3, r1, #8
 8001876:	4613      	mov	r3, r2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4e34      	ldr	r6, [pc, #208]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 800187c:	930e      	str	r3, [sp, #56]	; 0x38
 800187e:	466d      	mov	r5, sp
 8001880:	f106 0410 	add.w	r4, r6, #16
 8001884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001894:	e885 0003 	stmia.w	r5, {r0, r1}
 8001898:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800189c:	f000 ff01 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & (self->Last_Address -1)) >> 0);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018a6:	4613      	mov	r3, r2
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4e27      	ldr	r6, [pc, #156]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 80018ae:	930e      	str	r3, [sp, #56]	; 0x38
 80018b0:	466d      	mov	r5, sp
 80018b2:	f106 0410 	add.w	r4, r6, #16
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018ce:	f000 fee8 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, write[1]);
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	4e1d      	ldr	r6, [pc, #116]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 80018d6:	930e      	str	r3, [sp, #56]	; 0x38
 80018d8:	466d      	mov	r5, sp
 80018da:	f106 0410 	add.w	r4, r6, #16
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80018f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018f6:	f000 fed4 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 80018fa:	4e14      	ldr	r6, [pc, #80]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 80018fc:	466d      	mov	r5, sp
 80018fe:	f106 0410 	add.w	r4, r6, #16
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001912:	e885 0003 	stmia.w	r5, {r0, r1}
 8001916:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800191a:	f000 feae 	bl	800267a <SPI_CSS_High>
	Write_Disable();
 800191e:	f7ff fb29 	bl	8000f74 <Write_Disable>

	Write_Enable();
 8001922:	f7ff fad7 	bl	8000ed4 <Write_Enable>
	SPI_CSS_Low(W25QX);
 8001926:	4e09      	ldr	r6, [pc, #36]	; (800194c <W25Qx_Store_Last_Position+0x33c>)
 8001928:	466d      	mov	r5, sp
 800192a:	f106 0410 	add.w	r4, r6, #16
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800193e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001942:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001946:	f000 fe84 	bl	8002652 <SPI_CSS_Low>
 800194a:	e001      	b.n	8001950 <W25Qx_Store_Last_Position+0x340>
 800194c:	20000084 	.word	0x20000084
	SPI_TRX_Data(W25QX, 0x02);
 8001950:	4e52      	ldr	r6, [pc, #328]	; (8001a9c <W25Qx_Store_Last_Position+0x48c>)
 8001952:	2302      	movs	r3, #2
 8001954:	930e      	str	r3, [sp, #56]	; 0x38
 8001956:	466d      	mov	r5, sp
 8001958:	f106 0410 	add.w	r4, r6, #16
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001970:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001974:	f000 fe95 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & (self->Last_Address -2)) >> 16);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800197e:	f1b2 0a02 	subs.w	sl, r2, #2
 8001982:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8001992:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001996:	ea4f 431b 	mov.w	r3, fp, lsr #16
 800199a:	4613      	mov	r3, r2
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4e3f      	ldr	r6, [pc, #252]	; (8001a9c <W25Qx_Store_Last_Position+0x48c>)
 80019a0:	930e      	str	r3, [sp, #56]	; 0x38
 80019a2:	466d      	mov	r5, sp
 80019a4:	f106 0410 	add.w	r4, r6, #16
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019c0:	f000 fe6f 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & (self->Last_Address -2)) >> 8);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019ca:	f1b2 0802 	subs.w	r8, r2, #2
 80019ce:	f143 39ff 	adc.w	r9, r3, #4294967295
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80019de:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 80019e2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80019e6:	4613      	mov	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4e2c      	ldr	r6, [pc, #176]	; (8001a9c <W25Qx_Store_Last_Position+0x48c>)
 80019ec:	930e      	str	r3, [sp, #56]	; 0x38
 80019ee:	466d      	mov	r5, sp
 80019f0:	f106 0410 	add.w	r4, r6, #16
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a0c:	f000 fe49 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & (self->Last_Address -2)) >> 0);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a16:	4613      	mov	r3, r2
 8001a18:	3b02      	subs	r3, #2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4e1f      	ldr	r6, [pc, #124]	; (8001a9c <W25Qx_Store_Last_Position+0x48c>)
 8001a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8001a20:	466d      	mov	r5, sp
 8001a22:	f106 0410 	add.w	r4, r6, #16
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a3e:	f000 fe30 	bl	80026a2 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, write[2]);
 8001a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a44:	4e15      	ldr	r6, [pc, #84]	; (8001a9c <W25Qx_Store_Last_Position+0x48c>)
 8001a46:	930e      	str	r3, [sp, #56]	; 0x38
 8001a48:	466d      	mov	r5, sp
 8001a4a:	f106 0410 	add.w	r4, r6, #16
 8001a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a66:	f000 fe1c 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8001a6a:	4e0c      	ldr	r6, [pc, #48]	; (8001a9c <W25Qx_Store_Last_Position+0x48c>)
 8001a6c:	466d      	mov	r5, sp
 8001a6e:	f106 0410 	add.w	r4, r6, #16
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a86:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a8a:	f000 fdf6 	bl	800267a <SPI_CSS_High>
	Write_Disable();
 8001a8e:	f7ff fa71 	bl	8000f74 <Write_Disable>

}
 8001a92:	bf00      	nop
 8001a94:	3734      	adds	r7, #52	; 0x34
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a9c:	20000084 	.word	0x20000084

08001aa0 <W25Qx_Read_Last_Write_Poisition>:

uint32_t W25Qx_Read_Last_Write_Poisition(W25Qx_Typedef *self)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint32_t ret;
	uint32_t read[3];
	read[0] = W25Qx_Read_Byte(self->Last_Address-0);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fd0f 	bl	80014d4 <W25Qx_Read_Byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60bb      	str	r3, [r7, #8]
	read[1] = W25Qx_Read_Byte(self->Last_Address-1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd05 	bl	80014d4 <W25Qx_Read_Byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	60fb      	str	r3, [r7, #12]
	read[2] = W25Qx_Read_Byte(self->Last_Address-2);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	3b02      	subs	r3, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fcfb 	bl	80014d4 <W25Qx_Read_Byte>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]
	ret =  (read[0] << 16) |  (read[1] << 8) | (read[2] << 0);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	041a      	lsls	r2, r3, #16
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	431a      	orrs	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
	return ret;
 8001af2:	697b      	ldr	r3, [r7, #20]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <W25Qx_Write_Page>:


void W25Qx_Write_Page(W25Qx_Typedef *self,int32_t address, uint8_t *data, int len)
{
 8001afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b00:	b0df      	sub	sp, #380	; 0x17c
 8001b02:	af0e      	add	r7, sp, #56	; 0x38
 8001b04:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8001b08:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 8001b0c:	6020      	str	r0, [r4, #0]
 8001b0e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001b12:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8001b16:	6001      	str	r1, [r0, #0]
 8001b18:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001b1c:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8001b20:	600a      	str	r2, [r1, #0]
 8001b22:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001b26:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8001b2a:	6013      	str	r3, [r2, #0]
	uint32_t LA;
	uint8_t buffer[300];

	if(address == -1)
 8001b2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b30:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d109      	bne.n	8001b50 <W25Qx_Write_Page+0x54>
	{
		LA = W25Qx_Read_Last_Write_Poisition(self);
 8001b3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f7ff ffab 	bl	8001aa0 <W25Qx_Read_Last_Write_Poisition>
 8001b4a:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 8001b4e:	e006      	b.n	8001b5e <W25Qx_Write_Page+0x62>
	}
	else
	{
		LA = (uint32_t)address;
 8001b50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b54:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	}

	buffer[0] = 0x02;
 8001b5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((0xFF0000 & LA) >> 16);
 8001b6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b7a:	705a      	strb	r2, [r3, #1]
	buffer[2] = ((0x00FF00 & LA) >> 8);
 8001b7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b8c:	709a      	strb	r2, [r3, #2]
	buffer[3] = ((0x0000FF & LA) >> 0);
 8001b8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b9c:	70da      	strb	r2, [r3, #3]
	DMA_Memory_To_Memory_Transfer(data, 8, 8, (uint32_t)&buffer[4], 1, 1, len);
 8001b9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ba2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f107 0210 	add.w	r2, r7, #16
 8001bae:	3204      	adds	r2, #4
 8001bb0:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001bb4:	f5a1 709e 	sub.w	r0, r1, #316	; 0x13c
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	6800      	ldr	r0, [r0, #0]
 8001bca:	f7fe ffa1 	bl	8000b10 <DMA_Memory_To_Memory_Transfer>

	Write_Enable();
 8001bce:	f7ff f981 	bl	8000ed4 <Write_Enable>

	W25QX.DMA_TX = 1;
 8001bd2:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <W25Qx_Write_Page+0x22c>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	741a      	strb	r2, [r3, #16]
	SPI_Enable_DMA(W25QX);
 8001bd8:	4e53      	ldr	r6, [pc, #332]	; (8001d28 <W25Qx_Write_Page+0x22c>)
 8001bda:	466d      	mov	r5, sp
 8001bdc:	f106 0410 	add.w	r4, r6, #16
 8001be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bf4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001bf8:	f000 fcfe 	bl	80025f8 <SPI_Enable_DMA>
	W25Qx_DMA.DMA_Port = SPI1_DMA_Port;
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <W25Qx_Write_Page+0x234>)
 8001c00:	601a      	str	r2, [r3, #0]
	W25Qx_DMA.Stream = SPI1_DMA_TX_STREAM5;
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c04:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <W25Qx_Write_Page+0x238>)
 8001c06:	605a      	str	r2, [r3, #4]
	W25Qx_DMA.channel = SPI1_DMA_TX_CHANNEL;
 8001c08:	4b48      	ldr	r3, [pc, #288]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	609a      	str	r2, [r3, #8]
	W25Qx_DMA.Transfer_Complete_interrupt = 1;
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	739a      	strb	r2, [r3, #14]
	W25Qx_DMA.circular_buff_enable = 0;
 8001c14:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	731a      	strb	r2, [r3, #12]
	W25Qx_DMA.memory_data_size = Byte;
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	W25Qx_DMA.periphera_data_size = Byte;
 8001c22:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	W25Qx_DMA.direction = DMA_Direction_Memory_to_Peripheral;
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2020 	strb.w	r2, [r3, #32]
	DMA_Init(&W25Qx_DMA);
 8001c32:	483e      	ldr	r0, [pc, #248]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c34:	f7fe fce2 	bl	80005fc <DMA_Init>

	W25Qx_DMA.Source_Address = (uint32_t)&(self->SPI_Port->DR);
 8001c38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	330c      	adds	r3, #12
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c4a:	619a      	str	r2, [r3, #24]
	W25Qx_DMA.Desitnation_Address = (uint32_t)&(buffer[0]);
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	4a36      	ldr	r2, [pc, #216]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c52:	6153      	str	r3, [r2, #20]
	W25Qx_DMA.data_length = len+4;
 8001c54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c62:	61d3      	str	r3, [r2, #28]
	SPI_CSS_Low(W25QX);
 8001c64:	4e30      	ldr	r6, [pc, #192]	; (8001d28 <W25Qx_Write_Page+0x22c>)
 8001c66:	466d      	mov	r5, sp
 8001c68:	f106 0410 	add.w	r4, r6, #16
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c84:	f000 fce5 	bl	8002652 <SPI_CSS_Low>
	DMA_Trigger(&W25Qx_DMA,1);
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4828      	ldr	r0, [pc, #160]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001c8c:	f7fe fe34 	bl	80008f8 <DMA_Trigger>
	Delay_us(5);
 8001c90:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c94:	f7ff f808 	bl	8000ca8 <Delay_us>
	SPI_CSS_High(W25QX);
 8001c98:	4e23      	ldr	r6, [pc, #140]	; (8001d28 <W25Qx_Write_Page+0x22c>)
 8001c9a:	466d      	mov	r5, sp
 8001c9c:	f106 0410 	add.w	r4, r6, #16
 8001ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cb8:	f000 fcdf 	bl	800267a <SPI_CSS_High>
	SPI_Disable_DMA(W25QX);
 8001cbc:	4e1a      	ldr	r6, [pc, #104]	; (8001d28 <W25Qx_Write_Page+0x22c>)
 8001cbe:	466d      	mov	r5, sp
 8001cc0:	f106 0410 	add.w	r4, r6, #16
 8001cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001cdc:	f000 fca2 	bl	8002624 <SPI_Disable_DMA>
	DMA_DeInit(&W25Qx_DMA);
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <W25Qx_Write_Page+0x230>)
 8001ce2:	f7fe ffc7 	bl	8000c74 <DMA_DeInit>
	Write_Disable();
 8001ce6:	f7ff f945 	bl	8000f74 <Write_Disable>
	LA = LA + len;
 8001cea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	W25Qx_Store_Last_Position(self, LA);
 8001cfe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d02:	2200      	movs	r2, #0
 8001d04:	4698      	mov	r8, r3
 8001d06:	4691      	mov	r9, r2
 8001d08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d0c:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8001d10:	4642      	mov	r2, r8
 8001d12:	464b      	mov	r3, r9
 8001d14:	6808      	ldr	r0, [r1, #0]
 8001d16:	f7ff fc7b 	bl	8001610 <W25Qx_Store_Last_Position>
//	DMA_DeInit(&W25Qx_DMA);

}
 8001d1a:	bf00      	nop
 8001d1c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001d20:	46bd      	mov	sp, r7
 8001d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d26:	bf00      	nop
 8001d28:	20000084 	.word	0x20000084
 8001d2c:	200000cc 	.word	0x200000cc
 8001d30:	40026400 	.word	0x40026400
 8001d34:	40026488 	.word	0x40026488

08001d38 <W25Qx_Read_Page>:

void W25Qx_Read_Page(W25Qx_Typedef *self,int32_t starting_address, int32_t ending_address, uint8_t *data, uint32_t length)
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b0e1      	sub	sp, #388	; 0x184
 8001d3c:	af0e      	add	r7, sp, #56	; 0x38
 8001d3e:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8001d42:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8001d46:	6020      	str	r0, [r4, #0]
 8001d48:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001d4c:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8001d50:	6001      	str	r1, [r0, #0]
 8001d52:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001d56:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8001d5a:	600a      	str	r2, [r1, #0]
 8001d5c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001d60:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8001d64:	6013      	str	r3, [r2, #0]
	W25QX.DMA_TX = 1;
 8001d66:	4bb0      	ldr	r3, [pc, #704]	; (8002028 <W25Qx_Read_Page+0x2f0>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	741a      	strb	r2, [r3, #16]
	W25QX.DMA_RX = 1;
 8001d6c:	4bae      	ldr	r3, [pc, #696]	; (8002028 <W25Qx_Read_Page+0x2f0>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	745a      	strb	r2, [r3, #17]
	SPI_Enable_DMA(W25QX);
 8001d72:	4ead      	ldr	r6, [pc, #692]	; (8002028 <W25Qx_Read_Page+0x2f0>)
 8001d74:	466d      	mov	r5, sp
 8001d76:	f106 0410 	add.w	r4, r6, #16
 8001d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d92:	f000 fc31 	bl	80025f8 <SPI_Enable_DMA>

	uint32_t source_dummy = 0xAA;
 8001d96:	23aa      	movs	r3, #170	; 0xaa
 8001d98:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t tx_buffer[300];


	uint32_t ret_value;

	if(ending_address == -1)
 8001d9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001da0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001daa:	d113      	bne.n	8001dd4 <W25Qx_Read_Page+0x9c>
	{
		ending_address = starting_address + length;
 8001dac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001db0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dba:	441a      	add	r2, r3
 8001dbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001dc0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dc4:	601a      	str	r2, [r3, #0]
		ret_value = ending_address;
 8001dc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001dca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	}
	if(length == -1)
 8001dd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d110      	bne.n	8001e00 <W25Qx_Read_Page+0xc8>
	{
		length = ending_address - starting_address;
 8001dde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001de2:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 8001de6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001dea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		ret_value = length;
 8001df8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dfc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	}

	tx_buffer[0] = 0x03;
 8001e00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e08:	2203      	movs	r2, #3
 8001e0a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = ((0xFF0000 & starting_address) >> 16);
 8001e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	141b      	asrs	r3, r3, #16
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e22:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = ((0x00FF00 & starting_address) >> 8);
 8001e24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	121b      	asrs	r3, r3, #8
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e3a:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = ((0x0000FF & starting_address) >> 0);
 8001e3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e50:	70da      	strb	r2, [r3, #3]
	DMA_Memory_To_Memory_Transfer(&source_dummy, 8, 8, (uint32_t)&tx_buffer[4], 0, 1, length);
 8001e52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f107 0214 	add.w	r2, r7, #20
 8001e5c:	3204      	adds	r2, #4
 8001e5e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2301      	movs	r3, #1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	2208      	movs	r2, #8
 8001e70:	2108      	movs	r1, #8
 8001e72:	f7fe fe4d 	bl	8000b10 <DMA_Memory_To_Memory_Transfer>


	W25Qx_DMA.DMA_Port = SPI1_DMA_Port;
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e78:	4a6d      	ldr	r2, [pc, #436]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001e7a:	601a      	str	r2, [r3, #0]
	W25Qx_DMA.Stream = SPI1_DMA_TX_STREAM5;
 8001e7c:	4b6b      	ldr	r3, [pc, #428]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e7e:	4a6d      	ldr	r2, [pc, #436]	; (8002034 <W25Qx_Read_Page+0x2fc>)
 8001e80:	605a      	str	r2, [r3, #4]
	W25Qx_DMA.channel = SPI1_DMA_TX_CHANNEL;
 8001e82:	4b6a      	ldr	r3, [pc, #424]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e84:	2203      	movs	r2, #3
 8001e86:	609a      	str	r2, [r3, #8]
	W25Qx_DMA.Transfer_Complete_interrupt = 1;
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	739a      	strb	r2, [r3, #14]
	W25Qx_DMA.circular_buff_enable = 0;
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	731a      	strb	r2, [r3, #12]
	W25Qx_DMA.memory_data_size = Byte;
 8001e94:	4b65      	ldr	r3, [pc, #404]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	W25Qx_DMA.periphera_data_size = Byte;
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	W25Qx_DMA.direction = DMA_Direction_Memory_to_Peripheral;
 8001ea4:	4b61      	ldr	r3, [pc, #388]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]
	DMA_Init(&W25Qx_DMA);
 8001eac:	485f      	ldr	r0, [pc, #380]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001eae:	f7fe fba5 	bl	80005fc <DMA_Init>

	W25Qx_DMA.Source_Address = (uint32_t)&(self->SPI_Port->DR);
 8001eb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001eb6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	330c      	adds	r3, #12
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001ec4:	619a      	str	r2, [r3, #24]
	W25Qx_DMA.Desitnation_Address = (uint32_t)&(tx_buffer[0]);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4a58      	ldr	r2, [pc, #352]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001ecc:	6153      	str	r3, [r2, #20]
	W25Qx_DMA.data_length = length+5;
 8001ece:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ed2:	3305      	adds	r3, #5
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001ed8:	61da      	str	r2, [r3, #28]

	DMA_Set_Target(&W25Qx_DMA);
 8001eda:	4854      	ldr	r0, [pc, #336]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001edc:	f7fe fcce 	bl	800087c <DMA_Set_Target>

	W25Qx_DMA_RX.DMA_Port = SPI1_DMA_Port;
 8001ee0:	4b55      	ldr	r3, [pc, #340]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001ee2:	4a53      	ldr	r2, [pc, #332]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001ee4:	601a      	str	r2, [r3, #0]
	W25Qx_DMA_RX.Stream = SPI1_DMA_RX_STREAM2;
 8001ee6:	4b54      	ldr	r3, [pc, #336]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <W25Qx_Read_Page+0x304>)
 8001eea:	605a      	str	r2, [r3, #4]
	W25Qx_DMA_RX.channel = SPI1_DMA_RX_CHANNEL;
 8001eec:	4b52      	ldr	r3, [pc, #328]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001eee:	2203      	movs	r2, #3
 8001ef0:	609a      	str	r2, [r3, #8]
	W25Qx_DMA_RX.Transfer_Complete_interrupt = 1;
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	739a      	strb	r2, [r3, #14]
	W25Qx_DMA_RX.circular_buff_enable = 0;
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	731a      	strb	r2, [r3, #12]
	W25Qx_DMA_RX.memory_data_size = Half_Word;
 8001efe:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	W25Qx_DMA_RX.periphera_data_size = Half_Word;
 8001f06:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	W25Qx_DMA_RX.direction = DMA_Direction_Peripheral_to_Memory;
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]
	DMA_Init(&W25Qx_DMA_RX);
 8001f16:	4848      	ldr	r0, [pc, #288]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f18:	f7fe fb70 	bl	80005fc <DMA_Init>

	W25Qx_DMA_RX.Source_Address = (uint32_t)&(self->SPI_Port->DR);
 8001f1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f2e:	619a      	str	r2, [r3, #24]
	W25Qx_DMA_RX.Desitnation_Address = (uint32_t)&(tx_buffer[0]);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4a40      	ldr	r2, [pc, #256]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f36:	6153      	str	r3, [r2, #20]
	W25Qx_DMA_RX.data_length = length+5;
 8001f38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f3c:	3305      	adds	r3, #5
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f42:	61da      	str	r2, [r3, #28]
	DMA_Set_Target(&W25Qx_DMA_RX);
 8001f44:	483c      	ldr	r0, [pc, #240]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f46:	f7fe fc99 	bl	800087c <DMA_Set_Target>


	SPI_CSS_Low(W25QX);
 8001f4a:	4e37      	ldr	r6, [pc, #220]	; (8002028 <W25Qx_Read_Page+0x2f0>)
 8001f4c:	466d      	mov	r5, sp
 8001f4e:	f106 0410 	add.w	r4, r6, #16
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f6a:	f000 fb72 	bl	8002652 <SPI_CSS_Low>
//	Delay_us(10);
	DMA_Enable(&W25Qx_DMA);
 8001f6e:	482f      	ldr	r0, [pc, #188]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001f70:	f7fe fc9e 	bl	80008b0 <DMA_Enable>
	DMA_Enable(&W25Qx_DMA_RX);
 8001f74:	4830      	ldr	r0, [pc, #192]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001f76:	f7fe fc9b 	bl	80008b0 <DMA_Enable>

	while((DMA2 -> LISR & (DMA_LISR_TCIF2_Msk)) == 0){}
 8001f7a:	bf00      	nop
 8001f7c:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f9      	beq.n	8001f7c <W25Qx_Read_Page+0x244>
	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f92:	6093      	str	r3, [r2, #8]
	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f9e:	6093      	str	r3, [r2, #8]

	while((DMA2 -> HISR & (DMA_HISR_TCIF5_Msk)) == 0){}
 8001fa0:	bf00      	nop
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f9      	beq.n	8001fa2 <W25Qx_Read_Page+0x26a>
	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fb8:	60d3      	str	r3, [r2, #12]
	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <W25Qx_Read_Page+0x2f8>)
 8001fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc4:	60d3      	str	r3, [r2, #12]

	SPI_CSS_High(W25QX);
 8001fc6:	4e18      	ldr	r6, [pc, #96]	; (8002028 <W25Qx_Read_Page+0x2f0>)
 8001fc8:	466d      	mov	r5, sp
 8001fca:	f106 0410 	add.w	r4, r6, #16
 8001fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fe6:	f000 fb48 	bl	800267a <SPI_CSS_High>
	DMA_Disable(&W25Qx_DMA);
 8001fea:	4810      	ldr	r0, [pc, #64]	; (800202c <W25Qx_Read_Page+0x2f4>)
 8001fec:	f7fe fc72 	bl	80008d4 <DMA_Disable>
	DMA_Disable(&W25Qx_DMA_RX);
 8001ff0:	4811      	ldr	r0, [pc, #68]	; (8002038 <W25Qx_Read_Page+0x300>)
 8001ff2:	f7fe fc6f 	bl	80008d4 <DMA_Disable>

	DMA_Memory_To_Memory_Transfer(&tx_buffer[5], 8, 8, data, 1, 1, length);
 8001ff6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002000:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002004:	f107 0114 	add.w	r1, r7, #20
 8002008:	1d48      	adds	r0, r1, #5
 800200a:	9202      	str	r2, [sp, #8]
 800200c:	2201      	movs	r2, #1
 800200e:	9201      	str	r2, [sp, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	9200      	str	r2, [sp, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2208      	movs	r2, #8
 8002018:	2108      	movs	r1, #8
 800201a:	f7fe fd79 	bl	8000b10 <DMA_Memory_To_Memory_Transfer>

	return ret_value;
 800201e:	bf00      	nop
}
 8002020:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8002024:	46bd      	mov	sp, r7
 8002026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002028:	20000084 	.word	0x20000084
 800202c:	200000cc 	.word	0x200000cc
 8002030:	40026400 	.word	0x40026400
 8002034:	40026488 	.word	0x40026488
 8002038:	200000f8 	.word	0x200000f8
 800203c:	40026440 	.word	0x40026440

08002040 <W25Qx_Chip_Erase>:
 * ################################################# Chip Erase ############################################
 * #########################################################################################################
 */

int W25Qx_Chip_Erase(void)
{
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	b091      	sub	sp, #68	; 0x44
 8002044:	af10      	add	r7, sp, #64	; 0x40
	Write_Enable();
 8002046:	f7fe ff45 	bl	8000ed4 <Write_Enable>
	SPI_CSS_Low(W25QX);
 800204a:	4e22      	ldr	r6, [pc, #136]	; (80020d4 <W25Qx_Chip_Erase+0x94>)
 800204c:	466d      	mov	r5, sp
 800204e:	f106 0410 	add.w	r4, r6, #16
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002062:	e885 0003 	stmia.w	r5, {r0, r1}
 8002066:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800206a:	f000 faf2 	bl	8002652 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x60);
 800206e:	4e19      	ldr	r6, [pc, #100]	; (80020d4 <W25Qx_Chip_Erase+0x94>)
 8002070:	2360      	movs	r3, #96	; 0x60
 8002072:	930e      	str	r3, [sp, #56]	; 0x38
 8002074:	466d      	mov	r5, sp
 8002076:	f106 0410 	add.w	r4, r6, #16
 800207a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208a:	e885 0003 	stmia.w	r5, {r0, r1}
 800208e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002092:	f000 fb06 	bl	80026a2 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8002096:	4e0f      	ldr	r6, [pc, #60]	; (80020d4 <W25Qx_Chip_Erase+0x94>)
 8002098:	466d      	mov	r5, sp
 800209a:	f106 0410 	add.w	r4, r6, #16
 800209e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020b6:	f000 fae0 	bl	800267a <SPI_CSS_High>
	do{
		Read_Status_Register();
 80020ba:	f7fe fe1b 	bl	8000cf4 <Read_Status_Register>
	}while(SR.BUSY == 1);
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <W25Qx_Chip_Erase+0x98>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d0f9      	beq.n	80020ba <W25Qx_Chip_Erase+0x7a>
	Write_Disable();
 80020c6:	f7fe ff55 	bl	8000f74 <Write_Disable>
	return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3704      	adds	r7, #4
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d4:	20000084 	.word	0x20000084
 80020d8:	20000124 	.word	0x20000124

080020dc <GPIO_Pin_Setup>:

#include "GPIO.h"


int GPIO_Pin_Setup(GPIO_TypeDef *PORT, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	70fb      	strb	r3, [r7, #3]
 80020ee:	460b      	mov	r3, r1
 80020f0:	70bb      	strb	r3, [r7, #2]
 80020f2:	4613      	mov	r3, r2
 80020f4:	707b      	strb	r3, [r7, #1]

	if(PORT == GPIOA)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a61      	ldr	r2, [pc, #388]	; (8002280 <GPIO_Pin_Setup+0x1a4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d106      	bne.n	800210c <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 80020fe:	4b61      	ldr	r3, [pc, #388]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a60      	ldr	r2, [pc, #384]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	e039      	b.n	8002180 <GPIO_Pin_Setup+0xa4>
	} else 	if(PORT == GPIOB)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a5e      	ldr	r2, [pc, #376]	; (8002288 <GPIO_Pin_Setup+0x1ac>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d106      	bne.n	8002122 <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8002114:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a5a      	ldr	r2, [pc, #360]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	e02e      	b.n	8002180 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOC)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a59      	ldr	r2, [pc, #356]	; (800228c <GPIO_Pin_Setup+0x1b0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d106      	bne.n	8002138 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 800212a:	4b56      	ldr	r3, [pc, #344]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a55      	ldr	r2, [pc, #340]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	e023      	b.n	8002180 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOD)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a55      	ldr	r2, [pc, #340]	; (8002290 <GPIO_Pin_Setup+0x1b4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d106      	bne.n	800214e <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a4f      	ldr	r2, [pc, #316]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	e018      	b.n	8002180 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a50      	ldr	r2, [pc, #320]	; (8002294 <GPIO_Pin_Setup+0x1b8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d106      	bne.n	8002164 <GPIO_Pin_Setup+0x88>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8002156:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	e00d      	b.n	8002180 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOH)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <GPIO_Pin_Setup+0x1bc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d106      	bne.n	800217a <GPIO_Pin_Setup+0x9e>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOHEN;
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a44      	ldr	r2, [pc, #272]	; (8002284 <GPIO_Pin_Setup+0x1a8>)
 8002172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	e002      	b.n	8002180 <GPIO_Pin_Setup+0xa4>
	}else
	{
		return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e078      	b.n	8002272 <GPIO_Pin_Setup+0x196>
//	PORT -> OTYPER  &= ~((0xFF) << (1 * pin));
//	PORT -> OSPEEDR &= ~((0xFF) << (2 * pin));
//	PORT -> PUPDR   &= ~((0xFF) << (2 * pin));


	PORT -> MODER	&= ~(0x3 << (2 * pin));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	0052      	lsls	r2, r2, #1
 8002188:	2103      	movs	r1, #3
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	43d2      	mvns	r2, r2
 8002190:	401a      	ands	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	601a      	str	r2, [r3, #0]
	PORT -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	78ba      	ldrb	r2, [r7, #2]
 800219c:	0992      	lsrs	r2, r2, #6
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	0052      	lsls	r2, r2, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]

	PORT -> OTYPER	&= ~(0x1 << (1 * pin));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f202 	lsl.w	r2, r1, r2
 80021bc:	43d2      	mvns	r2, r2
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]
	PORT -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	78ba      	ldrb	r2, [r7, #2]
 80021ca:	0912      	lsrs	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f002 0103 	and.w	r1, r2, #3
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]

	PORT -> OSPEEDR	&= ~(0x3 << (2 * pin));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	0052      	lsls	r2, r2, #1
 80021e6:	2103      	movs	r1, #3
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	43d2      	mvns	r2, r2
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
	PORT -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	78ba      	ldrb	r2, [r7, #2]
 80021fa:	0892      	lsrs	r2, r2, #2
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 0103 	and.w	r1, r2, #3
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	0052      	lsls	r2, r2, #1
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]

	PORT -> PUPDR	&= ~(0x03 << (2 * pin));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	0052      	lsls	r2, r2, #1
 8002218:	2103      	movs	r1, #3
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	43d2      	mvns	r2, r2
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60da      	str	r2, [r3, #12]
	PORT -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	78ba      	ldrb	r2, [r7, #2]
 800222c:	f002 0103 	and.w	r1, r2, #3
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	0052      	lsls	r2, r2, #1
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60da      	str	r2, [r3, #12]

	if(pin < 8)PORT -> AFR[0] |= ( alternate_function << (4 * (pin)));
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b07      	cmp	r3, #7
 8002242:	d80a      	bhi.n	800225a <GPIO_Pin_Setup+0x17e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	7879      	ldrb	r1, [r7, #1]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	621a      	str	r2, [r3, #32]
 8002258:	e00a      	b.n	8002270 <GPIO_Pin_Setup+0x194>
	else	   PORT -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	7879      	ldrb	r1, [r7, #1]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	3a08      	subs	r2, #8
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	fa01 f202 	lsl.w	r2, r1, r2
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

	if (alternate_function == NONE) {}

	return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40020000 	.word	0x40020000
 8002284:	40023800 	.word	0x40023800
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021c00 	.word	0x40021c00

0800229c <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 80022a6:	2201      	movs	r2, #1
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	615a      	str	r2, [r3, #20]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2101      	movs	r1, #1
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	43d2      	mvns	r2, r2
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	615a      	str	r2, [r3, #20]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <SPI_Init>:
	}
	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
}

void SPI_Init(SPI_Config SPI)
{
 80022ec:	b084      	sub	sp, #16
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	f107 0c08 	add.w	ip, r7, #8
 80022f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}



	if (SPI.SPI == SPI1)   //CK -> PA5 	//MISO -> PA6 	//MOSI -> PA7
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4aa2      	ldr	r2, [pc, #648]	; (8002588 <SPI_Init+0x29c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d130      	bne.n	8002364 <SPI_Init+0x78>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002302:	4ba2      	ldr	r3, [pc, #648]	; (800258c <SPI_Init+0x2a0>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4aa1      	ldr	r2, [pc, #644]	; (800258c <SPI_Init+0x2a0>)
 8002308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44

		if(SPI.pin_remap == 0)
 800230e:	7b3b      	ldrb	r3, [r7, #12]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <SPI_Init+0x54>
		{
			GPIO_Pin_Setup(GPIOA, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 800231a:	2305      	movs	r3, #5
 800231c:	228c      	movs	r2, #140	; 0x8c
 800231e:	2105      	movs	r1, #5
 8002320:	489b      	ldr	r0, [pc, #620]	; (8002590 <SPI_Init+0x2a4>)
 8002322:	f7ff fedb 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOA, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 8002326:	2305      	movs	r3, #5
 8002328:	228c      	movs	r2, #140	; 0x8c
 800232a:	2106      	movs	r1, #6
 800232c:	4898      	ldr	r0, [pc, #608]	; (8002590 <SPI_Init+0x2a4>)
 800232e:	f7ff fed5 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOA, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 8002332:	2305      	movs	r3, #5
 8002334:	228c      	movs	r2, #140	; 0x8c
 8002336:	2107      	movs	r1, #7
 8002338:	4895      	ldr	r0, [pc, #596]	; (8002590 <SPI_Init+0x2a4>)
 800233a:	f7ff fecf 	bl	80020dc <GPIO_Pin_Setup>
 800233e:	e011      	b.n	8002364 <SPI_Init+0x78>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 8002340:	2305      	movs	r3, #5
 8002342:	228c      	movs	r2, #140	; 0x8c
 8002344:	2103      	movs	r1, #3
 8002346:	4893      	ldr	r0, [pc, #588]	; (8002594 <SPI_Init+0x2a8>)
 8002348:	f7ff fec8 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 800234c:	2305      	movs	r3, #5
 800234e:	228c      	movs	r2, #140	; 0x8c
 8002350:	2104      	movs	r1, #4
 8002352:	4890      	ldr	r0, [pc, #576]	; (8002594 <SPI_Init+0x2a8>)
 8002354:	f7ff fec2 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 8002358:	2305      	movs	r3, #5
 800235a:	228c      	movs	r2, #140	; 0x8c
 800235c:	2105      	movs	r1, #5
 800235e:	488d      	ldr	r0, [pc, #564]	; (8002594 <SPI_Init+0x2a8>)
 8002360:	f7ff febc 	bl	80020dc <GPIO_Pin_Setup>
		}
	}
	if(SPI.SPI == SPI2)	//CK -> PB10 	//MISO -> PB14 	//MOSI -> PB15
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4a8c      	ldr	r2, [pc, #560]	; (8002598 <SPI_Init+0x2ac>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d130      	bne.n	80023ce <SPI_Init+0xe2>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 800236c:	4b87      	ldr	r3, [pc, #540]	; (800258c <SPI_Init+0x2a0>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a86      	ldr	r2, [pc, #536]	; (800258c <SPI_Init+0x2a0>)
 8002372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40

		if(SPI.pin_remap == 0)
 8002378:	7b3b      	ldrb	r3, [r7, #12]
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d012      	beq.n	80023aa <SPI_Init+0xbe>
		{
	        GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8002384:	2305      	movs	r3, #5
 8002386:	228c      	movs	r2, #140	; 0x8c
 8002388:	210a      	movs	r1, #10
 800238a:	4882      	ldr	r0, [pc, #520]	; (8002594 <SPI_Init+0x2a8>)
 800238c:	f7ff fea6 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8002390:	2305      	movs	r3, #5
 8002392:	228c      	movs	r2, #140	; 0x8c
 8002394:	2102      	movs	r1, #2
 8002396:	4881      	ldr	r0, [pc, #516]	; (800259c <SPI_Init+0x2b0>)
 8002398:	f7ff fea0 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 800239c:	2305      	movs	r3, #5
 800239e:	228c      	movs	r2, #140	; 0x8c
 80023a0:	2103      	movs	r1, #3
 80023a2:	487e      	ldr	r0, [pc, #504]	; (800259c <SPI_Init+0x2b0>)
 80023a4:	f7ff fe9a 	bl	80020dc <GPIO_Pin_Setup>
 80023a8:	e011      	b.n	80023ce <SPI_Init+0xe2>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 13, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 80023aa:	2305      	movs	r3, #5
 80023ac:	228c      	movs	r2, #140	; 0x8c
 80023ae:	210d      	movs	r1, #13
 80023b0:	4878      	ldr	r0, [pc, #480]	; (8002594 <SPI_Init+0x2a8>)
 80023b2:	f7ff fe93 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 14, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 80023b6:	2305      	movs	r3, #5
 80023b8:	228c      	movs	r2, #140	; 0x8c
 80023ba:	210e      	movs	r1, #14
 80023bc:	4875      	ldr	r0, [pc, #468]	; (8002594 <SPI_Init+0x2a8>)
 80023be:	f7ff fe8d 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 15, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 80023c2:	2305      	movs	r3, #5
 80023c4:	228c      	movs	r2, #140	; 0x8c
 80023c6:	210f      	movs	r1, #15
 80023c8:	4872      	ldr	r0, [pc, #456]	; (8002594 <SPI_Init+0x2a8>)
 80023ca:	f7ff fe87 	bl	80020dc <GPIO_Pin_Setup>
		}

	}
	if(SPI.SPI == SPI3)	//CK -> PB12 	//MISO -> PB4 	//MOSI -> PB5
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4a73      	ldr	r2, [pc, #460]	; (80025a0 <SPI_Init+0x2b4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d130      	bne.n	8002438 <SPI_Init+0x14c>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <SPI_Init+0x2a0>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a6c      	ldr	r2, [pc, #432]	; (800258c <SPI_Init+0x2a0>)
 80023dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40

		if(SPI.pin_remap == 0)
 80023e2:	7b3b      	ldrb	r3, [r7, #12]
 80023e4:	f083 0301 	eor.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <SPI_Init+0x128>
		{
	        GPIO_Pin_Setup(GPIOC, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80023ee:	2306      	movs	r3, #6
 80023f0:	228c      	movs	r2, #140	; 0x8c
 80023f2:	210a      	movs	r1, #10
 80023f4:	4869      	ldr	r0, [pc, #420]	; (800259c <SPI_Init+0x2b0>)
 80023f6:	f7ff fe71 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80023fa:	2306      	movs	r3, #6
 80023fc:	228c      	movs	r2, #140	; 0x8c
 80023fe:	210b      	movs	r1, #11
 8002400:	4866      	ldr	r0, [pc, #408]	; (800259c <SPI_Init+0x2b0>)
 8002402:	f7ff fe6b 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8002406:	2306      	movs	r3, #6
 8002408:	228c      	movs	r2, #140	; 0x8c
 800240a:	210c      	movs	r1, #12
 800240c:	4863      	ldr	r0, [pc, #396]	; (800259c <SPI_Init+0x2b0>)
 800240e:	f7ff fe65 	bl	80020dc <GPIO_Pin_Setup>
 8002412:	e011      	b.n	8002438 <SPI_Init+0x14c>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8002414:	2306      	movs	r3, #6
 8002416:	228c      	movs	r2, #140	; 0x8c
 8002418:	2103      	movs	r1, #3
 800241a:	485e      	ldr	r0, [pc, #376]	; (8002594 <SPI_Init+0x2a8>)
 800241c:	f7ff fe5e 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8002420:	2306      	movs	r3, #6
 8002422:	228c      	movs	r2, #140	; 0x8c
 8002424:	2104      	movs	r1, #4
 8002426:	485b      	ldr	r0, [pc, #364]	; (8002594 <SPI_Init+0x2a8>)
 8002428:	f7ff fe58 	bl	80020dc <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 800242c:	2306      	movs	r3, #6
 800242e:	228c      	movs	r2, #140	; 0x8c
 8002430:	2105      	movs	r1, #5
 8002432:	4858      	ldr	r0, [pc, #352]	; (8002594 <SPI_Init+0x2a8>)
 8002434:	f7ff fe52 	bl	80020dc <GPIO_Pin_Setup>





	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002442:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.phase << 0;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	7d3b      	ldrb	r3, [r7, #20]
 800244a:	4619      	mov	r1, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.polarity << 1;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	7d7b      	ldrb	r3, [r7, #21]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4619      	mov	r1, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.mode  << 2;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	7bbb      	ldrb	r3, [r7, #14]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4619      	mov	r1, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.frequency << 3;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4619      	mov	r1, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.Frame << 11;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	7ebb      	ldrb	r3, [r7, #26]
 8002488:	02db      	lsls	r3, r3, #11
 800248a:	4619      	mov	r1, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.CRC_Enable << 13;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	035b      	lsls	r3, r3, #13
 800249a:	4619      	mov	r1, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.LSB_MSB << 7;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	7dbb      	ldrb	r3, [r7, #22]
 80024a8:	01db      	lsls	r3, r3, #7
 80024aa:	4619      	mov	r1, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR2 &= ~(SPI_CR2_FRF);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f022 0210 	bic.w	r2, r2, #16
 80024bc:	605a      	str	r2, [r3, #4]

	SPI.SPI -> CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024c8:	601a      	str	r2, [r3, #0]
//	SPI.SPI -> CR2 |= SPI_CR2_SSOE;


	if(SPI.mode == SPI_Master)
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d130      	bne.n	8002532 <SPI_Init+0x246>
	{
		SPI.SPI -> CR1 |= SPI_CR1_MSTR ;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f042 0204 	orr.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
		switch (SPI.type)
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d01a      	beq.n	8002518 <SPI_Init+0x22c>
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	dc27      	bgt.n	8002536 <SPI_Init+0x24a>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <SPI_Init+0x204>
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d007      	beq.n	80024fe <SPI_Init+0x212>
			case SPI_Half_Duplex_Master_RX:
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
				break;
			default:
				break;
 80024ee:	e022      	b.n	8002536 <SPI_Init+0x24a>
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fa:	601a      	str	r2, [r3, #0]
				break;
 80024fc:	e01c      	b.n	8002538 <SPI_Init+0x24c>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002508:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002514:	601a      	str	r2, [r3, #0]
				break;
 8002516:	e00f      	b.n	8002538 <SPI_Init+0x24c>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002522:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800252e:	601a      	str	r2, [r3, #0]
				break;
 8002530:	e002      	b.n	8002538 <SPI_Init+0x24c>
		}

	}
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <SPI_Init+0x24c>
				break;
 8002536:	bf00      	nop

	if(SPI.mode == SPI_Slave)
 8002538:	7bbb      	ldrb	r3, [r7, #14]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d13f      	bne.n	80025be <SPI_Init+0x2d2>
	{
	SPI.SPI -> CR1 &= ~SPI_CR1_MSTR;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f022 0204 	bic.w	r2, r2, #4
 8002548:	601a      	str	r2, [r3, #0]
	switch (SPI.type)
 800254a:	7b7b      	ldrb	r3, [r7, #13]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d029      	beq.n	80025a4 <SPI_Init+0x2b8>
 8002550:	2b05      	cmp	r3, #5
 8002552:	dc36      	bgt.n	80025c2 <SPI_Init+0x2d6>
 8002554:	2b03      	cmp	r3, #3
 8002556:	d002      	beq.n	800255e <SPI_Init+0x272>
 8002558:	2b04      	cmp	r3, #4
 800255a:	d007      	beq.n	800256c <SPI_Init+0x280>
		case SPI_Half_Duplex_Slave_RX:
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
			break;
		default:
			break;
 800255c:	e031      	b.n	80025c2 <SPI_Init+0x2d6>
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002568:	601a      	str	r2, [r3, #0]
			break;
 800256a:	e02b      	b.n	80025c4 <SPI_Init+0x2d8>
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002576:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002582:	601a      	str	r2, [r3, #0]
			break;
 8002584:	e01e      	b.n	80025c4 <SPI_Init+0x2d8>
 8002586:	bf00      	nop
 8002588:	40013000 	.word	0x40013000
 800258c:	40023800 	.word	0x40023800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40003800 	.word	0x40003800
 800259c:	40020800 	.word	0x40020800
 80025a0:	40003c00 	.word	0x40003c00
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025ba:	601a      	str	r2, [r3, #0]
			break;
 80025bc:	e002      	b.n	80025c4 <SPI_Init+0x2d8>
	 }
	}
 80025be:	bf00      	nop
 80025c0:	e000      	b.n	80025c4 <SPI_Init+0x2d8>
			break;
 80025c2:	bf00      	nop


	GPIO_Pin_Setup(SPI.nCSS_Port, SPI.nCSS_pin, GENERAL_PURPOSE_OUTPUT_PUSHPULL_PULLUP, NONE);
 80025c4:	69f8      	ldr	r0, [r7, #28]
 80025c6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80025ca:	2300      	movs	r3, #0
 80025cc:	224d      	movs	r2, #77	; 0x4d
 80025ce:	f7ff fd85 	bl	80020dc <GPIO_Pin_Setup>

	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fe5e 	bl	800229c <GPIO_Pin_High>

	SPI.SPI -> CR1 |= SPI_CR1_SPE;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ea:	601a      	str	r2, [r3, #0]

}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025f4:	b004      	add	sp, #16
 80025f6:	4770      	bx	lr

080025f8 <SPI_Enable_DMA>:

void SPI_Enable_DMA(SPI_Config SPI)
{
 80025f8:	b084      	sub	sp, #16
 80025fa:	b490      	push	{r4, r7}
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	f107 0408 	add.w	r4, r7, #8
 8002602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SPI.SPI -> CR2 |= (SPI.DMA_TX << SPI_CR2_TXDMAEN_Pos) | (SPI.DMA_RX << SPI_CR2_RXDMAEN_Pos);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	7e3b      	ldrb	r3, [r7, #24]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	7e79      	ldrb	r1, [r7, #25]
 8002610:	430b      	orrs	r3, r1
 8002612:	4619      	mov	r1, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	bc90      	pop	{r4, r7}
 8002620:	b004      	add	sp, #16
 8002622:	4770      	bx	lr

08002624 <SPI_Disable_DMA>:
void SPI_Disable_DMA(SPI_Config SPI)
{
 8002624:	b084      	sub	sp, #16
 8002626:	b490      	push	{r4, r7}
 8002628:	af00      	add	r7, sp, #0
 800262a:	f107 0408 	add.w	r4, r7, #8
 800262e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SPI.SPI -> CR2 &= ~((SPI.DMA_TX << SPI_CR2_TXDMAEN_Pos) | (SPI.DMA_RX << SPI_CR2_RXDMAEN_Pos));
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	7e3b      	ldrb	r3, [r7, #24]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	7e79      	ldrb	r1, [r7, #25]
 800263c:	430b      	orrs	r3, r1
 800263e:	43db      	mvns	r3, r3
 8002640:	4619      	mov	r1, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	400a      	ands	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	bc90      	pop	{r4, r7}
 800264e:	b004      	add	sp, #16
 8002650:	4770      	bx	lr

08002652 <SPI_CSS_Low>:


void SPI_CSS_Low(SPI_Config SPI)
{
 8002652:	b084      	sub	sp, #16
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
 8002658:	f107 0c08 	add.w	ip, r7, #8
 800265c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_Low(SPI.nCSS_Port, SPI.nCSS_pin);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fe29 	bl	80022c0 <GPIO_Pin_Low>
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002676:	b004      	add	sp, #16
 8002678:	4770      	bx	lr

0800267a <SPI_CSS_High>:


void SPI_CSS_High(SPI_Config SPI)
{
 800267a:	b084      	sub	sp, #16
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
 8002680:	f107 0c08 	add.w	ip, r7, #8
 8002684:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe03 	bl	800229c <GPIO_Pin_High>
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800269e:	b004      	add	sp, #16
 80026a0:	4770      	bx	lr

080026a2 <SPI_TRX_Data>:


//
int SPI_TRX_Data(SPI_Config SPI, int data)
{
 80026a2:	b084      	sub	sp, #16
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	f107 0c10 	add.w	ip, r7, #16
 80026ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int temp = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
	while (!(SPI.SPI->SR & SPI_SR_TXE));
 80026b6:	bf00      	nop
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f9      	beq.n	80026b8 <SPI_TRX_Data+0x16>
	SPI.SPI -> DR = data;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026c8:	60da      	str	r2, [r3, #12]
	while (!(SPI.SPI->SR & SPI_SR_RXNE));
 80026ca:	bf00      	nop
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f9      	beq.n	80026cc <SPI_TRX_Data+0x2a>
	temp = SPI.SPI -> DR;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	607b      	str	r3, [r7, #4]
	while (!(SPI.SPI->SR & SPI_SR_TXE));
 80026de:	bf00      	nop
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f9      	beq.n	80026e0 <SPI_TRX_Data+0x3e>
	while (SPI.SPI->SR & SPI_SR_BSY);
 80026ec:	bf00      	nop
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <SPI_TRX_Data+0x4c>
	return temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	b004      	add	sp, #16
 8002708:	4770      	bx	lr
	...

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ffc2 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <MCU_Clock_Setup>:
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 80027aa:	2304      	movs	r3, #4
 80027ac:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 80027ae:	23a8      	movs	r3, #168	; 0xa8
 80027b0:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 80027b6:	2307      	movs	r3, #7
 80027b8:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 80027ba:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80027cc:	bf00      	nop
 80027ce:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f9      	beq.n	80027ce <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80027da:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <MCU_Clock_Setup+0x110>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a32      	ldr	r2, [pc, #200]	; (80028b4 <MCU_Clock_Setup+0x110>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <MCU_Clock_Setup+0x114>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <MCU_Clock_Setup+0x114>)
 80027f8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027fc:	f043 0305 	orr.w	r3, r3, #5
 8002800:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	793a      	ldrb	r2, [r7, #4]
 8002808:	0611      	lsls	r1, r2, #24
 800280a:	797a      	ldrb	r2, [r7, #5]
 800280c:	0412      	lsls	r2, r2, #16
 800280e:	4311      	orrs	r1, r2
 8002810:	79ba      	ldrb	r2, [r7, #6]
 8002812:	0192      	lsls	r2, r2, #6
 8002814:	4311      	orrs	r1, r2
 8002816:	79fa      	ldrb	r2, [r7, #7]
 8002818:	430a      	orrs	r2, r1
 800281a:	4611      	mov	r1, r2
 800281c:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 800281e:	430b      	orrs	r3, r1
 8002820:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002828:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800282c:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 800283c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002840:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002858:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800285a:	bf00      	nop
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f9      	beq.n	800285c <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8002874:	bf00      	nop
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d1f9      	bne.n	8002876 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8002882:	f000 f915 	bl	8002ab0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <MCU_Clock_Setup+0x118>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	08db      	lsrs	r3, r3, #3
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <MCU_Clock_Setup+0x11c>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff63 	bl	8002760 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <MCU_Clock_Setup+0x10c>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	40023c00 	.word	0x40023c00
 80028bc:	20000000 	.word	0x20000000
 80028c0:	18618619 	.word	0x18618619

080028c4 <Delay_Config>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <Delay_Config+0x2c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <Delay_Config+0x2c>)
 80028d0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80028d4:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <Delay_Config+0x2c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <Delay_Config+0x2c>)
 80028de:	2205      	movs	r2, #5
 80028e0:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e010 	.word	0xe000e010

080028f4 <Delay_ms>:

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80028fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002902:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002948 <Delay_ms+0x54>
 8002906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <Delay_ms+0x58>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <Delay_ms+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <Delay_ms+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <Delay_ms+0x58>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 800292c:	bf00      	nop
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <Delay_ms+0x58>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	48241000 	.word	0x48241000
 800294c:	e000e010 	.word	0xe000e010

08002950 <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8002964:	e006      	b.n	8002974 <Delay_s+0x24>
	{
		Delay_ms(1);
 8002966:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800296a:	f7ff ffc3 	bl	80028f4 <Delay_ms>
	for (; s>0; s--)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3b01      	subs	r3, #1
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f5      	bne.n	8002966 <Delay_s+0x16>
	}
	return (0UL);
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <main>:


W25Qx_Typedef W25QX16;

int main(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af02      	add	r7, sp, #8
	uint8_t data[] = {11,12,13,14,15,16,17,18,19,20};
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <main+0x80>)
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	ca07      	ldmia	r2, {r0, r1, r2}
 8002992:	c303      	stmia	r3!, {r0, r1}
 8002994:	801a      	strh	r2, [r3, #0]
	uint8_t data1[10];
	int len = 10;
 8002996:	230a      	movs	r3, #10
 8002998:	61fb      	str	r3, [r7, #28]
	W25QX16.SPI_Port = SPI1;
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <main+0x84>)
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <main+0x88>)
 800299e:	601a      	str	r2, [r3, #0]
	W25QX16.pin_remap = true;
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <main+0x84>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	725a      	strb	r2, [r3, #9]
	W25QX16.nCSS_Port = GPIOA;
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <main+0x84>)
 80029a8:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <main+0x8c>)
 80029aa:	605a      	str	r2, [r3, #4]
	W25QX16.nCSS_Pin = 15;
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <main+0x84>)
 80029ae:	220f      	movs	r2, #15
 80029b0:	721a      	strb	r2, [r3, #8]

	MCU_Clock_Setup();
 80029b2:	f7ff fef7 	bl	80027a4 <MCU_Clock_Setup>
	Console_Init(USART1, 460800);
 80029b6:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 80029ba:	4816      	ldr	r0, [pc, #88]	; (8002a14 <main+0x90>)
 80029bc:	f7fd fc70 	bl	80002a0 <Console_Init>
	Delay_Config();
 80029c0:	f7ff ff80 	bl	80028c4 <Delay_Config>

	printConsole(USART1, "Hello \r\n");
 80029c4:	4914      	ldr	r1, [pc, #80]	; (8002a18 <main+0x94>)
 80029c6:	4813      	ldr	r0, [pc, #76]	; (8002a14 <main+0x90>)
 80029c8:	f7fd fdc8 	bl	800055c <printConsole>

	int32_t address = 0x102030;
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <main+0x98>)
 80029ce:	61bb      	str	r3, [r7, #24]

	W25QX_Init(&W25QX16);
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <main+0x84>)
 80029d2:	f7fe fb1f 	bl	8001014 <W25QX_Init>
	W25Qx_Chip_Erase();
 80029d6:	f7ff fb33 	bl	8002040 <W25Qx_Chip_Erase>



	Delay_s(1);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff ffb8 	bl	8002950 <Delay_s>


	W25Qx_Write_Page(&W25QX16, address, &data[0], len);
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	4807      	ldr	r0, [pc, #28]	; (8002a08 <main+0x84>)
 80029ea:	f7ff f887 	bl	8001afc <W25Qx_Write_Page>

	W25Qx_Read_Page(&W25QX16, address, -1, &data1[0], len);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	463a      	mov	r2, r7
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	f04f 32ff 	mov.w	r2, #4294967295
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <main+0x84>)
 80029fe:	f7ff f99b 	bl	8001d38 <W25Qx_Read_Page>



	for(;;)
 8002a02:	e7fe      	b.n	8002a02 <main+0x7e>
 8002a04:	08003558 	.word	0x08003558
 8002a08:	20000170 	.word	0x20000170
 8002a0c:	40013000 	.word	0x40013000
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40011000 	.word	0x40011000
 8002a18:	0800354c 	.word	0x0800354c
 8002a1c:	00102030 	.word	0x00102030

08002a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a50:	f000 f8d8 	bl	8002c04 <__errno>
 8002a54:	4603      	mov	r3, r0
 8002a56:	220c      	movs	r2, #12
 8002a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e009      	b.n	8002a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <_sbrk+0x64>)
 8002a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20020000 	.word	0x20020000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	20000190 	.word	0x20000190
 8002a88:	200001a8 	.word	0x200001a8

08002a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <SystemInit+0x20>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <SystemInit+0x20>)
 8002a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	2302      	movs	r3, #2
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d011      	beq.n	8002afe <SystemCoreClockUpdate+0x4e>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d844      	bhi.n	8002b6a <SystemCoreClockUpdate+0xba>
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <SystemCoreClockUpdate+0x3e>
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d004      	beq.n	8002af6 <SystemCoreClockUpdate+0x46>
 8002aec:	e03d      	b.n	8002b6a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002af0:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <SystemCoreClockUpdate+0xf4>)
 8002af2:	601a      	str	r2, [r3, #0]
      break;
 8002af4:	e03d      	b.n	8002b72 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002af8:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <SystemCoreClockUpdate+0xf8>)
 8002afa:	601a      	str	r2, [r3, #0]
      break;
 8002afc:	e039      	b.n	8002b72 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	0d9b      	lsrs	r3, r3, #22
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b12:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <SystemCoreClockUpdate+0xf8>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	0992      	lsrs	r2, r2, #6
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e00b      	b.n	8002b4c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <SystemCoreClockUpdate+0xf4>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b3e:	6852      	ldr	r2, [r2, #4]
 8002b40:	0992      	lsrs	r2, r2, #6
 8002b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b66:	6013      	str	r3, [r2, #0]
      break;
 8002b68:	e003      	b.n	8002b72 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <SystemCoreClockUpdate+0xf4>)
 8002b6e:	601a      	str	r2, [r3, #0]
      break;
 8002b70:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <SystemCoreClockUpdate+0xfc>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840
 8002bac:	08003564 	.word	0x08003564

08002bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bb4:	f7ff ff6a 	bl	8002a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <LoopForever+0x6>)
  ldr r1, =_edata
 8002bba:	490d      	ldr	r1, [pc, #52]	; (8002bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <LoopForever+0xe>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <LoopForever+0x16>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bde:	f000 f817 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002be2:	f7ff fecf 	bl	8002984 <main>

08002be6 <LoopForever>:

LoopForever:
  b LoopForever
 8002be6:	e7fe      	b.n	8002be6 <LoopForever>
  ldr   r0, =_estack
 8002be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002bf4:	080035b0 	.word	0x080035b0
  ldr r2, =_sbss
 8002bf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002bfc:	200001a4 	.word	0x200001a4

08002c00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC_IRQHandler>
	...

08002c04 <__errno>:
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <__errno+0x8>)
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000004 	.word	0x20000004

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	4d0d      	ldr	r5, [pc, #52]	; (8002c48 <__libc_init_array+0x38>)
 8002c14:	4c0d      	ldr	r4, [pc, #52]	; (8002c4c <__libc_init_array+0x3c>)
 8002c16:	1b64      	subs	r4, r4, r5
 8002c18:	10a4      	asrs	r4, r4, #2
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	4d0b      	ldr	r5, [pc, #44]	; (8002c50 <__libc_init_array+0x40>)
 8002c22:	4c0c      	ldr	r4, [pc, #48]	; (8002c54 <__libc_init_array+0x44>)
 8002c24:	f000 fc86 	bl	8003534 <_init>
 8002c28:	1b64      	subs	r4, r4, r5
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	080035a8 	.word	0x080035a8
 8002c4c:	080035a8 	.word	0x080035a8
 8002c50:	080035a8 	.word	0x080035a8
 8002c54:	080035ac 	.word	0x080035ac

08002c58 <_vsiprintf_r>:
 8002c58:	b500      	push	{lr}
 8002c5a:	b09b      	sub	sp, #108	; 0x6c
 8002c5c:	9100      	str	r1, [sp, #0]
 8002c5e:	9104      	str	r1, [sp, #16]
 8002c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c64:	9105      	str	r1, [sp, #20]
 8002c66:	9102      	str	r1, [sp, #8]
 8002c68:	4905      	ldr	r1, [pc, #20]	; (8002c80 <_vsiprintf_r+0x28>)
 8002c6a:	9103      	str	r1, [sp, #12]
 8002c6c:	4669      	mov	r1, sp
 8002c6e:	f000 f86f 	bl	8002d50 <_svfiprintf_r>
 8002c72:	9b00      	ldr	r3, [sp, #0]
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	b01b      	add	sp, #108	; 0x6c
 8002c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c7e:	bf00      	nop
 8002c80:	ffff0208 	.word	0xffff0208

08002c84 <vsiprintf>:
 8002c84:	4613      	mov	r3, r2
 8002c86:	460a      	mov	r2, r1
 8002c88:	4601      	mov	r1, r0
 8002c8a:	4802      	ldr	r0, [pc, #8]	; (8002c94 <vsiprintf+0x10>)
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	f7ff bfe3 	b.w	8002c58 <_vsiprintf_r>
 8002c92:	bf00      	nop
 8002c94:	20000004 	.word	0x20000004

08002c98 <__ssputs_r>:
 8002c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c9c:	688e      	ldr	r6, [r1, #8]
 8002c9e:	429e      	cmp	r6, r3
 8002ca0:	4682      	mov	sl, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	4690      	mov	r8, r2
 8002ca6:	461f      	mov	r7, r3
 8002ca8:	d838      	bhi.n	8002d1c <__ssputs_r+0x84>
 8002caa:	898a      	ldrh	r2, [r1, #12]
 8002cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cb0:	d032      	beq.n	8002d18 <__ssputs_r+0x80>
 8002cb2:	6825      	ldr	r5, [r4, #0]
 8002cb4:	6909      	ldr	r1, [r1, #16]
 8002cb6:	eba5 0901 	sub.w	r9, r5, r1
 8002cba:	6965      	ldr	r5, [r4, #20]
 8002cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	444b      	add	r3, r9
 8002cc8:	106d      	asrs	r5, r5, #1
 8002cca:	429d      	cmp	r5, r3
 8002ccc:	bf38      	it	cc
 8002cce:	461d      	movcc	r5, r3
 8002cd0:	0553      	lsls	r3, r2, #21
 8002cd2:	d531      	bpl.n	8002d38 <__ssputs_r+0xa0>
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f000 fb63 	bl	80033a0 <_malloc_r>
 8002cda:	4606      	mov	r6, r0
 8002cdc:	b950      	cbnz	r0, 8002cf4 <__ssputs_r+0x5c>
 8002cde:	230c      	movs	r3, #12
 8002ce0:	f8ca 3000 	str.w	r3, [sl]
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cea:	81a3      	strh	r3, [r4, #12]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf4:	6921      	ldr	r1, [r4, #16]
 8002cf6:	464a      	mov	r2, r9
 8002cf8:	f000 fabe 	bl	8003278 <memcpy>
 8002cfc:	89a3      	ldrh	r3, [r4, #12]
 8002cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	81a3      	strh	r3, [r4, #12]
 8002d08:	6126      	str	r6, [r4, #16]
 8002d0a:	6165      	str	r5, [r4, #20]
 8002d0c:	444e      	add	r6, r9
 8002d0e:	eba5 0509 	sub.w	r5, r5, r9
 8002d12:	6026      	str	r6, [r4, #0]
 8002d14:	60a5      	str	r5, [r4, #8]
 8002d16:	463e      	mov	r6, r7
 8002d18:	42be      	cmp	r6, r7
 8002d1a:	d900      	bls.n	8002d1e <__ssputs_r+0x86>
 8002d1c:	463e      	mov	r6, r7
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	4632      	mov	r2, r6
 8002d22:	4641      	mov	r1, r8
 8002d24:	f000 fab6 	bl	8003294 <memmove>
 8002d28:	68a3      	ldr	r3, [r4, #8]
 8002d2a:	1b9b      	subs	r3, r3, r6
 8002d2c:	60a3      	str	r3, [r4, #8]
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	4433      	add	r3, r6
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	2000      	movs	r0, #0
 8002d36:	e7db      	b.n	8002cf0 <__ssputs_r+0x58>
 8002d38:	462a      	mov	r2, r5
 8002d3a:	f000 fba5 	bl	8003488 <_realloc_r>
 8002d3e:	4606      	mov	r6, r0
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d1e1      	bne.n	8002d08 <__ssputs_r+0x70>
 8002d44:	6921      	ldr	r1, [r4, #16]
 8002d46:	4650      	mov	r0, sl
 8002d48:	f000 fabe 	bl	80032c8 <_free_r>
 8002d4c:	e7c7      	b.n	8002cde <__ssputs_r+0x46>
	...

08002d50 <_svfiprintf_r>:
 8002d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d54:	4698      	mov	r8, r3
 8002d56:	898b      	ldrh	r3, [r1, #12]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	b09d      	sub	sp, #116	; 0x74
 8002d5c:	4607      	mov	r7, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	4614      	mov	r4, r2
 8002d62:	d50e      	bpl.n	8002d82 <_svfiprintf_r+0x32>
 8002d64:	690b      	ldr	r3, [r1, #16]
 8002d66:	b963      	cbnz	r3, 8002d82 <_svfiprintf_r+0x32>
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	f000 fb19 	bl	80033a0 <_malloc_r>
 8002d6e:	6028      	str	r0, [r5, #0]
 8002d70:	6128      	str	r0, [r5, #16]
 8002d72:	b920      	cbnz	r0, 8002d7e <_svfiprintf_r+0x2e>
 8002d74:	230c      	movs	r3, #12
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e0d1      	b.n	8002f22 <_svfiprintf_r+0x1d2>
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	616b      	str	r3, [r5, #20]
 8002d82:	2300      	movs	r3, #0
 8002d84:	9309      	str	r3, [sp, #36]	; 0x24
 8002d86:	2320      	movs	r3, #32
 8002d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d90:	2330      	movs	r3, #48	; 0x30
 8002d92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002f3c <_svfiprintf_r+0x1ec>
 8002d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d9a:	f04f 0901 	mov.w	r9, #1
 8002d9e:	4623      	mov	r3, r4
 8002da0:	469a      	mov	sl, r3
 8002da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002da6:	b10a      	cbz	r2, 8002dac <_svfiprintf_r+0x5c>
 8002da8:	2a25      	cmp	r2, #37	; 0x25
 8002daa:	d1f9      	bne.n	8002da0 <_svfiprintf_r+0x50>
 8002dac:	ebba 0b04 	subs.w	fp, sl, r4
 8002db0:	d00b      	beq.n	8002dca <_svfiprintf_r+0x7a>
 8002db2:	465b      	mov	r3, fp
 8002db4:	4622      	mov	r2, r4
 8002db6:	4629      	mov	r1, r5
 8002db8:	4638      	mov	r0, r7
 8002dba:	f7ff ff6d 	bl	8002c98 <__ssputs_r>
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	f000 80aa 	beq.w	8002f18 <_svfiprintf_r+0x1c8>
 8002dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dc6:	445a      	add	r2, fp
 8002dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8002dca:	f89a 3000 	ldrb.w	r3, [sl]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80a2 	beq.w	8002f18 <_svfiprintf_r+0x1c8>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dde:	f10a 0a01 	add.w	sl, sl, #1
 8002de2:	9304      	str	r3, [sp, #16]
 8002de4:	9307      	str	r3, [sp, #28]
 8002de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dea:	931a      	str	r3, [sp, #104]	; 0x68
 8002dec:	4654      	mov	r4, sl
 8002dee:	2205      	movs	r2, #5
 8002df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df4:	4851      	ldr	r0, [pc, #324]	; (8002f3c <_svfiprintf_r+0x1ec>)
 8002df6:	f7fd fa03 	bl	8000200 <memchr>
 8002dfa:	9a04      	ldr	r2, [sp, #16]
 8002dfc:	b9d8      	cbnz	r0, 8002e36 <_svfiprintf_r+0xe6>
 8002dfe:	06d0      	lsls	r0, r2, #27
 8002e00:	bf44      	itt	mi
 8002e02:	2320      	movmi	r3, #32
 8002e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e08:	0711      	lsls	r1, r2, #28
 8002e0a:	bf44      	itt	mi
 8002e0c:	232b      	movmi	r3, #43	; 0x2b
 8002e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e12:	f89a 3000 	ldrb.w	r3, [sl]
 8002e16:	2b2a      	cmp	r3, #42	; 0x2a
 8002e18:	d015      	beq.n	8002e46 <_svfiprintf_r+0xf6>
 8002e1a:	9a07      	ldr	r2, [sp, #28]
 8002e1c:	4654      	mov	r4, sl
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f04f 0c0a 	mov.w	ip, #10
 8002e24:	4621      	mov	r1, r4
 8002e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e2a:	3b30      	subs	r3, #48	; 0x30
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d94e      	bls.n	8002ece <_svfiprintf_r+0x17e>
 8002e30:	b1b0      	cbz	r0, 8002e60 <_svfiprintf_r+0x110>
 8002e32:	9207      	str	r2, [sp, #28]
 8002e34:	e014      	b.n	8002e60 <_svfiprintf_r+0x110>
 8002e36:	eba0 0308 	sub.w	r3, r0, r8
 8002e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	9304      	str	r3, [sp, #16]
 8002e42:	46a2      	mov	sl, r4
 8002e44:	e7d2      	b.n	8002dec <_svfiprintf_r+0x9c>
 8002e46:	9b03      	ldr	r3, [sp, #12]
 8002e48:	1d19      	adds	r1, r3, #4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	9103      	str	r1, [sp, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bfbb      	ittet	lt
 8002e52:	425b      	neglt	r3, r3
 8002e54:	f042 0202 	orrlt.w	r2, r2, #2
 8002e58:	9307      	strge	r3, [sp, #28]
 8002e5a:	9307      	strlt	r3, [sp, #28]
 8002e5c:	bfb8      	it	lt
 8002e5e:	9204      	strlt	r2, [sp, #16]
 8002e60:	7823      	ldrb	r3, [r4, #0]
 8002e62:	2b2e      	cmp	r3, #46	; 0x2e
 8002e64:	d10c      	bne.n	8002e80 <_svfiprintf_r+0x130>
 8002e66:	7863      	ldrb	r3, [r4, #1]
 8002e68:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6a:	d135      	bne.n	8002ed8 <_svfiprintf_r+0x188>
 8002e6c:	9b03      	ldr	r3, [sp, #12]
 8002e6e:	1d1a      	adds	r2, r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	9203      	str	r2, [sp, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bfb8      	it	lt
 8002e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e7c:	3402      	adds	r4, #2
 8002e7e:	9305      	str	r3, [sp, #20]
 8002e80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f4c <_svfiprintf_r+0x1fc>
 8002e84:	7821      	ldrb	r1, [r4, #0]
 8002e86:	2203      	movs	r2, #3
 8002e88:	4650      	mov	r0, sl
 8002e8a:	f7fd f9b9 	bl	8000200 <memchr>
 8002e8e:	b140      	cbz	r0, 8002ea2 <_svfiprintf_r+0x152>
 8002e90:	2340      	movs	r3, #64	; 0x40
 8002e92:	eba0 000a 	sub.w	r0, r0, sl
 8002e96:	fa03 f000 	lsl.w	r0, r3, r0
 8002e9a:	9b04      	ldr	r3, [sp, #16]
 8002e9c:	4303      	orrs	r3, r0
 8002e9e:	3401      	adds	r4, #1
 8002ea0:	9304      	str	r3, [sp, #16]
 8002ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea6:	4826      	ldr	r0, [pc, #152]	; (8002f40 <_svfiprintf_r+0x1f0>)
 8002ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eac:	2206      	movs	r2, #6
 8002eae:	f7fd f9a7 	bl	8000200 <memchr>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d038      	beq.n	8002f28 <_svfiprintf_r+0x1d8>
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <_svfiprintf_r+0x1f4>)
 8002eb8:	bb1b      	cbnz	r3, 8002f02 <_svfiprintf_r+0x1b2>
 8002eba:	9b03      	ldr	r3, [sp, #12]
 8002ebc:	3307      	adds	r3, #7
 8002ebe:	f023 0307 	bic.w	r3, r3, #7
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	9303      	str	r3, [sp, #12]
 8002ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec8:	4433      	add	r3, r6
 8002eca:	9309      	str	r3, [sp, #36]	; 0x24
 8002ecc:	e767      	b.n	8002d9e <_svfiprintf_r+0x4e>
 8002ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	e7a5      	b.n	8002e24 <_svfiprintf_r+0xd4>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	3401      	adds	r4, #1
 8002edc:	9305      	str	r3, [sp, #20]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f04f 0c0a 	mov.w	ip, #10
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eea:	3a30      	subs	r2, #48	; 0x30
 8002eec:	2a09      	cmp	r2, #9
 8002eee:	d903      	bls.n	8002ef8 <_svfiprintf_r+0x1a8>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0c5      	beq.n	8002e80 <_svfiprintf_r+0x130>
 8002ef4:	9105      	str	r1, [sp, #20]
 8002ef6:	e7c3      	b.n	8002e80 <_svfiprintf_r+0x130>
 8002ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002efc:	4604      	mov	r4, r0
 8002efe:	2301      	movs	r3, #1
 8002f00:	e7f0      	b.n	8002ee4 <_svfiprintf_r+0x194>
 8002f02:	ab03      	add	r3, sp, #12
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	462a      	mov	r2, r5
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <_svfiprintf_r+0x1f8>)
 8002f0a:	a904      	add	r1, sp, #16
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	f3af 8000 	nop.w
 8002f12:	1c42      	adds	r2, r0, #1
 8002f14:	4606      	mov	r6, r0
 8002f16:	d1d6      	bne.n	8002ec6 <_svfiprintf_r+0x176>
 8002f18:	89ab      	ldrh	r3, [r5, #12]
 8002f1a:	065b      	lsls	r3, r3, #25
 8002f1c:	f53f af2c 	bmi.w	8002d78 <_svfiprintf_r+0x28>
 8002f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f22:	b01d      	add	sp, #116	; 0x74
 8002f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f28:	ab03      	add	r3, sp, #12
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	462a      	mov	r2, r5
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <_svfiprintf_r+0x1f8>)
 8002f30:	a904      	add	r1, sp, #16
 8002f32:	4638      	mov	r0, r7
 8002f34:	f000 f87a 	bl	800302c <_printf_i>
 8002f38:	e7eb      	b.n	8002f12 <_svfiprintf_r+0x1c2>
 8002f3a:	bf00      	nop
 8002f3c:	08003574 	.word	0x08003574
 8002f40:	0800357e 	.word	0x0800357e
 8002f44:	00000000 	.word	0x00000000
 8002f48:	08002c99 	.word	0x08002c99
 8002f4c:	0800357a 	.word	0x0800357a

08002f50 <_printf_common>:
 8002f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	4616      	mov	r6, r2
 8002f56:	4699      	mov	r9, r3
 8002f58:	688a      	ldr	r2, [r1, #8]
 8002f5a:	690b      	ldr	r3, [r1, #16]
 8002f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bfb8      	it	lt
 8002f64:	4613      	movlt	r3, r2
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	b10a      	cbz	r2, 8002f76 <_printf_common+0x26>
 8002f72:	3301      	adds	r3, #1
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	0699      	lsls	r1, r3, #26
 8002f7a:	bf42      	ittt	mi
 8002f7c:	6833      	ldrmi	r3, [r6, #0]
 8002f7e:	3302      	addmi	r3, #2
 8002f80:	6033      	strmi	r3, [r6, #0]
 8002f82:	6825      	ldr	r5, [r4, #0]
 8002f84:	f015 0506 	ands.w	r5, r5, #6
 8002f88:	d106      	bne.n	8002f98 <_printf_common+0x48>
 8002f8a:	f104 0a19 	add.w	sl, r4, #25
 8002f8e:	68e3      	ldr	r3, [r4, #12]
 8002f90:	6832      	ldr	r2, [r6, #0]
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	42ab      	cmp	r3, r5
 8002f96:	dc26      	bgt.n	8002fe6 <_printf_common+0x96>
 8002f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f9c:	1e13      	subs	r3, r2, #0
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	bf18      	it	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	0692      	lsls	r2, r2, #26
 8002fa6:	d42b      	bmi.n	8003000 <_printf_common+0xb0>
 8002fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fac:	4649      	mov	r1, r9
 8002fae:	4638      	mov	r0, r7
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d01e      	beq.n	8002ff4 <_printf_common+0xa4>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	68e5      	ldr	r5, [r4, #12]
 8002fba:	6832      	ldr	r2, [r6, #0]
 8002fbc:	f003 0306 	and.w	r3, r3, #6
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	bf08      	it	eq
 8002fc4:	1aad      	subeq	r5, r5, r2
 8002fc6:	68a3      	ldr	r3, [r4, #8]
 8002fc8:	6922      	ldr	r2, [r4, #16]
 8002fca:	bf0c      	ite	eq
 8002fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd0:	2500      	movne	r5, #0
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	bfc4      	itt	gt
 8002fd6:	1a9b      	subgt	r3, r3, r2
 8002fd8:	18ed      	addgt	r5, r5, r3
 8002fda:	2600      	movs	r6, #0
 8002fdc:	341a      	adds	r4, #26
 8002fde:	42b5      	cmp	r5, r6
 8002fe0:	d11a      	bne.n	8003018 <_printf_common+0xc8>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e008      	b.n	8002ff8 <_printf_common+0xa8>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4652      	mov	r2, sl
 8002fea:	4649      	mov	r1, r9
 8002fec:	4638      	mov	r0, r7
 8002fee:	47c0      	blx	r8
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d103      	bne.n	8002ffc <_printf_common+0xac>
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7c6      	b.n	8002f8e <_printf_common+0x3e>
 8003000:	18e1      	adds	r1, r4, r3
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	2030      	movs	r0, #48	; 0x30
 8003006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800300a:	4422      	add	r2, r4
 800300c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003014:	3302      	adds	r3, #2
 8003016:	e7c7      	b.n	8002fa8 <_printf_common+0x58>
 8003018:	2301      	movs	r3, #1
 800301a:	4622      	mov	r2, r4
 800301c:	4649      	mov	r1, r9
 800301e:	4638      	mov	r0, r7
 8003020:	47c0      	blx	r8
 8003022:	3001      	adds	r0, #1
 8003024:	d0e6      	beq.n	8002ff4 <_printf_common+0xa4>
 8003026:	3601      	adds	r6, #1
 8003028:	e7d9      	b.n	8002fde <_printf_common+0x8e>
	...

0800302c <_printf_i>:
 800302c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003030:	7e0f      	ldrb	r7, [r1, #24]
 8003032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003034:	2f78      	cmp	r7, #120	; 0x78
 8003036:	4691      	mov	r9, r2
 8003038:	4680      	mov	r8, r0
 800303a:	460c      	mov	r4, r1
 800303c:	469a      	mov	sl, r3
 800303e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003042:	d807      	bhi.n	8003054 <_printf_i+0x28>
 8003044:	2f62      	cmp	r7, #98	; 0x62
 8003046:	d80a      	bhi.n	800305e <_printf_i+0x32>
 8003048:	2f00      	cmp	r7, #0
 800304a:	f000 80d8 	beq.w	80031fe <_printf_i+0x1d2>
 800304e:	2f58      	cmp	r7, #88	; 0x58
 8003050:	f000 80a3 	beq.w	800319a <_printf_i+0x16e>
 8003054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800305c:	e03a      	b.n	80030d4 <_printf_i+0xa8>
 800305e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003062:	2b15      	cmp	r3, #21
 8003064:	d8f6      	bhi.n	8003054 <_printf_i+0x28>
 8003066:	a101      	add	r1, pc, #4	; (adr r1, 800306c <_printf_i+0x40>)
 8003068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800306c:	080030c5 	.word	0x080030c5
 8003070:	080030d9 	.word	0x080030d9
 8003074:	08003055 	.word	0x08003055
 8003078:	08003055 	.word	0x08003055
 800307c:	08003055 	.word	0x08003055
 8003080:	08003055 	.word	0x08003055
 8003084:	080030d9 	.word	0x080030d9
 8003088:	08003055 	.word	0x08003055
 800308c:	08003055 	.word	0x08003055
 8003090:	08003055 	.word	0x08003055
 8003094:	08003055 	.word	0x08003055
 8003098:	080031e5 	.word	0x080031e5
 800309c:	08003109 	.word	0x08003109
 80030a0:	080031c7 	.word	0x080031c7
 80030a4:	08003055 	.word	0x08003055
 80030a8:	08003055 	.word	0x08003055
 80030ac:	08003207 	.word	0x08003207
 80030b0:	08003055 	.word	0x08003055
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003055 	.word	0x08003055
 80030bc:	08003055 	.word	0x08003055
 80030c0:	080031cf 	.word	0x080031cf
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	1d1a      	adds	r2, r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	602a      	str	r2, [r5, #0]
 80030cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0a3      	b.n	8003220 <_printf_i+0x1f4>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	6829      	ldr	r1, [r5, #0]
 80030dc:	0606      	lsls	r6, r0, #24
 80030de:	f101 0304 	add.w	r3, r1, #4
 80030e2:	d50a      	bpl.n	80030fa <_printf_i+0xce>
 80030e4:	680e      	ldr	r6, [r1, #0]
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	2e00      	cmp	r6, #0
 80030ea:	da03      	bge.n	80030f4 <_printf_i+0xc8>
 80030ec:	232d      	movs	r3, #45	; 0x2d
 80030ee:	4276      	negs	r6, r6
 80030f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f4:	485e      	ldr	r0, [pc, #376]	; (8003270 <_printf_i+0x244>)
 80030f6:	230a      	movs	r3, #10
 80030f8:	e019      	b.n	800312e <_printf_i+0x102>
 80030fa:	680e      	ldr	r6, [r1, #0]
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003102:	bf18      	it	ne
 8003104:	b236      	sxthne	r6, r6
 8003106:	e7ef      	b.n	80030e8 <_printf_i+0xbc>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	1d19      	adds	r1, r3, #4
 800310e:	6029      	str	r1, [r5, #0]
 8003110:	0601      	lsls	r1, r0, #24
 8003112:	d501      	bpl.n	8003118 <_printf_i+0xec>
 8003114:	681e      	ldr	r6, [r3, #0]
 8003116:	e002      	b.n	800311e <_printf_i+0xf2>
 8003118:	0646      	lsls	r6, r0, #25
 800311a:	d5fb      	bpl.n	8003114 <_printf_i+0xe8>
 800311c:	881e      	ldrh	r6, [r3, #0]
 800311e:	4854      	ldr	r0, [pc, #336]	; (8003270 <_printf_i+0x244>)
 8003120:	2f6f      	cmp	r7, #111	; 0x6f
 8003122:	bf0c      	ite	eq
 8003124:	2308      	moveq	r3, #8
 8003126:	230a      	movne	r3, #10
 8003128:	2100      	movs	r1, #0
 800312a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800312e:	6865      	ldr	r5, [r4, #4]
 8003130:	60a5      	str	r5, [r4, #8]
 8003132:	2d00      	cmp	r5, #0
 8003134:	bfa2      	ittt	ge
 8003136:	6821      	ldrge	r1, [r4, #0]
 8003138:	f021 0104 	bicge.w	r1, r1, #4
 800313c:	6021      	strge	r1, [r4, #0]
 800313e:	b90e      	cbnz	r6, 8003144 <_printf_i+0x118>
 8003140:	2d00      	cmp	r5, #0
 8003142:	d04d      	beq.n	80031e0 <_printf_i+0x1b4>
 8003144:	4615      	mov	r5, r2
 8003146:	fbb6 f1f3 	udiv	r1, r6, r3
 800314a:	fb03 6711 	mls	r7, r3, r1, r6
 800314e:	5dc7      	ldrb	r7, [r0, r7]
 8003150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003154:	4637      	mov	r7, r6
 8003156:	42bb      	cmp	r3, r7
 8003158:	460e      	mov	r6, r1
 800315a:	d9f4      	bls.n	8003146 <_printf_i+0x11a>
 800315c:	2b08      	cmp	r3, #8
 800315e:	d10b      	bne.n	8003178 <_printf_i+0x14c>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	07de      	lsls	r6, r3, #31
 8003164:	d508      	bpl.n	8003178 <_printf_i+0x14c>
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	6861      	ldr	r1, [r4, #4]
 800316a:	4299      	cmp	r1, r3
 800316c:	bfde      	ittt	le
 800316e:	2330      	movle	r3, #48	; 0x30
 8003170:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003174:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003178:	1b52      	subs	r2, r2, r5
 800317a:	6122      	str	r2, [r4, #16]
 800317c:	f8cd a000 	str.w	sl, [sp]
 8003180:	464b      	mov	r3, r9
 8003182:	aa03      	add	r2, sp, #12
 8003184:	4621      	mov	r1, r4
 8003186:	4640      	mov	r0, r8
 8003188:	f7ff fee2 	bl	8002f50 <_printf_common>
 800318c:	3001      	adds	r0, #1
 800318e:	d14c      	bne.n	800322a <_printf_i+0x1fe>
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	b004      	add	sp, #16
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	4835      	ldr	r0, [pc, #212]	; (8003270 <_printf_i+0x244>)
 800319c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031a0:	6829      	ldr	r1, [r5, #0]
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80031a8:	6029      	str	r1, [r5, #0]
 80031aa:	061d      	lsls	r5, r3, #24
 80031ac:	d514      	bpl.n	80031d8 <_printf_i+0x1ac>
 80031ae:	07df      	lsls	r7, r3, #31
 80031b0:	bf44      	itt	mi
 80031b2:	f043 0320 	orrmi.w	r3, r3, #32
 80031b6:	6023      	strmi	r3, [r4, #0]
 80031b8:	b91e      	cbnz	r6, 80031c2 <_printf_i+0x196>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	f023 0320 	bic.w	r3, r3, #32
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	2310      	movs	r3, #16
 80031c4:	e7b0      	b.n	8003128 <_printf_i+0xfc>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	f043 0320 	orr.w	r3, r3, #32
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	2378      	movs	r3, #120	; 0x78
 80031d0:	4828      	ldr	r0, [pc, #160]	; (8003274 <_printf_i+0x248>)
 80031d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031d6:	e7e3      	b.n	80031a0 <_printf_i+0x174>
 80031d8:	0659      	lsls	r1, r3, #25
 80031da:	bf48      	it	mi
 80031dc:	b2b6      	uxthmi	r6, r6
 80031de:	e7e6      	b.n	80031ae <_printf_i+0x182>
 80031e0:	4615      	mov	r5, r2
 80031e2:	e7bb      	b.n	800315c <_printf_i+0x130>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	6826      	ldr	r6, [r4, #0]
 80031e8:	6961      	ldr	r1, [r4, #20]
 80031ea:	1d18      	adds	r0, r3, #4
 80031ec:	6028      	str	r0, [r5, #0]
 80031ee:	0635      	lsls	r5, r6, #24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	d501      	bpl.n	80031f8 <_printf_i+0x1cc>
 80031f4:	6019      	str	r1, [r3, #0]
 80031f6:	e002      	b.n	80031fe <_printf_i+0x1d2>
 80031f8:	0670      	lsls	r0, r6, #25
 80031fa:	d5fb      	bpl.n	80031f4 <_printf_i+0x1c8>
 80031fc:	8019      	strh	r1, [r3, #0]
 80031fe:	2300      	movs	r3, #0
 8003200:	6123      	str	r3, [r4, #16]
 8003202:	4615      	mov	r5, r2
 8003204:	e7ba      	b.n	800317c <_printf_i+0x150>
 8003206:	682b      	ldr	r3, [r5, #0]
 8003208:	1d1a      	adds	r2, r3, #4
 800320a:	602a      	str	r2, [r5, #0]
 800320c:	681d      	ldr	r5, [r3, #0]
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	2100      	movs	r1, #0
 8003212:	4628      	mov	r0, r5
 8003214:	f7fc fff4 	bl	8000200 <memchr>
 8003218:	b108      	cbz	r0, 800321e <_printf_i+0x1f2>
 800321a:	1b40      	subs	r0, r0, r5
 800321c:	6060      	str	r0, [r4, #4]
 800321e:	6863      	ldr	r3, [r4, #4]
 8003220:	6123      	str	r3, [r4, #16]
 8003222:	2300      	movs	r3, #0
 8003224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003228:	e7a8      	b.n	800317c <_printf_i+0x150>
 800322a:	6923      	ldr	r3, [r4, #16]
 800322c:	462a      	mov	r2, r5
 800322e:	4649      	mov	r1, r9
 8003230:	4640      	mov	r0, r8
 8003232:	47d0      	blx	sl
 8003234:	3001      	adds	r0, #1
 8003236:	d0ab      	beq.n	8003190 <_printf_i+0x164>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	079b      	lsls	r3, r3, #30
 800323c:	d413      	bmi.n	8003266 <_printf_i+0x23a>
 800323e:	68e0      	ldr	r0, [r4, #12]
 8003240:	9b03      	ldr	r3, [sp, #12]
 8003242:	4298      	cmp	r0, r3
 8003244:	bfb8      	it	lt
 8003246:	4618      	movlt	r0, r3
 8003248:	e7a4      	b.n	8003194 <_printf_i+0x168>
 800324a:	2301      	movs	r3, #1
 800324c:	4632      	mov	r2, r6
 800324e:	4649      	mov	r1, r9
 8003250:	4640      	mov	r0, r8
 8003252:	47d0      	blx	sl
 8003254:	3001      	adds	r0, #1
 8003256:	d09b      	beq.n	8003190 <_printf_i+0x164>
 8003258:	3501      	adds	r5, #1
 800325a:	68e3      	ldr	r3, [r4, #12]
 800325c:	9903      	ldr	r1, [sp, #12]
 800325e:	1a5b      	subs	r3, r3, r1
 8003260:	42ab      	cmp	r3, r5
 8003262:	dcf2      	bgt.n	800324a <_printf_i+0x21e>
 8003264:	e7eb      	b.n	800323e <_printf_i+0x212>
 8003266:	2500      	movs	r5, #0
 8003268:	f104 0619 	add.w	r6, r4, #25
 800326c:	e7f5      	b.n	800325a <_printf_i+0x22e>
 800326e:	bf00      	nop
 8003270:	08003585 	.word	0x08003585
 8003274:	08003596 	.word	0x08003596

08003278 <memcpy>:
 8003278:	440a      	add	r2, r1
 800327a:	4291      	cmp	r1, r2
 800327c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003280:	d100      	bne.n	8003284 <memcpy+0xc>
 8003282:	4770      	bx	lr
 8003284:	b510      	push	{r4, lr}
 8003286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800328a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800328e:	4291      	cmp	r1, r2
 8003290:	d1f9      	bne.n	8003286 <memcpy+0xe>
 8003292:	bd10      	pop	{r4, pc}

08003294 <memmove>:
 8003294:	4288      	cmp	r0, r1
 8003296:	b510      	push	{r4, lr}
 8003298:	eb01 0402 	add.w	r4, r1, r2
 800329c:	d902      	bls.n	80032a4 <memmove+0x10>
 800329e:	4284      	cmp	r4, r0
 80032a0:	4623      	mov	r3, r4
 80032a2:	d807      	bhi.n	80032b4 <memmove+0x20>
 80032a4:	1e43      	subs	r3, r0, #1
 80032a6:	42a1      	cmp	r1, r4
 80032a8:	d008      	beq.n	80032bc <memmove+0x28>
 80032aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032b2:	e7f8      	b.n	80032a6 <memmove+0x12>
 80032b4:	4402      	add	r2, r0
 80032b6:	4601      	mov	r1, r0
 80032b8:	428a      	cmp	r2, r1
 80032ba:	d100      	bne.n	80032be <memmove+0x2a>
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032c6:	e7f7      	b.n	80032b8 <memmove+0x24>

080032c8 <_free_r>:
 80032c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032ca:	2900      	cmp	r1, #0
 80032cc:	d044      	beq.n	8003358 <_free_r+0x90>
 80032ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032d2:	9001      	str	r0, [sp, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f1a1 0404 	sub.w	r4, r1, #4
 80032da:	bfb8      	it	lt
 80032dc:	18e4      	addlt	r4, r4, r3
 80032de:	f000 f913 	bl	8003508 <__malloc_lock>
 80032e2:	4a1e      	ldr	r2, [pc, #120]	; (800335c <_free_r+0x94>)
 80032e4:	9801      	ldr	r0, [sp, #4]
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	b933      	cbnz	r3, 80032f8 <_free_r+0x30>
 80032ea:	6063      	str	r3, [r4, #4]
 80032ec:	6014      	str	r4, [r2, #0]
 80032ee:	b003      	add	sp, #12
 80032f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032f4:	f000 b90e 	b.w	8003514 <__malloc_unlock>
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	d908      	bls.n	800330e <_free_r+0x46>
 80032fc:	6825      	ldr	r5, [r4, #0]
 80032fe:	1961      	adds	r1, r4, r5
 8003300:	428b      	cmp	r3, r1
 8003302:	bf01      	itttt	eq
 8003304:	6819      	ldreq	r1, [r3, #0]
 8003306:	685b      	ldreq	r3, [r3, #4]
 8003308:	1949      	addeq	r1, r1, r5
 800330a:	6021      	streq	r1, [r4, #0]
 800330c:	e7ed      	b.n	80032ea <_free_r+0x22>
 800330e:	461a      	mov	r2, r3
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b10b      	cbz	r3, 8003318 <_free_r+0x50>
 8003314:	42a3      	cmp	r3, r4
 8003316:	d9fa      	bls.n	800330e <_free_r+0x46>
 8003318:	6811      	ldr	r1, [r2, #0]
 800331a:	1855      	adds	r5, r2, r1
 800331c:	42a5      	cmp	r5, r4
 800331e:	d10b      	bne.n	8003338 <_free_r+0x70>
 8003320:	6824      	ldr	r4, [r4, #0]
 8003322:	4421      	add	r1, r4
 8003324:	1854      	adds	r4, r2, r1
 8003326:	42a3      	cmp	r3, r4
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	d1e0      	bne.n	80032ee <_free_r+0x26>
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	6053      	str	r3, [r2, #4]
 8003332:	4421      	add	r1, r4
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	e7da      	b.n	80032ee <_free_r+0x26>
 8003338:	d902      	bls.n	8003340 <_free_r+0x78>
 800333a:	230c      	movs	r3, #12
 800333c:	6003      	str	r3, [r0, #0]
 800333e:	e7d6      	b.n	80032ee <_free_r+0x26>
 8003340:	6825      	ldr	r5, [r4, #0]
 8003342:	1961      	adds	r1, r4, r5
 8003344:	428b      	cmp	r3, r1
 8003346:	bf04      	itt	eq
 8003348:	6819      	ldreq	r1, [r3, #0]
 800334a:	685b      	ldreq	r3, [r3, #4]
 800334c:	6063      	str	r3, [r4, #4]
 800334e:	bf04      	itt	eq
 8003350:	1949      	addeq	r1, r1, r5
 8003352:	6021      	streq	r1, [r4, #0]
 8003354:	6054      	str	r4, [r2, #4]
 8003356:	e7ca      	b.n	80032ee <_free_r+0x26>
 8003358:	b003      	add	sp, #12
 800335a:	bd30      	pop	{r4, r5, pc}
 800335c:	20000194 	.word	0x20000194

08003360 <sbrk_aligned>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4e0e      	ldr	r6, [pc, #56]	; (800339c <sbrk_aligned+0x3c>)
 8003364:	460c      	mov	r4, r1
 8003366:	6831      	ldr	r1, [r6, #0]
 8003368:	4605      	mov	r5, r0
 800336a:	b911      	cbnz	r1, 8003372 <sbrk_aligned+0x12>
 800336c:	f000 f8bc 	bl	80034e8 <_sbrk_r>
 8003370:	6030      	str	r0, [r6, #0]
 8003372:	4621      	mov	r1, r4
 8003374:	4628      	mov	r0, r5
 8003376:	f000 f8b7 	bl	80034e8 <_sbrk_r>
 800337a:	1c43      	adds	r3, r0, #1
 800337c:	d00a      	beq.n	8003394 <sbrk_aligned+0x34>
 800337e:	1cc4      	adds	r4, r0, #3
 8003380:	f024 0403 	bic.w	r4, r4, #3
 8003384:	42a0      	cmp	r0, r4
 8003386:	d007      	beq.n	8003398 <sbrk_aligned+0x38>
 8003388:	1a21      	subs	r1, r4, r0
 800338a:	4628      	mov	r0, r5
 800338c:	f000 f8ac 	bl	80034e8 <_sbrk_r>
 8003390:	3001      	adds	r0, #1
 8003392:	d101      	bne.n	8003398 <sbrk_aligned+0x38>
 8003394:	f04f 34ff 	mov.w	r4, #4294967295
 8003398:	4620      	mov	r0, r4
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	20000198 	.word	0x20000198

080033a0 <_malloc_r>:
 80033a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a4:	1ccd      	adds	r5, r1, #3
 80033a6:	f025 0503 	bic.w	r5, r5, #3
 80033aa:	3508      	adds	r5, #8
 80033ac:	2d0c      	cmp	r5, #12
 80033ae:	bf38      	it	cc
 80033b0:	250c      	movcc	r5, #12
 80033b2:	2d00      	cmp	r5, #0
 80033b4:	4607      	mov	r7, r0
 80033b6:	db01      	blt.n	80033bc <_malloc_r+0x1c>
 80033b8:	42a9      	cmp	r1, r5
 80033ba:	d905      	bls.n	80033c8 <_malloc_r+0x28>
 80033bc:	230c      	movs	r3, #12
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	2600      	movs	r6, #0
 80033c2:	4630      	mov	r0, r6
 80033c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033c8:	4e2e      	ldr	r6, [pc, #184]	; (8003484 <_malloc_r+0xe4>)
 80033ca:	f000 f89d 	bl	8003508 <__malloc_lock>
 80033ce:	6833      	ldr	r3, [r6, #0]
 80033d0:	461c      	mov	r4, r3
 80033d2:	bb34      	cbnz	r4, 8003422 <_malloc_r+0x82>
 80033d4:	4629      	mov	r1, r5
 80033d6:	4638      	mov	r0, r7
 80033d8:	f7ff ffc2 	bl	8003360 <sbrk_aligned>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	4604      	mov	r4, r0
 80033e0:	d14d      	bne.n	800347e <_malloc_r+0xde>
 80033e2:	6834      	ldr	r4, [r6, #0]
 80033e4:	4626      	mov	r6, r4
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	d140      	bne.n	800346c <_malloc_r+0xcc>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	4631      	mov	r1, r6
 80033ee:	4638      	mov	r0, r7
 80033f0:	eb04 0803 	add.w	r8, r4, r3
 80033f4:	f000 f878 	bl	80034e8 <_sbrk_r>
 80033f8:	4580      	cmp	r8, r0
 80033fa:	d13a      	bne.n	8003472 <_malloc_r+0xd2>
 80033fc:	6821      	ldr	r1, [r4, #0]
 80033fe:	3503      	adds	r5, #3
 8003400:	1a6d      	subs	r5, r5, r1
 8003402:	f025 0503 	bic.w	r5, r5, #3
 8003406:	3508      	adds	r5, #8
 8003408:	2d0c      	cmp	r5, #12
 800340a:	bf38      	it	cc
 800340c:	250c      	movcc	r5, #12
 800340e:	4629      	mov	r1, r5
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ffa5 	bl	8003360 <sbrk_aligned>
 8003416:	3001      	adds	r0, #1
 8003418:	d02b      	beq.n	8003472 <_malloc_r+0xd2>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	442b      	add	r3, r5
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	e00e      	b.n	8003440 <_malloc_r+0xa0>
 8003422:	6822      	ldr	r2, [r4, #0]
 8003424:	1b52      	subs	r2, r2, r5
 8003426:	d41e      	bmi.n	8003466 <_malloc_r+0xc6>
 8003428:	2a0b      	cmp	r2, #11
 800342a:	d916      	bls.n	800345a <_malloc_r+0xba>
 800342c:	1961      	adds	r1, r4, r5
 800342e:	42a3      	cmp	r3, r4
 8003430:	6025      	str	r5, [r4, #0]
 8003432:	bf18      	it	ne
 8003434:	6059      	strne	r1, [r3, #4]
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	bf08      	it	eq
 800343a:	6031      	streq	r1, [r6, #0]
 800343c:	5162      	str	r2, [r4, r5]
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	4638      	mov	r0, r7
 8003442:	f104 060b 	add.w	r6, r4, #11
 8003446:	f000 f865 	bl	8003514 <__malloc_unlock>
 800344a:	f026 0607 	bic.w	r6, r6, #7
 800344e:	1d23      	adds	r3, r4, #4
 8003450:	1af2      	subs	r2, r6, r3
 8003452:	d0b6      	beq.n	80033c2 <_malloc_r+0x22>
 8003454:	1b9b      	subs	r3, r3, r6
 8003456:	50a3      	str	r3, [r4, r2]
 8003458:	e7b3      	b.n	80033c2 <_malloc_r+0x22>
 800345a:	6862      	ldr	r2, [r4, #4]
 800345c:	42a3      	cmp	r3, r4
 800345e:	bf0c      	ite	eq
 8003460:	6032      	streq	r2, [r6, #0]
 8003462:	605a      	strne	r2, [r3, #4]
 8003464:	e7ec      	b.n	8003440 <_malloc_r+0xa0>
 8003466:	4623      	mov	r3, r4
 8003468:	6864      	ldr	r4, [r4, #4]
 800346a:	e7b2      	b.n	80033d2 <_malloc_r+0x32>
 800346c:	4634      	mov	r4, r6
 800346e:	6876      	ldr	r6, [r6, #4]
 8003470:	e7b9      	b.n	80033e6 <_malloc_r+0x46>
 8003472:	230c      	movs	r3, #12
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4638      	mov	r0, r7
 8003478:	f000 f84c 	bl	8003514 <__malloc_unlock>
 800347c:	e7a1      	b.n	80033c2 <_malloc_r+0x22>
 800347e:	6025      	str	r5, [r4, #0]
 8003480:	e7de      	b.n	8003440 <_malloc_r+0xa0>
 8003482:	bf00      	nop
 8003484:	20000194 	.word	0x20000194

08003488 <_realloc_r>:
 8003488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348c:	4680      	mov	r8, r0
 800348e:	4614      	mov	r4, r2
 8003490:	460e      	mov	r6, r1
 8003492:	b921      	cbnz	r1, 800349e <_realloc_r+0x16>
 8003494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003498:	4611      	mov	r1, r2
 800349a:	f7ff bf81 	b.w	80033a0 <_malloc_r>
 800349e:	b92a      	cbnz	r2, 80034ac <_realloc_r+0x24>
 80034a0:	f7ff ff12 	bl	80032c8 <_free_r>
 80034a4:	4625      	mov	r5, r4
 80034a6:	4628      	mov	r0, r5
 80034a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ac:	f000 f838 	bl	8003520 <_malloc_usable_size_r>
 80034b0:	4284      	cmp	r4, r0
 80034b2:	4607      	mov	r7, r0
 80034b4:	d802      	bhi.n	80034bc <_realloc_r+0x34>
 80034b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034ba:	d812      	bhi.n	80034e2 <_realloc_r+0x5a>
 80034bc:	4621      	mov	r1, r4
 80034be:	4640      	mov	r0, r8
 80034c0:	f7ff ff6e 	bl	80033a0 <_malloc_r>
 80034c4:	4605      	mov	r5, r0
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0ed      	beq.n	80034a6 <_realloc_r+0x1e>
 80034ca:	42bc      	cmp	r4, r7
 80034cc:	4622      	mov	r2, r4
 80034ce:	4631      	mov	r1, r6
 80034d0:	bf28      	it	cs
 80034d2:	463a      	movcs	r2, r7
 80034d4:	f7ff fed0 	bl	8003278 <memcpy>
 80034d8:	4631      	mov	r1, r6
 80034da:	4640      	mov	r0, r8
 80034dc:	f7ff fef4 	bl	80032c8 <_free_r>
 80034e0:	e7e1      	b.n	80034a6 <_realloc_r+0x1e>
 80034e2:	4635      	mov	r5, r6
 80034e4:	e7df      	b.n	80034a6 <_realloc_r+0x1e>
	...

080034e8 <_sbrk_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4d06      	ldr	r5, [pc, #24]	; (8003504 <_sbrk_r+0x1c>)
 80034ec:	2300      	movs	r3, #0
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	602b      	str	r3, [r5, #0]
 80034f4:	f7ff fa94 	bl	8002a20 <_sbrk>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d102      	bne.n	8003502 <_sbrk_r+0x1a>
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	b103      	cbz	r3, 8003502 <_sbrk_r+0x1a>
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	2000019c 	.word	0x2000019c

08003508 <__malloc_lock>:
 8003508:	4801      	ldr	r0, [pc, #4]	; (8003510 <__malloc_lock+0x8>)
 800350a:	f000 b811 	b.w	8003530 <__retarget_lock_acquire_recursive>
 800350e:	bf00      	nop
 8003510:	200001a0 	.word	0x200001a0

08003514 <__malloc_unlock>:
 8003514:	4801      	ldr	r0, [pc, #4]	; (800351c <__malloc_unlock+0x8>)
 8003516:	f000 b80c 	b.w	8003532 <__retarget_lock_release_recursive>
 800351a:	bf00      	nop
 800351c:	200001a0 	.word	0x200001a0

08003520 <_malloc_usable_size_r>:
 8003520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003524:	1f18      	subs	r0, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	bfbc      	itt	lt
 800352a:	580b      	ldrlt	r3, [r1, r0]
 800352c:	18c0      	addlt	r0, r0, r3
 800352e:	4770      	bx	lr

08003530 <__retarget_lock_acquire_recursive>:
 8003530:	4770      	bx	lr

08003532 <__retarget_lock_release_recursive>:
 8003532:	4770      	bx	lr

08003534 <_init>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr

08003540 <_fini>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr
