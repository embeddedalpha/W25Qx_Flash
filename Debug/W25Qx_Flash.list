
W25Qx_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002004  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002204  08002204  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002204  08002204  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002204  08002204  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002208  08002208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800220c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000000c0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003512  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b94  00000000  00000000  000235aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00024140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  00024340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aed8  00000000  00000000  000244c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003a70  00000000  00000000  0003f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f51e  00000000  00000000  00042e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d232e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a9c  00000000  00000000  000d2380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800219c 	.word	0x0800219c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800219c 	.word	0x0800219c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <Console_Init>:
int callback = 0;



 void Console_Init(USART_TypeDef *port,int baudrate)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if(port == USART1)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a9b      	ldr	r2, [pc, #620]	; (800051c <Console_Init+0x27c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d136      	bne.n	8000320 <Console_Init+0x80>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80002b2:	4b9b      	ldr	r3, [pc, #620]	; (8000520 <Console_Init+0x280>)
 80002b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b6:	4a9a      	ldr	r2, [pc, #616]	; (8000520 <Console_Init+0x280>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80002be:	4b98      	ldr	r3, [pc, #608]	; (8000520 <Console_Init+0x280>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a97      	ldr	r2, [pc, #604]	; (8000520 <Console_Init+0x280>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
		port -> CR3 |= USART_CR3_DMAT;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	615a      	str	r2, [r3, #20]
		DMA2_Stream7 -> CR |= 4 << 25  | 0 << 16 | 0 << 13 | 0 << 11 | 1 << 10 | 0 << 8 | 1 << 6 |
 80002d6:	4b93      	ldr	r3, [pc, #588]	; (8000524 <Console_Init+0x284>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4992      	ldr	r1, [pc, #584]	; (8000524 <Console_Init+0x284>)
 80002dc:	4b92      	ldr	r3, [pc, #584]	; (8000528 <Console_Init+0x288>)
 80002de:	4313      	orrs	r3, r2
 80002e0:	600b      	str	r3, [r1, #0]
				1 << 4 | 3 << 16;
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80002e2:	2307      	movs	r3, #7
 80002e4:	228c      	movs	r2, #140	; 0x8c
 80002e6:	2109      	movs	r1, #9
 80002e8:	4890      	ldr	r0, [pc, #576]	; (800052c <Console_Init+0x28c>)
 80002ea:	f000 fd59 	bl	8000da0 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART1_RX);
 80002ee:	2307      	movs	r3, #7
 80002f0:	229c      	movs	r2, #156	; 0x9c
 80002f2:	210a      	movs	r1, #10
 80002f4:	488d      	ldr	r0, [pc, #564]	; (800052c <Console_Init+0x28c>)
 80002f6:	f000 fd53 	bl	8000da0 <GPIO_Pin_Setup>

		port ->BRR |= (int)(84000000 / (16 * 460800)) << 4;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f043 02b0 	orr.w	r2, r3, #176	; 0xb0
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	609a      	str	r2, [r3, #8]
		port -> CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	f043 020c 	orr.w	r2, r3, #12
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	60da      	str	r2, [r3, #12]
		port -> CR1 |= USART_CR1_UE;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
	}



}
 800031e:	e0f8      	b.n	8000512 <Console_Init+0x272>
	else if(port == USART6)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a83      	ldr	r2, [pc, #524]	; (8000530 <Console_Init+0x290>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d12d      	bne.n	8000384 <Console_Init+0xe4>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8000328:	4b7d      	ldr	r3, [pc, #500]	; (8000520 <Console_Init+0x280>)
 800032a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800032c:	4a7c      	ldr	r2, [pc, #496]	; (8000520 <Console_Init+0x280>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOC, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 8000334:	2307      	movs	r3, #7
 8000336:	228c      	movs	r2, #140	; 0x8c
 8000338:	2106      	movs	r1, #6
 800033a:	487e      	ldr	r0, [pc, #504]	; (8000534 <Console_Init+0x294>)
 800033c:	f000 fd30 	bl	8000da0 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOC, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 8000340:	2307      	movs	r3, #7
 8000342:	228c      	movs	r2, #140	; 0x8c
 8000344:	2107      	movs	r1, #7
 8000346:	487b      	ldr	r0, [pc, #492]	; (8000534 <Console_Init+0x294>)
 8000348:	f000 fd2a 	bl	8000da0 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / (16 * baudrate)) << 4;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	011b      	lsls	r3, r3, #4
 800035c:	4a76      	ldr	r2, [pc, #472]	; (8000538 <Console_Init+0x298>)
 800035e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	461a      	mov	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	f043 0208 	orr.w	r2, r3, #8
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	f043 0204 	orr.w	r2, r3, #4
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	60da      	str	r2, [r3, #12]
}
 8000382:	e0c6      	b.n	8000512 <Console_Init+0x272>
	else if(port == USART2)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a6d      	ldr	r2, [pc, #436]	; (800053c <Console_Init+0x29c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d12d      	bne.n	80003e8 <Console_Init+0x148>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800038c:	4b64      	ldr	r3, [pc, #400]	; (8000520 <Console_Init+0x280>)
 800038e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000390:	4a63      	ldr	r2, [pc, #396]	; (8000520 <Console_Init+0x280>)
 8000392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000396:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 8000398:	2307      	movs	r3, #7
 800039a:	228c      	movs	r2, #140	; 0x8c
 800039c:	2102      	movs	r1, #2
 800039e:	4863      	ldr	r0, [pc, #396]	; (800052c <Console_Init+0x28c>)
 80003a0:	f000 fcfe 	bl	8000da0 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART2_RX);
 80003a4:	2307      	movs	r3, #7
 80003a6:	229c      	movs	r2, #156	; 0x9c
 80003a8:	2103      	movs	r1, #3
 80003aa:	4860      	ldr	r0, [pc, #384]	; (800052c <Console_Init+0x28c>)
 80003ac:	f000 fcf8 	bl	8000da0 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	015b      	lsls	r3, r3, #5
 80003c0:	4a5d      	ldr	r2, [pc, #372]	; (8000538 <Console_Init+0x298>)
 80003c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	f043 0208 	orr.w	r2, r3, #8
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	f043 0204 	orr.w	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	60da      	str	r2, [r3, #12]
}
 80003e6:	e094      	b.n	8000512 <Console_Init+0x272>
	else if(port == USART3)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a55      	ldr	r2, [pc, #340]	; (8000540 <Console_Init+0x2a0>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d12d      	bne.n	800044c <Console_Init+0x1ac>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80003f0:	4b4b      	ldr	r3, [pc, #300]	; (8000520 <Console_Init+0x280>)
 80003f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f4:	4a4a      	ldr	r2, [pc, #296]	; (8000520 <Console_Init+0x280>)
 80003f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fa:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART3_TX);
 80003fc:	2307      	movs	r3, #7
 80003fe:	228c      	movs	r2, #140	; 0x8c
 8000400:	210a      	movs	r1, #10
 8000402:	4850      	ldr	r0, [pc, #320]	; (8000544 <Console_Init+0x2a4>)
 8000404:	f000 fccc 	bl	8000da0 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 11, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART3_RX);
 8000408:	2307      	movs	r3, #7
 800040a:	229c      	movs	r2, #156	; 0x9c
 800040c:	210b      	movs	r1, #11
 800040e:	484d      	ldr	r0, [pc, #308]	; (8000544 <Console_Init+0x2a4>)
 8000410:	f000 fcc6 	bl	8000da0 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	015b      	lsls	r3, r3, #5
 8000424:	4a44      	ldr	r2, [pc, #272]	; (8000538 <Console_Init+0x298>)
 8000426:	fb92 f3f3 	sdiv	r3, r2, r3
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	461a      	mov	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	f043 0208 	orr.w	r2, r3, #8
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	f043 0204 	orr.w	r2, r3, #4
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60da      	str	r2, [r3, #12]
}
 800044a:	e062      	b.n	8000512 <Console_Init+0x272>
	else if(port == UART4)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a3e      	ldr	r2, [pc, #248]	; (8000548 <Console_Init+0x2a8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d12d      	bne.n	80004b0 <Console_Init+0x210>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8000454:	4b32      	ldr	r3, [pc, #200]	; (8000520 <Console_Init+0x280>)
 8000456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000458:	4a31      	ldr	r2, [pc, #196]	; (8000520 <Console_Init+0x280>)
 800045a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800045e:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 0, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART4_TX);
 8000460:	2307      	movs	r3, #7
 8000462:	228c      	movs	r2, #140	; 0x8c
 8000464:	2100      	movs	r1, #0
 8000466:	4831      	ldr	r0, [pc, #196]	; (800052c <Console_Init+0x28c>)
 8000468:	f000 fc9a 	bl	8000da0 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 1, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART4_RX);
 800046c:	2307      	movs	r3, #7
 800046e:	229c      	movs	r2, #156	; 0x9c
 8000470:	2101      	movs	r1, #1
 8000472:	482e      	ldr	r0, [pc, #184]	; (800052c <Console_Init+0x28c>)
 8000474:	f000 fc94 	bl	8000da0 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	015b      	lsls	r3, r3, #5
 8000488:	4a2b      	ldr	r2, [pc, #172]	; (8000538 <Console_Init+0x298>)
 800048a:	fb92 f3f3 	sdiv	r3, r2, r3
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	f043 0208 	orr.w	r2, r3, #8
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	f043 0204 	orr.w	r2, r3, #4
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60da      	str	r2, [r3, #12]
}
 80004ae:	e030      	b.n	8000512 <Console_Init+0x272>
	else if(port == UART5)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a26      	ldr	r2, [pc, #152]	; (800054c <Console_Init+0x2ac>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d12c      	bne.n	8000512 <Console_Init+0x272>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <Console_Init+0x280>)
 80004ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <Console_Init+0x280>)
 80004be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004c2:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART5_TX);
 80004c4:	2307      	movs	r3, #7
 80004c6:	228c      	movs	r2, #140	; 0x8c
 80004c8:	210c      	movs	r1, #12
 80004ca:	481a      	ldr	r0, [pc, #104]	; (8000534 <Console_Init+0x294>)
 80004cc:	f000 fc68 	bl	8000da0 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOD, 2, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART5_RX);
 80004d0:	2307      	movs	r3, #7
 80004d2:	229c      	movs	r2, #156	; 0x9c
 80004d4:	2102      	movs	r1, #2
 80004d6:	481e      	ldr	r0, [pc, #120]	; (8000550 <Console_Init+0x2b0>)
 80004d8:	f000 fc62 	bl	8000da0 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	015b      	lsls	r3, r3, #5
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <Console_Init+0x298>)
 80004ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	461a      	mov	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	f043 0208 	orr.w	r2, r3, #8
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	f043 0204 	orr.w	r2, r3, #4
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	60da      	str	r2, [r3, #12]
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40011000 	.word	0x40011000
 8000520:	40023800 	.word	0x40023800
 8000524:	400264b8 	.word	0x400264b8
 8000528:	08030450 	.word	0x08030450
 800052c:	40020000 	.word	0x40020000
 8000530:	40011400 	.word	0x40011400
 8000534:	40020800 	.word	0x40020800
 8000538:	0501bd00 	.word	0x0501bd00
 800053c:	40004400 	.word	0x40004400
 8000540:	40004800 	.word	0x40004800
 8000544:	40020400 	.word	0x40020400
 8000548:	40004c00 	.word	0x40004c00
 800054c:	40005000 	.word	0x40005000
 8000550:	40020c00 	.word	0x40020c00

08000554 <printConsole>:


 void printConsole(USART_TypeDef *port,char *msg, ...)
{
 8000554:	b40e      	push	{r1, r2, r3}
 8000556:	b580      	push	{r7, lr}
 8000558:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 800055c:	af00      	add	r7, sp, #0
 800055e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000562:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000566:	6018      	str	r0, [r3, #0]

char buff[1000];
//	#ifdef DEBUG_UART
	va_list args;
	va_start(args, msg);
 8000568:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800056c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000570:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8000574:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 8000576:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800057a:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800057e:	f107 0010 	add.w	r0, r7, #16
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8000588:	f001 f9b0 	bl	80018ec <vsiprintf>
	DMA2_Stream7 -> PAR = (uint32_t)&port -> DR;
 800058c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000590:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	1d1a      	adds	r2, r3, #4
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <printConsole+0x98>)
 800059a:	609a      	str	r2, [r3, #8]
	DMA2_Stream7 -> M0AR = (uint32_t)&buff[0];
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <printConsole+0x98>)
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	60d3      	str	r3, [r2, #12]
	DMA2_Stream7 -> NDTR = (uint16_t)strlen(buff);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe21 	bl	80001f0 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <printConsole+0x98>)
 80005b4:	605a      	str	r2, [r3, #4]
	DMA2_Stream7 -> CR |= DMA_SxCR_EN;
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <printConsole+0x98>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <printConsole+0x98>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]
	while((DMA2->HISR & DMA_HIFCR_CTCIF7) == 0){}
 80005c2:	bf00      	nop
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <printConsole+0x9c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f9      	beq.n	80005c4 <printConsole+0x70>
	DMA2 ->HIFCR |= DMA_HIFCR_CTCIF7;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <printConsole+0x9c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <printConsole+0x9c>)
 80005d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005da:	60d3      	str	r3, [r2, #12]
////		port -> CR1 |= USART_CR1_SBK;
//		while (!(port->SR & USART_SR_TXE));
//	}

//	#endif
}
 80005dc:	bf00      	nop
 80005de:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80005e2:	46bd      	mov	sp, r7
 80005e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005e8:	b003      	add	sp, #12
 80005ea:	4770      	bx	lr
 80005ec:	400264b8 	.word	0x400264b8
 80005f0:	40026400 	.word	0x40026400

080005f4 <Delay_us>:
	return (0UL);                                                     /* Function successful */
}


__STATIC_INLINE uint32_t Delay_us(float us)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = 167 * us;
 80005fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000602:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000638 <Delay_us+0x44>
 8000606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <Delay_us+0x48>)
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 2a90 	vmov	r2, s15
 8000614:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <Delay_us+0x48>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 800061c:	bf00      	nop
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <Delay_us+0x48>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	43270000 	.word	0x43270000
 800063c:	e000e010 	.word	0xe000e010

08000640 <Read_Status_Register>:

struct Status_Register SR;


static void Read_Status_Register(void)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b095      	sub	sp, #84	; 0x54
 8000644:	af10      	add	r7, sp, #64	; 0x40
	int x[3];
	SPI_CSS_Low(W25QX);
 8000646:	4e74      	ldr	r6, [pc, #464]	; (8000818 <Read_Status_Register+0x1d8>)
 8000648:	466d      	mov	r5, sp
 800064a:	f106 0410 	add.w	r4, r6, #16
 800064e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800065e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000662:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000666:	f000 fe29 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x05);
 800066a:	4e6b      	ldr	r6, [pc, #428]	; (8000818 <Read_Status_Register+0x1d8>)
 800066c:	2305      	movs	r3, #5
 800066e:	930e      	str	r3, [sp, #56]	; 0x38
 8000670:	466d      	mov	r5, sp
 8000672:	f106 0410 	add.w	r4, r6, #16
 8000676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800067e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000682:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000686:	e885 0003 	stmia.w	r5, {r0, r1}
 800068a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800068e:	f000 fe3d 	bl	800130c <SPI_TRX_Data>
	x[0] = SPI_TRX_Data(W25QX, 0xAA);
 8000692:	4e61      	ldr	r6, [pc, #388]	; (8000818 <Read_Status_Register+0x1d8>)
 8000694:	23aa      	movs	r3, #170	; 0xaa
 8000696:	930e      	str	r3, [sp, #56]	; 0x38
 8000698:	466d      	mov	r5, sp
 800069a:	f106 0410 	add.w	r4, r6, #16
 800069e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80006b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006b6:	f000 fe29 	bl	800130c <SPI_TRX_Data>
 80006ba:	4603      	mov	r3, r0
 80006bc:	607b      	str	r3, [r7, #4]
	x[1] = SPI_TRX_Data(W25QX, 0xAA);
 80006be:	4e56      	ldr	r6, [pc, #344]	; (8000818 <Read_Status_Register+0x1d8>)
 80006c0:	23aa      	movs	r3, #170	; 0xaa
 80006c2:	930e      	str	r3, [sp, #56]	; 0x38
 80006c4:	466d      	mov	r5, sp
 80006c6:	f106 0410 	add.w	r4, r6, #16
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006da:	e885 0003 	stmia.w	r5, {r0, r1}
 80006de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006e2:	f000 fe13 	bl	800130c <SPI_TRX_Data>
 80006e6:	4603      	mov	r3, r0
 80006e8:	60bb      	str	r3, [r7, #8]
	x[2] = SPI_TRX_Data(W25QX, 0xAA);
 80006ea:	4e4b      	ldr	r6, [pc, #300]	; (8000818 <Read_Status_Register+0x1d8>)
 80006ec:	23aa      	movs	r3, #170	; 0xaa
 80006ee:	930e      	str	r3, [sp, #56]	; 0x38
 80006f0:	466d      	mov	r5, sp
 80006f2:	f106 0410 	add.w	r4, r6, #16
 80006f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000702:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000706:	e885 0003 	stmia.w	r5, {r0, r1}
 800070a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800070e:	f000 fdfd 	bl	800130c <SPI_TRX_Data>
 8000712:	4603      	mov	r3, r0
 8000714:	60fb      	str	r3, [r7, #12]
	SPI_CSS_High(W25QX);
 8000716:	4e40      	ldr	r6, [pc, #256]	; (8000818 <Read_Status_Register+0x1d8>)
 8000718:	466d      	mov	r5, sp
 800071a:	f106 0410 	add.w	r4, r6, #16
 800071e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800072a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000732:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000736:	f000 fdd5 	bl	80012e4 <SPI_CSS_High>

	SR.SRP  = ((1 << 7) & x[0]) >> 7;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	11db      	asrs	r3, r3, #7
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	4a36      	ldr	r2, [pc, #216]	; (800081c <Read_Status_Register+0x1dc>)
 8000744:	6013      	str	r3, [r2, #0]
	SR.SEC  = ((1 << 6) & x[0]) >> 6;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	119b      	asrs	r3, r3, #6
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	4a33      	ldr	r2, [pc, #204]	; (800081c <Read_Status_Register+0x1dc>)
 8000750:	6053      	str	r3, [r2, #4]
	SR.TB   = ((1 << 5) & x[0]) >> 5;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	115b      	asrs	r3, r3, #5
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	4a30      	ldr	r2, [pc, #192]	; (800081c <Read_Status_Register+0x1dc>)
 800075c:	6093      	str	r3, [r2, #8]
	SR.BP2  = ((1 << 4) & x[0]) >> 4;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	111b      	asrs	r3, r3, #4
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <Read_Status_Register+0x1dc>)
 8000768:	60d3      	str	r3, [r2, #12]
	SR.BP1  = ((1 << 3) & x[0]) >> 3;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	10db      	asrs	r3, r3, #3
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <Read_Status_Register+0x1dc>)
 8000774:	6113      	str	r3, [r2, #16]
	SR.BP0  = ((1 << 2) & x[0]) >> 2;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	109b      	asrs	r3, r3, #2
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	4a27      	ldr	r2, [pc, #156]	; (800081c <Read_Status_Register+0x1dc>)
 8000780:	6153      	str	r3, [r2, #20]
	SR.WEL  = ((1 << 1) & x[0]) >> 1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	105b      	asrs	r3, r3, #1
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <Read_Status_Register+0x1dc>)
 800078c:	6193      	str	r3, [r2, #24]
	SR.BUSY = ((1 << 0) & x[0]) >> 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <Read_Status_Register+0x1dc>)
 8000796:	61d3      	str	r3, [r2, #28]

	SR.SUS  = ((1 << 7) & x[1]) >> 7;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	11db      	asrs	r3, r3, #7
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <Read_Status_Register+0x1dc>)
 80007a2:	6213      	str	r3, [r2, #32]
	SR.CMP  = ((1 << 6) & x[1]) >> 6;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	119b      	asrs	r3, r3, #6
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <Read_Status_Register+0x1dc>)
 80007ae:	6253      	str	r3, [r2, #36]	; 0x24
	SR.LB3  = ((1 << 5) & x[1]) >> 5;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	115b      	asrs	r3, r3, #5
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	4a18      	ldr	r2, [pc, #96]	; (800081c <Read_Status_Register+0x1dc>)
 80007ba:	6293      	str	r3, [r2, #40]	; 0x28
	SR.LB2  = ((1 << 4) & x[1]) >> 4;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	111b      	asrs	r3, r3, #4
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	4a15      	ldr	r2, [pc, #84]	; (800081c <Read_Status_Register+0x1dc>)
 80007c6:	62d3      	str	r3, [r2, #44]	; 0x2c
	SR.LB1  = ((1 << 3) & x[1]) >> 3;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	10db      	asrs	r3, r3, #3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <Read_Status_Register+0x1dc>)
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30
	SR.QE   = ((1 << 1) & x[1]) >> 1;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	105b      	asrs	r3, r3, #1
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <Read_Status_Register+0x1dc>)
 80007de:	6353      	str	r3, [r2, #52]	; 0x34
	SR.SRL  = ((1 << 0) & x[1]) >> 0;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <Read_Status_Register+0x1dc>)
 80007e8:	6393      	str	r3, [r2, #56]	; 0x38

	SR.DRV1  = ((1 << 6) & x[1]) >> 6;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	119b      	asrs	r3, r3, #6
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <Read_Status_Register+0x1dc>)
 80007f4:	63d3      	str	r3, [r2, #60]	; 0x3c
	SR.DRV2  = ((1 << 5) & x[1]) >> 5;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	115b      	asrs	r3, r3, #5
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <Read_Status_Register+0x1dc>)
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
	SR.WPS  = ((1 << 2) & x[1]) >> 2;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	109b      	asrs	r3, r3, #2
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <Read_Status_Register+0x1dc>)
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000816:	bf00      	nop
 8000818:	20000084 	.word	0x20000084
 800081c:	200000cc 	.word	0x200000cc

08000820 <Write_Enable>:

static int Write_Enable()
{
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	b093      	sub	sp, #76	; 0x4c
 8000824:	af10      	add	r7, sp, #64	; 0x40
	int retval;
	SPI_CSS_Low(W25QX);
 8000826:	4e24      	ldr	r6, [pc, #144]	; (80008b8 <Write_Enable+0x98>)
 8000828:	466d      	mov	r5, sp
 800082a:	f106 0410 	add.w	r4, r6, #16
 800082e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800083e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000842:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000846:	f000 fd39 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x06);
 800084a:	4e1b      	ldr	r6, [pc, #108]	; (80008b8 <Write_Enable+0x98>)
 800084c:	2306      	movs	r3, #6
 800084e:	930e      	str	r3, [sp, #56]	; 0x38
 8000850:	466d      	mov	r5, sp
 8000852:	f106 0410 	add.w	r4, r6, #16
 8000856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800085c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000866:	e885 0003 	stmia.w	r5, {r0, r1}
 800086a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800086e:	f000 fd4d 	bl	800130c <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8000872:	4e11      	ldr	r6, [pc, #68]	; (80008b8 <Write_Enable+0x98>)
 8000874:	466d      	mov	r5, sp
 8000876:	f106 0410 	add.w	r4, r6, #16
 800087a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800087c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800087e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800088a:	e885 0003 	stmia.w	r5, {r0, r1}
 800088e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000892:	f000 fd27 	bl	80012e4 <SPI_CSS_High>

	Read_Status_Register();
 8000896:	f7ff fed3 	bl	8000640 <Read_Status_Register>
	if(SR.WEL)
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <Write_Enable+0x9c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <Write_Enable+0x88>
	{
		retval = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	e002      	b.n	80008ae <Write_Enable+0x8e>
	}
	else
	{
		retval = -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	607b      	str	r3, [r7, #4]
	}
	return retval;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	20000084 	.word	0x20000084
 80008bc:	200000cc 	.word	0x200000cc

080008c0 <Write_Disable>:

static int Write_Disable()
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b093      	sub	sp, #76	; 0x4c
 80008c4:	af10      	add	r7, sp, #64	; 0x40
	int retval;
	SPI_CSS_Low(W25QX);
 80008c6:	4e24      	ldr	r6, [pc, #144]	; (8000958 <Write_Disable+0x98>)
 80008c8:	466d      	mov	r5, sp
 80008ca:	f106 0410 	add.w	r4, r6, #16
 80008ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008de:	e885 0003 	stmia.w	r5, {r0, r1}
 80008e2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008e6:	f000 fce9 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x04);
 80008ea:	4e1b      	ldr	r6, [pc, #108]	; (8000958 <Write_Disable+0x98>)
 80008ec:	2304      	movs	r3, #4
 80008ee:	930e      	str	r3, [sp, #56]	; 0x38
 80008f0:	466d      	mov	r5, sp
 80008f2:	f106 0410 	add.w	r4, r6, #16
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000906:	e885 0003 	stmia.w	r5, {r0, r1}
 800090a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800090e:	f000 fcfd 	bl	800130c <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8000912:	4e11      	ldr	r6, [pc, #68]	; (8000958 <Write_Disable+0x98>)
 8000914:	466d      	mov	r5, sp
 8000916:	f106 0410 	add.w	r4, r6, #16
 800091a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800092a:	e885 0003 	stmia.w	r5, {r0, r1}
 800092e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000932:	f000 fcd7 	bl	80012e4 <SPI_CSS_High>
	Read_Status_Register();
 8000936:	f7ff fe83 	bl	8000640 <Read_Status_Register>
	if(SR.WEL)
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <Write_Disable+0x9c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <Write_Disable+0x8a>
	{
		retval = -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	e001      	b.n	800094e <Write_Disable+0x8e>
	}
	else
	{
		retval = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
	}
	return retval;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	20000084 	.word	0x20000084
 800095c:	200000cc 	.word	0x200000cc

08000960 <W25Qx_Chip_Erase>:


int W25Qx_Chip_Erase(void)
{
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b091      	sub	sp, #68	; 0x44
 8000964:	af10      	add	r7, sp, #64	; 0x40
	Write_Enable();
 8000966:	f7ff ff5b 	bl	8000820 <Write_Enable>
	SPI_CSS_Low(W25QX);
 800096a:	4e22      	ldr	r6, [pc, #136]	; (80009f4 <W25Qx_Chip_Erase+0x94>)
 800096c:	466d      	mov	r5, sp
 800096e:	f106 0410 	add.w	r4, r6, #16
 8000972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000982:	e885 0003 	stmia.w	r5, {r0, r1}
 8000986:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800098a:	f000 fc97 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x60);
 800098e:	4e19      	ldr	r6, [pc, #100]	; (80009f4 <W25Qx_Chip_Erase+0x94>)
 8000990:	2360      	movs	r3, #96	; 0x60
 8000992:	930e      	str	r3, [sp, #56]	; 0x38
 8000994:	466d      	mov	r5, sp
 8000996:	f106 0410 	add.w	r4, r6, #16
 800099a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80009ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009b2:	f000 fcab 	bl	800130c <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 80009b6:	4e0f      	ldr	r6, [pc, #60]	; (80009f4 <W25Qx_Chip_Erase+0x94>)
 80009b8:	466d      	mov	r5, sp
 80009ba:	f106 0410 	add.w	r4, r6, #16
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80009d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009d6:	f000 fc85 	bl	80012e4 <SPI_CSS_High>
	do{
		Read_Status_Register();
 80009da:	f7ff fe31 	bl	8000640 <Read_Status_Register>
	}while(SR.BUSY == 1);
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <W25Qx_Chip_Erase+0x98>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d0f9      	beq.n	80009da <W25Qx_Chip_Erase+0x7a>
	Write_Disable();
 80009e6:	f7ff ff6b 	bl	80008c0 <Write_Disable>
	return 1;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3704      	adds	r7, #4
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f4:	20000084 	.word	0x20000084
 80009f8:	200000cc 	.word	0x200000cc

080009fc <W25Qx_Release_Power_Down>:




void W25Qx_Release_Power_Down(void)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b091      	sub	sp, #68	; 0x44
 8000a00:	af10      	add	r7, sp, #64	; 0x40
	SPI_CSS_Low(W25QX);
 8000a02:	4e1e      	ldr	r6, [pc, #120]	; (8000a7c <W25Qx_Release_Power_Down+0x80>)
 8000a04:	466d      	mov	r5, sp
 8000a06:	f106 0410 	add.w	r4, r6, #16
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a1e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a22:	f000 fc4b 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0xAB);
 8000a26:	4e15      	ldr	r6, [pc, #84]	; (8000a7c <W25Qx_Release_Power_Down+0x80>)
 8000a28:	23ab      	movs	r3, #171	; 0xab
 8000a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8000a2c:	466d      	mov	r5, sp
 8000a2e:	f106 0410 	add.w	r4, r6, #16
 8000a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a4a:	f000 fc5f 	bl	800130c <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8000a4e:	4e0b      	ldr	r6, [pc, #44]	; (8000a7c <W25Qx_Release_Power_Down+0x80>)
 8000a50:	466d      	mov	r5, sp
 8000a52:	f106 0410 	add.w	r4, r6, #16
 8000a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a6e:	f000 fc39 	bl	80012e4 <SPI_CSS_High>
}
 8000a72:	bf00      	nop
 8000a74:	3704      	adds	r7, #4
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000084 	.word	0x20000084

08000a80 <W25QX_Init>:


void W25QX_Init(SPI_TypeDef *PORT, bool remap_pin)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b091      	sub	sp, #68	; 0x44
 8000a84:	af0e      	add	r7, sp, #56	; 0x38
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	W25QX.SPI = PORT;
 8000a8c:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <W25QX_Init+0x8c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
	W25QX.Frame = SPI_Frame_8Bit;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <W25QX_Init+0x8c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	749a      	strb	r2, [r3, #18]
	W25QX.type = SPI_Full_Duplex_Master;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <W25QX_Init+0x8c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	715a      	strb	r2, [r3, #5]
	W25QX.mode = SPI_Master;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <W25QX_Init+0x8c>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	719a      	strb	r2, [r3, #6]
	W25QX.LSB_MSB = 0;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <W25QX_Init+0x8c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	739a      	strb	r2, [r3, #14]
	W25QX.frequency = 5;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <W25QX_Init+0x8c>)
 8000aac:	2205      	movs	r2, #5
 8000aae:	609a      	str	r2, [r3, #8]
	W25QX.nCSS_Port = GPIOA;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <W25QX_Init+0x8c>)
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <W25QX_Init+0x90>)
 8000ab4:	615a      	str	r2, [r3, #20]
	W25QX.nCSS_pin = 15;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <W25QX_Init+0x8c>)
 8000ab8:	220f      	movs	r2, #15
 8000aba:	761a      	strb	r2, [r3, #24]
	W25QX.pin_remap = remap_pin;
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <W25QX_Init+0x8c>)
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	7113      	strb	r3, [r2, #4]
	W25QX.polarity = 1;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <W25QX_Init+0x8c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	735a      	strb	r2, [r3, #13]
	W25QX.phase = 1;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <W25QX_Init+0x8c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	731a      	strb	r2, [r3, #12]
	SPI_Init(W25QX);
 8000ace:	4e0f      	ldr	r6, [pc, #60]	; (8000b0c <W25QX_Init+0x8c>)
 8000ad0:	466d      	mov	r5, sp
 8000ad2:	f106 0410 	add.w	r4, r6, #16
 8000ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000aea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000aee:	f000 fa5f 	bl	8000fb0 <SPI_Init>

	W25Qx_Release_Power_Down();
 8000af2:	f7ff ff83 	bl	80009fc <W25Qx_Release_Power_Down>
	Delay_us(5);
 8000af6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000afa:	f7ff fd7b 	bl	80005f4 <Delay_us>

	Read_Status_Register();
 8000afe:	f7ff fd9f 	bl	8000640 <Read_Status_Register>


}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000084 	.word	0x20000084
 8000b10:	40020000 	.word	0x40020000

08000b14 <W25Qx_Write_Page>:




void W25Qx_Write_Page(uint32_t address, int *data[], int len)
{
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	b097      	sub	sp, #92	; 0x5c
 8000b18:	af10      	add	r7, sp, #64	; 0x40
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	Write_Enable();
 8000b20:	f7ff fe7e 	bl	8000820 <Write_Enable>
	SPI_CSS_Low(W25QX);
 8000b24:	4e50      	ldr	r6, [pc, #320]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000b26:	466d      	mov	r5, sp
 8000b28:	f106 0410 	add.w	r4, r6, #16
 8000b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b44:	f000 fbba 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x02);
 8000b48:	4e47      	ldr	r6, [pc, #284]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8000b4e:	466d      	mov	r5, sp
 8000b50:	f106 0410 	add.w	r4, r6, #16
 8000b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b6c:	f000 fbce 	bl	800130c <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & address) >> 16);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	0c1b      	lsrs	r3, r3, #16
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4e3c      	ldr	r6, [pc, #240]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000b78:	930e      	str	r3, [sp, #56]	; 0x38
 8000b7a:	466d      	mov	r5, sp
 8000b7c:	f106 0410 	add.w	r4, r6, #16
 8000b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b90:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b98:	f000 fbb8 	bl	800130c <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & address) >> 8);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4e31      	ldr	r6, [pc, #196]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8000ba6:	466d      	mov	r5, sp
 8000ba8:	f106 0410 	add.w	r4, r6, #16
 8000bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bc0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bc4:	f000 fba2 	bl	800130c <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & address) >> 0);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4e26      	ldr	r6, [pc, #152]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000bce:	930e      	str	r3, [sp, #56]	; 0x38
 8000bd0:	466d      	mov	r5, sp
 8000bd2:	f106 0410 	add.w	r4, r6, #16
 8000bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bee:	f000 fb8d 	bl	800130c <SPI_TRX_Data>
	for(int i = 0; i < len; i++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e01a      	b.n	8000c2e <W25Qx_Write_Page+0x11a>
	{
		SPI_TRX_Data(W25QX, data[i]);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	4413      	add	r3, r2
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4e19      	ldr	r6, [pc, #100]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000c04:	930e      	str	r3, [sp, #56]	; 0x38
 8000c06:	466d      	mov	r5, sp
 8000c08:	f106 0410 	add.w	r4, r6, #16
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c24:	f000 fb72 	bl	800130c <SPI_TRX_Data>
	for(int i = 0; i < len; i++)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbe0      	blt.n	8000bf8 <W25Qx_Write_Page+0xe4>
	}
	SPI_CSS_High(W25QX);
 8000c36:	4e0c      	ldr	r6, [pc, #48]	; (8000c68 <W25Qx_Write_Page+0x154>)
 8000c38:	466d      	mov	r5, sp
 8000c3a:	f106 0410 	add.w	r4, r6, #16
 8000c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c56:	f000 fb45 	bl	80012e4 <SPI_CSS_High>
	Write_Disable();
 8000c5a:	f7ff fe31 	bl	80008c0 <Write_Disable>
}
 8000c5e:	bf00      	nop
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000084 	.word	0x20000084

08000c6c <W25Qx_Read_Page>:

int W25Qx_Read_Page(uint32_t address)
{
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	b095      	sub	sp, #84	; 0x54
 8000c70:	af10      	add	r7, sp, #64	; 0x40
 8000c72:	6078      	str	r0, [r7, #4]
	int read;
	SPI_CSS_Low(W25QX);
 8000c74:	4e49      	ldr	r6, [pc, #292]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000c76:	466d      	mov	r5, sp
 8000c78:	f106 0410 	add.w	r4, r6, #16
 8000c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c94:	f000 fb12 	bl	80012bc <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x03);
 8000c98:	4e40      	ldr	r6, [pc, #256]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8000c9e:	466d      	mov	r5, sp
 8000ca0:	f106 0410 	add.w	r4, r6, #16
 8000ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cb8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cbc:	f000 fb26 	bl	800130c <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & address) >> 16);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4e35      	ldr	r6, [pc, #212]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8000cca:	466d      	mov	r5, sp
 8000ccc:	f106 0410 	add.w	r4, r6, #16
 8000cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ce4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ce8:	f000 fb10 	bl	800130c <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & address) >> 8);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	0a1b      	lsrs	r3, r3, #8
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4e2a      	ldr	r6, [pc, #168]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8000cf6:	466d      	mov	r5, sp
 8000cf8:	f106 0410 	add.w	r4, r6, #16
 8000cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d14:	f000 fafa 	bl	800130c <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & address) >> 0);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4e1f      	ldr	r6, [pc, #124]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000d1e:	930e      	str	r3, [sp, #56]	; 0x38
 8000d20:	466d      	mov	r5, sp
 8000d22:	f106 0410 	add.w	r4, r6, #16
 8000d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d3e:	f000 fae5 	bl	800130c <SPI_TRX_Data>
	read = SPI_TRX_Data(W25QX, 0xAA);
 8000d42:	4e16      	ldr	r6, [pc, #88]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000d44:	23aa      	movs	r3, #170	; 0xaa
 8000d46:	930e      	str	r3, [sp, #56]	; 0x38
 8000d48:	466d      	mov	r5, sp
 8000d4a:	f106 0410 	add.w	r4, r6, #16
 8000d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d66:	f000 fad1 	bl	800130c <SPI_TRX_Data>
 8000d6a:	60f8      	str	r0, [r7, #12]
	SPI_CSS_High(W25QX);
 8000d6c:	4e0b      	ldr	r6, [pc, #44]	; (8000d9c <W25Qx_Read_Page+0x130>)
 8000d6e:	466d      	mov	r5, sp
 8000d70:	f106 0410 	add.w	r4, r6, #16
 8000d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d84:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d8c:	f000 faaa 	bl	80012e4 <SPI_CSS_High>
	return read;
 8000d90:	68fb      	ldr	r3, [r7, #12]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000084 	.word	0x20000084

08000da0 <GPIO_Pin_Setup>:

#include "GPIO.h"


int GPIO_Pin_Setup(GPIO_TypeDef *PORT, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	4608      	mov	r0, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	70fb      	strb	r3, [r7, #3]
 8000db2:	460b      	mov	r3, r1
 8000db4:	70bb      	strb	r3, [r7, #2]
 8000db6:	4613      	mov	r3, r2
 8000db8:	707b      	strb	r3, [r7, #1]

	if(PORT == GPIOA)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a61      	ldr	r2, [pc, #388]	; (8000f44 <GPIO_Pin_Setup+0x1a4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d106      	bne.n	8000dd0 <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 8000dc2:	4b61      	ldr	r3, [pc, #388]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a60      	ldr	r2, [pc, #384]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	e039      	b.n	8000e44 <GPIO_Pin_Setup+0xa4>
	} else 	if(PORT == GPIOB)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a5e      	ldr	r2, [pc, #376]	; (8000f4c <GPIO_Pin_Setup+0x1ac>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d106      	bne.n	8000de6 <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000dd8:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a5a      	ldr	r2, [pc, #360]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	e02e      	b.n	8000e44 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOC)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a59      	ldr	r2, [pc, #356]	; (8000f50 <GPIO_Pin_Setup+0x1b0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d106      	bne.n	8000dfc <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 8000dee:	4b56      	ldr	r3, [pc, #344]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a55      	ldr	r2, [pc, #340]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	e023      	b.n	8000e44 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOD)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a55      	ldr	r2, [pc, #340]	; (8000f54 <GPIO_Pin_Setup+0x1b4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d106      	bne.n	8000e12 <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 8000e04:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	e018      	b.n	8000e44 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <GPIO_Pin_Setup+0x1b8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <GPIO_Pin_Setup+0x88>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a4a      	ldr	r2, [pc, #296]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	e00d      	b.n	8000e44 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOH)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a4c      	ldr	r2, [pc, #304]	; (8000f5c <GPIO_Pin_Setup+0x1bc>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <GPIO_Pin_Setup+0x9e>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOHEN;
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <GPIO_Pin_Setup+0x1a8>)
 8000e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	e002      	b.n	8000e44 <GPIO_Pin_Setup+0xa4>
	}else
	{
		return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e078      	b.n	8000f36 <GPIO_Pin_Setup+0x196>
//	PORT -> OTYPER  &= ~((0xFF) << (1 * pin));
//	PORT -> OSPEEDR &= ~((0xFF) << (2 * pin));
//	PORT -> PUPDR   &= ~((0xFF) << (2 * pin));


	PORT -> MODER	&= ~(0x3 << (2 * pin));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	78fa      	ldrb	r2, [r7, #3]
 8000e4a:	0052      	lsls	r2, r2, #1
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
	PORT -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	78ba      	ldrb	r2, [r7, #2]
 8000e60:	0992      	lsrs	r2, r2, #6
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	4611      	mov	r1, r2
 8000e66:	78fa      	ldrb	r2, [r7, #3]
 8000e68:	0052      	lsls	r2, r2, #1
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]

	PORT -> OTYPER	&= ~(0x1 << (1 * pin));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]
	PORT -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	78ba      	ldrb	r2, [r7, #2]
 8000e8e:	0912      	lsrs	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	f002 0103 	and.w	r1, r2, #3
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	605a      	str	r2, [r3, #4]

	PORT -> OSPEEDR	&= ~(0x3 << (2 * pin));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	78fa      	ldrb	r2, [r7, #3]
 8000ea8:	0052      	lsls	r2, r2, #1
 8000eaa:	2103      	movs	r1, #3
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	43d2      	mvns	r2, r2
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
	PORT -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	78ba      	ldrb	r2, [r7, #2]
 8000ebe:	0892      	lsrs	r2, r2, #2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f002 0103 	and.w	r1, r2, #3
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	0052      	lsls	r2, r2, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	609a      	str	r2, [r3, #8]

	PORT -> PUPDR	&= ~(0x03 << (2 * pin));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	78fa      	ldrb	r2, [r7, #3]
 8000eda:	0052      	lsls	r2, r2, #1
 8000edc:	2103      	movs	r1, #3
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	43d2      	mvns	r2, r2
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60da      	str	r2, [r3, #12]
	PORT -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	78ba      	ldrb	r2, [r7, #2]
 8000ef0:	f002 0103 	and.w	r1, r2, #3
 8000ef4:	78fa      	ldrb	r2, [r7, #3]
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60da      	str	r2, [r3, #12]

	if(pin < 8)PORT -> AFR[0] |= ( alternate_function << (4 * (pin)));
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d80a      	bhi.n	8000f1e <GPIO_Pin_Setup+0x17e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	7879      	ldrb	r1, [r7, #1]
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	621a      	str	r2, [r3, #32]
 8000f1c:	e00a      	b.n	8000f34 <GPIO_Pin_Setup+0x194>
	else	   PORT -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	7879      	ldrb	r1, [r7, #1]
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	3a08      	subs	r2, #8
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

	if (alternate_function == NONE) {}

	return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40021c00 	.word	0x40021c00

08000f60 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	2101      	movs	r1, #1
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	43d2      	mvns	r2, r2
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SPI_Init>:
	}
	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
}

void SPI_Init(SPI_Config SPI)
{
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f107 0c08 	add.w	ip, r7, #8
 8000fba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}



	if (SPI.SPI == SPI1)   //CK -> PA5 	//MISO -> PA6 	//MOSI -> PA7
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4aa2      	ldr	r2, [pc, #648]	; (800124c <SPI_Init+0x29c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d130      	bne.n	8001028 <SPI_Init+0x78>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000fc6:	4ba2      	ldr	r3, [pc, #648]	; (8001250 <SPI_Init+0x2a0>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4aa1      	ldr	r2, [pc, #644]	; (8001250 <SPI_Init+0x2a0>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44

		if(SPI.pin_remap == 0)
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	f083 0301 	eor.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d012      	beq.n	8001004 <SPI_Init+0x54>
		{
			GPIO_Pin_Setup(GPIOA, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 8000fde:	2305      	movs	r3, #5
 8000fe0:	228c      	movs	r2, #140	; 0x8c
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	489b      	ldr	r0, [pc, #620]	; (8001254 <SPI_Init+0x2a4>)
 8000fe6:	f7ff fedb 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOA, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 8000fea:	2305      	movs	r3, #5
 8000fec:	228c      	movs	r2, #140	; 0x8c
 8000fee:	2106      	movs	r1, #6
 8000ff0:	4898      	ldr	r0, [pc, #608]	; (8001254 <SPI_Init+0x2a4>)
 8000ff2:	f7ff fed5 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOA, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	228c      	movs	r2, #140	; 0x8c
 8000ffa:	2107      	movs	r1, #7
 8000ffc:	4895      	ldr	r0, [pc, #596]	; (8001254 <SPI_Init+0x2a4>)
 8000ffe:	f7ff fecf 	bl	8000da0 <GPIO_Pin_Setup>
 8001002:	e011      	b.n	8001028 <SPI_Init+0x78>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 8001004:	2305      	movs	r3, #5
 8001006:	228c      	movs	r2, #140	; 0x8c
 8001008:	2103      	movs	r1, #3
 800100a:	4893      	ldr	r0, [pc, #588]	; (8001258 <SPI_Init+0x2a8>)
 800100c:	f7ff fec8 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 8001010:	2305      	movs	r3, #5
 8001012:	228c      	movs	r2, #140	; 0x8c
 8001014:	2104      	movs	r1, #4
 8001016:	4890      	ldr	r0, [pc, #576]	; (8001258 <SPI_Init+0x2a8>)
 8001018:	f7ff fec2 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 800101c:	2305      	movs	r3, #5
 800101e:	228c      	movs	r2, #140	; 0x8c
 8001020:	2105      	movs	r1, #5
 8001022:	488d      	ldr	r0, [pc, #564]	; (8001258 <SPI_Init+0x2a8>)
 8001024:	f7ff febc 	bl	8000da0 <GPIO_Pin_Setup>
		}
	}
	if(SPI.SPI == SPI2)	//CK -> PB10 	//MISO -> PB14 	//MOSI -> PB15
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4a8c      	ldr	r2, [pc, #560]	; (800125c <SPI_Init+0x2ac>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d130      	bne.n	8001092 <SPI_Init+0xe2>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001030:	4b87      	ldr	r3, [pc, #540]	; (8001250 <SPI_Init+0x2a0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a86      	ldr	r2, [pc, #536]	; (8001250 <SPI_Init+0x2a0>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40

		if(SPI.pin_remap == 0)
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d012      	beq.n	800106e <SPI_Init+0xbe>
		{
	        GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8001048:	2305      	movs	r3, #5
 800104a:	228c      	movs	r2, #140	; 0x8c
 800104c:	210a      	movs	r1, #10
 800104e:	4882      	ldr	r0, [pc, #520]	; (8001258 <SPI_Init+0x2a8>)
 8001050:	f7ff fea6 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8001054:	2305      	movs	r3, #5
 8001056:	228c      	movs	r2, #140	; 0x8c
 8001058:	2102      	movs	r1, #2
 800105a:	4881      	ldr	r0, [pc, #516]	; (8001260 <SPI_Init+0x2b0>)
 800105c:	f7ff fea0 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8001060:	2305      	movs	r3, #5
 8001062:	228c      	movs	r2, #140	; 0x8c
 8001064:	2103      	movs	r1, #3
 8001066:	487e      	ldr	r0, [pc, #504]	; (8001260 <SPI_Init+0x2b0>)
 8001068:	f7ff fe9a 	bl	8000da0 <GPIO_Pin_Setup>
 800106c:	e011      	b.n	8001092 <SPI_Init+0xe2>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 13, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 800106e:	2305      	movs	r3, #5
 8001070:	228c      	movs	r2, #140	; 0x8c
 8001072:	210d      	movs	r1, #13
 8001074:	4878      	ldr	r0, [pc, #480]	; (8001258 <SPI_Init+0x2a8>)
 8001076:	f7ff fe93 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 14, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 800107a:	2305      	movs	r3, #5
 800107c:	228c      	movs	r2, #140	; 0x8c
 800107e:	210e      	movs	r1, #14
 8001080:	4875      	ldr	r0, [pc, #468]	; (8001258 <SPI_Init+0x2a8>)
 8001082:	f7ff fe8d 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 15, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 8001086:	2305      	movs	r3, #5
 8001088:	228c      	movs	r2, #140	; 0x8c
 800108a:	210f      	movs	r1, #15
 800108c:	4872      	ldr	r0, [pc, #456]	; (8001258 <SPI_Init+0x2a8>)
 800108e:	f7ff fe87 	bl	8000da0 <GPIO_Pin_Setup>
		}

	}
	if(SPI.SPI == SPI3)	//CK -> PB12 	//MISO -> PB4 	//MOSI -> PB5
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4a73      	ldr	r2, [pc, #460]	; (8001264 <SPI_Init+0x2b4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d130      	bne.n	80010fc <SPI_Init+0x14c>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 800109a:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <SPI_Init+0x2a0>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a6c      	ldr	r2, [pc, #432]	; (8001250 <SPI_Init+0x2a0>)
 80010a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40

		if(SPI.pin_remap == 0)
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	f083 0301 	eor.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d012      	beq.n	80010d8 <SPI_Init+0x128>
		{
	        GPIO_Pin_Setup(GPIOC, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80010b2:	2306      	movs	r3, #6
 80010b4:	228c      	movs	r2, #140	; 0x8c
 80010b6:	210a      	movs	r1, #10
 80010b8:	4869      	ldr	r0, [pc, #420]	; (8001260 <SPI_Init+0x2b0>)
 80010ba:	f7ff fe71 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80010be:	2306      	movs	r3, #6
 80010c0:	228c      	movs	r2, #140	; 0x8c
 80010c2:	210b      	movs	r1, #11
 80010c4:	4866      	ldr	r0, [pc, #408]	; (8001260 <SPI_Init+0x2b0>)
 80010c6:	f7ff fe6b 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80010ca:	2306      	movs	r3, #6
 80010cc:	228c      	movs	r2, #140	; 0x8c
 80010ce:	210c      	movs	r1, #12
 80010d0:	4863      	ldr	r0, [pc, #396]	; (8001260 <SPI_Init+0x2b0>)
 80010d2:	f7ff fe65 	bl	8000da0 <GPIO_Pin_Setup>
 80010d6:	e011      	b.n	80010fc <SPI_Init+0x14c>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80010d8:	2306      	movs	r3, #6
 80010da:	228c      	movs	r2, #140	; 0x8c
 80010dc:	2103      	movs	r1, #3
 80010de:	485e      	ldr	r0, [pc, #376]	; (8001258 <SPI_Init+0x2a8>)
 80010e0:	f7ff fe5e 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80010e4:	2306      	movs	r3, #6
 80010e6:	228c      	movs	r2, #140	; 0x8c
 80010e8:	2104      	movs	r1, #4
 80010ea:	485b      	ldr	r0, [pc, #364]	; (8001258 <SPI_Init+0x2a8>)
 80010ec:	f7ff fe58 	bl	8000da0 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 80010f0:	2306      	movs	r3, #6
 80010f2:	228c      	movs	r2, #140	; 0x8c
 80010f4:	2105      	movs	r1, #5
 80010f6:	4858      	ldr	r0, [pc, #352]	; (8001258 <SPI_Init+0x2a8>)
 80010f8:	f7ff fe52 	bl	8000da0 <GPIO_Pin_Setup>





	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001106:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.phase << 0;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	7d3b      	ldrb	r3, [r7, #20]
 800110e:	4619      	mov	r1, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.polarity << 1;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	7d7b      	ldrb	r3, [r7, #21]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4619      	mov	r1, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.mode  << 2;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4619      	mov	r1, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.frequency << 3;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4619      	mov	r1, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.Frame << 11;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	7ebb      	ldrb	r3, [r7, #26]
 800114c:	02db      	lsls	r3, r3, #11
 800114e:	4619      	mov	r1, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.CRC_Enable << 13;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	035b      	lsls	r3, r3, #13
 800115e:	4619      	mov	r1, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.LSB_MSB << 7;
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	7dbb      	ldrb	r3, [r7, #22]
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	4619      	mov	r1, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR2 &= ~(SPI_CR2_FRF);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f022 0210 	bic.w	r2, r2, #16
 8001180:	605a      	str	r2, [r3, #4]

	SPI.SPI -> CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800118c:	601a      	str	r2, [r3, #0]
//	SPI.SPI -> CR2 |= SPI_CR2_SSOE;


	if(SPI.mode == SPI_Master)
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d130      	bne.n	80011f6 <SPI_Init+0x246>
	{
		SPI.SPI -> CR1 |= SPI_CR1_MSTR ;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f042 0204 	orr.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
		switch (SPI.type)
 80011a0:	7b7b      	ldrb	r3, [r7, #13]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d01a      	beq.n	80011dc <SPI_Init+0x22c>
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	dc27      	bgt.n	80011fa <SPI_Init+0x24a>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <SPI_Init+0x204>
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d007      	beq.n	80011c2 <SPI_Init+0x212>
			case SPI_Half_Duplex_Master_RX:
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
				break;
			default:
				break;
 80011b2:	e022      	b.n	80011fa <SPI_Init+0x24a>
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011be:	601a      	str	r2, [r3, #0]
				break;
 80011c0:	e01c      	b.n	80011fc <SPI_Init+0x24c>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011cc:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011d8:	601a      	str	r2, [r3, #0]
				break;
 80011da:	e00f      	b.n	80011fc <SPI_Init+0x24c>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011e6:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011f2:	601a      	str	r2, [r3, #0]
				break;
 80011f4:	e002      	b.n	80011fc <SPI_Init+0x24c>
		}

	}
 80011f6:	bf00      	nop
 80011f8:	e000      	b.n	80011fc <SPI_Init+0x24c>
				break;
 80011fa:	bf00      	nop

	if(SPI.mode == SPI_Slave)
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d13f      	bne.n	8001282 <SPI_Init+0x2d2>
	{
	SPI.SPI -> CR1 &= ~SPI_CR1_MSTR;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f022 0204 	bic.w	r2, r2, #4
 800120c:	601a      	str	r2, [r3, #0]
	switch (SPI.type)
 800120e:	7b7b      	ldrb	r3, [r7, #13]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d029      	beq.n	8001268 <SPI_Init+0x2b8>
 8001214:	2b05      	cmp	r3, #5
 8001216:	dc36      	bgt.n	8001286 <SPI_Init+0x2d6>
 8001218:	2b03      	cmp	r3, #3
 800121a:	d002      	beq.n	8001222 <SPI_Init+0x272>
 800121c:	2b04      	cmp	r3, #4
 800121e:	d007      	beq.n	8001230 <SPI_Init+0x280>
		case SPI_Half_Duplex_Slave_RX:
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
			break;
		default:
			break;
 8001220:	e031      	b.n	8001286 <SPI_Init+0x2d6>
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800122c:	601a      	str	r2, [r3, #0]
			break;
 800122e:	e02b      	b.n	8001288 <SPI_Init+0x2d8>
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800123a:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001246:	601a      	str	r2, [r3, #0]
			break;
 8001248:	e01e      	b.n	8001288 <SPI_Init+0x2d8>
 800124a:	bf00      	nop
 800124c:	40013000 	.word	0x40013000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40003800 	.word	0x40003800
 8001260:	40020800 	.word	0x40020800
 8001264:	40003c00 	.word	0x40003c00
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001272:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800127e:	601a      	str	r2, [r3, #0]
			break;
 8001280:	e002      	b.n	8001288 <SPI_Init+0x2d8>
	 }
	}
 8001282:	bf00      	nop
 8001284:	e000      	b.n	8001288 <SPI_Init+0x2d8>
			break;
 8001286:	bf00      	nop


	GPIO_Pin_Setup(SPI.nCSS_Port, SPI.nCSS_pin, GENERAL_PURPOSE_OUTPUT_PUSHPULL_PULLUP, NONE);
 8001288:	69f8      	ldr	r0, [r7, #28]
 800128a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800128e:	2300      	movs	r3, #0
 8001290:	224d      	movs	r2, #77	; 0x4d
 8001292:	f7ff fd85 	bl	8000da0 <GPIO_Pin_Setup>

	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f897 2020 	ldrb.w	r2, [r7, #32]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe5e 	bl	8000f60 <GPIO_Pin_High>

	SPI.SPI -> CR1 |= SPI_CR1_SPE;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ae:	601a      	str	r2, [r3, #0]

}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012b8:	b004      	add	sp, #16
 80012ba:	4770      	bx	lr

080012bc <SPI_CSS_Low>:


void SPI_CSS_Low(SPI_Config SPI)
{
 80012bc:	b084      	sub	sp, #16
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	f107 0c08 	add.w	ip, r7, #8
 80012c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_Low(SPI.nCSS_Port, SPI.nCSS_pin);
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe56 	bl	8000f84 <GPIO_Pin_Low>
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012e0:	b004      	add	sp, #16
 80012e2:	4770      	bx	lr

080012e4 <SPI_CSS_High>:


void SPI_CSS_High(SPI_Config SPI)
{
 80012e4:	b084      	sub	sp, #16
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	f107 0c08 	add.w	ip, r7, #8
 80012ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe30 	bl	8000f60 <GPIO_Pin_High>
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001308:	b004      	add	sp, #16
 800130a:	4770      	bx	lr

0800130c <SPI_TRX_Data>:


//
int SPI_TRX_Data(SPI_Config SPI, int data)
{
 800130c:	b084      	sub	sp, #16
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	f107 0c10 	add.w	ip, r7, #16
 8001318:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int temp = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
	while (!(SPI.SPI->SR & SPI_SR_TXE));
 8001320:	bf00      	nop
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f9      	beq.n	8001322 <SPI_TRX_Data+0x16>
	SPI.SPI -> DR = data;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001332:	60da      	str	r2, [r3, #12]
	while (!(SPI.SPI->SR & SPI_SR_RXNE));
 8001334:	bf00      	nop
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f9      	beq.n	8001336 <SPI_TRX_Data+0x2a>
	temp = SPI.SPI -> DR;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	607b      	str	r3, [r7, #4]
	while (!(SPI.SPI->SR & SPI_SR_TXE));
 8001348:	bf00      	nop
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f9      	beq.n	800134a <SPI_TRX_Data+0x3e>
	while (SPI.SPI->SR & SPI_SR_BSY);
 8001356:	bf00      	nop
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f9      	bne.n	8001358 <SPI_TRX_Data+0x4c>
	return temp;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	b004      	add	sp, #16
 8001372:	4770      	bx	lr

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ffc2 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <MCU_Clock_Setup>:
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001412:	2304      	movs	r3, #4
 8001414:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8001416:	23a8      	movs	r3, #168	; 0xa8
 8001418:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 800141e:	2307      	movs	r3, #7
 8001420:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <MCU_Clock_Setup+0x10c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <MCU_Clock_Setup+0x10c>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8001434:	bf00      	nop
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f9      	beq.n	8001436 <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a34      	ldr	r2, [pc, #208]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 800144e:	4b33      	ldr	r3, [pc, #204]	; (800151c <MCU_Clock_Setup+0x110>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a32      	ldr	r2, [pc, #200]	; (800151c <MCU_Clock_Setup+0x110>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <MCU_Clock_Setup+0x114>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a30      	ldr	r2, [pc, #192]	; (8001520 <MCU_Clock_Setup+0x114>)
 8001460:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001464:	f043 0305 	orr.w	r3, r3, #5
 8001468:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MCU_Clock_Setup+0x10c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	793a      	ldrb	r2, [r7, #4]
 8001470:	0611      	lsls	r1, r2, #24
 8001472:	797a      	ldrb	r2, [r7, #5]
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4311      	orrs	r1, r2
 8001478:	79ba      	ldrb	r2, [r7, #6]
 800147a:	0192      	lsls	r2, r2, #6
 800147c:	4311      	orrs	r1, r2
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	430a      	orrs	r2, r1
 8001482:	4611      	mov	r1, r2
 8001484:	4a24      	ldr	r2, [pc, #144]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001486:	430b      	orrs	r3, r1
 8001488:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MCU_Clock_Setup+0x10c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a22      	ldr	r2, [pc, #136]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001498:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <MCU_Clock_Setup+0x10c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014a4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80014a8:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b4:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c0:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80014c2:	bf00      	nop
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f9      	beq.n	80014c4 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a10      	ldr	r2, [pc, #64]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80014dc:	bf00      	nop
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MCU_Clock_Setup+0x10c>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d1f9      	bne.n	80014de <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80014ea:	f000 f915 	bl	8001718 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MCU_Clock_Setup+0x118>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <MCU_Clock_Setup+0x11c>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff63 	bl	80013c8 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <MCU_Clock_Setup+0x10c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000
 8001520:	40023c00 	.word	0x40023c00
 8001524:	20000000 	.word	0x20000000
 8001528:	18618619 	.word	0x18618619

0800152c <Delay_Config>:
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Delay_Config+0x2c>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <Delay_Config+0x2c>)
 8001538:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800153c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <Delay_Config+0x2c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <Delay_Config+0x2c>)
 8001546:	2205      	movs	r2, #5
 8001548:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <Delay_ms>:

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8001566:	edd7 7a01 	vldr	s15, [r7, #4]
 800156a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80015b0 <Delay_ms+0x54>
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001576:	ee17 3a90 	vmov	r3, s15
 800157a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <Delay_ms+0x58>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <Delay_ms+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <Delay_ms+0x58>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <Delay_ms+0x58>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001594:	bf00      	nop
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <Delay_ms+0x58>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f9      	beq.n	8001596 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	48241000 	.word	0x48241000
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <main>:




int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80015be:	af00      	add	r7, sp, #0
	int MF, ID;

	MCU_Clock_Setup();
 80015c0:	f7ff ff24 	bl	800140c <MCU_Clock_Setup>
	Console_Init(USART1, 115200);
 80015c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80015c8:	482a      	ldr	r0, [pc, #168]	; (8001674 <main+0xbc>)
 80015ca:	f7fe fe69 	bl	80002a0 <Console_Init>
	Delay_Config();
 80015ce:	f7ff ffad 	bl	800152c <Delay_Config>

	W25QX_Init(SPI1, 1);
 80015d2:	2101      	movs	r1, #1
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <main+0xc0>)
 80015d6:	f7ff fa53 	bl	8000a80 <W25QX_Init>
	W25Qx_Chip_Erase();
 80015da:	f7ff f9c1 	bl	8000960 <W25Qx_Chip_Erase>
//	W25Qx_Block_Erase_32KB(0x000000);
//	W25QX_Read(&MF, &ID);

	int *data[255];

	for(int i = 0; i < 255; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80015e4:	e010      	b.n	8001608 <main+0x50>
	{
		*data[i] = i+1;
 80015e6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015ea:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80015ee:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80015f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f6:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80015fa:	3201      	adds	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 255; i++)
 80015fe:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001608:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800160c:	2bfe      	cmp	r3, #254	; 0xfe
 800160e:	ddea      	ble.n	80015e6 <main+0x2e>
	}

	W25Qx_Write_Page(0x000000, data, 255);
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	4619      	mov	r1, r3
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fa7c 	bl	8000b14 <W25Qx_Write_Page>


	int i = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400

    /* Loop forever */
	for(;;)
	{
//		printConsole(USART1, "0x%x, 0x%x \r\n",MF,ID);
		if((i % 255)==0)
 8001622:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <main+0xc4>)
 8001628:	fb83 1302 	smull	r1, r3, r3, r2
 800162c:	4413      	add	r3, r2
 800162e:	11d9      	asrs	r1, r3, #7
 8001630:	17d3      	asrs	r3, r2, #31
 8001632:	1ac9      	subs	r1, r1, r3
 8001634:	460b      	mov	r3, r1
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	1a5b      	subs	r3, r3, r1
 800163a:	1ad1      	subs	r1, r2, r3
 800163c:	2900      	cmp	r1, #0
 800163e:	d103      	bne.n	8001648 <main+0x90>
		{
			printConsole(USART1,"\r\n");
 8001640:	490f      	ldr	r1, [pc, #60]	; (8001680 <main+0xc8>)
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <main+0xbc>)
 8001644:	f7fe ff86 	bl	8000554 <printConsole>
		}
		printConsole(USART1, "0x%x,",W25Qx_Read_Page(i));
 8001648:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb0d 	bl	8000c6c <W25Qx_Read_Page>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	490b      	ldr	r1, [pc, #44]	; (8001684 <main+0xcc>)
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <main+0xbc>)
 800165a:	f7fe ff7b 	bl	8000554 <printConsole>


		Delay_ms(10);
 800165e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001662:	f7ff ff7b 	bl	800155c <Delay_ms>
		i++;
 8001666:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800166a:	3301      	adds	r3, #1
 800166c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
		if((i % 255)==0)
 8001670:	e7d7      	b.n	8001622 <main+0x6a>
 8001672:	bf00      	nop
 8001674:	40011000 	.word	0x40011000
 8001678:	40013000 	.word	0x40013000
 800167c:	80808081 	.word	0x80808081
 8001680:	080021b4 	.word	0x080021b4
 8001684:	080021b8 	.word	0x080021b8

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f000 f8d8 	bl	800186c <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20020000 	.word	0x20020000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000114 	.word	0x20000114
 80016f0:	20000128 	.word	0x20000128

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	2302      	movs	r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	2302      	movs	r3, #2
 8001730:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <SystemCoreClockUpdate+0xec>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d011      	beq.n	8001766 <SystemCoreClockUpdate+0x4e>
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d844      	bhi.n	80017d2 <SystemCoreClockUpdate+0xba>
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <SystemCoreClockUpdate+0x3e>
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d004      	beq.n	800175e <SystemCoreClockUpdate+0x46>
 8001754:	e03d      	b.n	80017d2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <SystemCoreClockUpdate+0xf0>)
 8001758:	4a2c      	ldr	r2, [pc, #176]	; (800180c <SystemCoreClockUpdate+0xf4>)
 800175a:	601a      	str	r2, [r3, #0]
      break;
 800175c:	e03d      	b.n	80017da <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <SystemCoreClockUpdate+0xf0>)
 8001760:	4a2b      	ldr	r2, [pc, #172]	; (8001810 <SystemCoreClockUpdate+0xf8>)
 8001762:	601a      	str	r2, [r3, #0]
      break;
 8001764:	e039      	b.n	80017da <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <SystemCoreClockUpdate+0xec>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	0d9b      	lsrs	r3, r3, #22
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <SystemCoreClockUpdate+0xec>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <SystemCoreClockUpdate+0xf8>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <SystemCoreClockUpdate+0xec>)
 800178c:	6852      	ldr	r2, [r2, #4]
 800178e:	0992      	lsrs	r2, r2, #6
 8001790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e00b      	b.n	80017b4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <SystemCoreClockUpdate+0xf4>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <SystemCoreClockUpdate+0xec>)
 80017a6:	6852      	ldr	r2, [r2, #4]
 80017a8:	0992      	lsrs	r2, r2, #6
 80017aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <SystemCoreClockUpdate+0xec>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <SystemCoreClockUpdate+0xf0>)
 80017ce:	6013      	str	r3, [r2, #0]
      break;
 80017d0:	e003      	b.n	80017da <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <SystemCoreClockUpdate+0xf0>)
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <SystemCoreClockUpdate+0xf4>)
 80017d6:	601a      	str	r2, [r3, #0]
      break;
 80017d8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <SystemCoreClockUpdate+0xec>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <SystemCoreClockUpdate+0xfc>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <SystemCoreClockUpdate+0xf0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <SystemCoreClockUpdate+0xf0>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40023800 	.word	0x40023800
 8001808:	20000000 	.word	0x20000000
 800180c:	00f42400 	.word	0x00f42400
 8001810:	017d7840 	.word	0x017d7840
 8001814:	080021c0 	.word	0x080021c0

08001818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800181c:	f7ff ff6a 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <LoopForever+0x6>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	; (8001858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <LoopForever+0xe>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	; (8001864 <LoopForever+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001846:	f000 f817 	bl	8001878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184a:	f7ff feb5 	bl	80015b8 <main>

0800184e <LoopForever>:

LoopForever:
  b LoopForever
 800184e:	e7fe      	b.n	800184e <LoopForever>
  ldr   r0, =_estack
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800185c:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 8001860:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001864:	20000128 	.word	0x20000128

08001868 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <__errno>:
 800186c:	4b01      	ldr	r3, [pc, #4]	; (8001874 <__errno+0x8>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000004 	.word	0x20000004

08001878 <__libc_init_array>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	4d0d      	ldr	r5, [pc, #52]	; (80018b0 <__libc_init_array+0x38>)
 800187c:	4c0d      	ldr	r4, [pc, #52]	; (80018b4 <__libc_init_array+0x3c>)
 800187e:	1b64      	subs	r4, r4, r5
 8001880:	10a4      	asrs	r4, r4, #2
 8001882:	2600      	movs	r6, #0
 8001884:	42a6      	cmp	r6, r4
 8001886:	d109      	bne.n	800189c <__libc_init_array+0x24>
 8001888:	4d0b      	ldr	r5, [pc, #44]	; (80018b8 <__libc_init_array+0x40>)
 800188a:	4c0c      	ldr	r4, [pc, #48]	; (80018bc <__libc_init_array+0x44>)
 800188c:	f000 fc86 	bl	800219c <_init>
 8001890:	1b64      	subs	r4, r4, r5
 8001892:	10a4      	asrs	r4, r4, #2
 8001894:	2600      	movs	r6, #0
 8001896:	42a6      	cmp	r6, r4
 8001898:	d105      	bne.n	80018a6 <__libc_init_array+0x2e>
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a0:	4798      	blx	r3
 80018a2:	3601      	adds	r6, #1
 80018a4:	e7ee      	b.n	8001884 <__libc_init_array+0xc>
 80018a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018aa:	4798      	blx	r3
 80018ac:	3601      	adds	r6, #1
 80018ae:	e7f2      	b.n	8001896 <__libc_init_array+0x1e>
 80018b0:	08002204 	.word	0x08002204
 80018b4:	08002204 	.word	0x08002204
 80018b8:	08002204 	.word	0x08002204
 80018bc:	08002208 	.word	0x08002208

080018c0 <_vsiprintf_r>:
 80018c0:	b500      	push	{lr}
 80018c2:	b09b      	sub	sp, #108	; 0x6c
 80018c4:	9100      	str	r1, [sp, #0]
 80018c6:	9104      	str	r1, [sp, #16]
 80018c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80018cc:	9105      	str	r1, [sp, #20]
 80018ce:	9102      	str	r1, [sp, #8]
 80018d0:	4905      	ldr	r1, [pc, #20]	; (80018e8 <_vsiprintf_r+0x28>)
 80018d2:	9103      	str	r1, [sp, #12]
 80018d4:	4669      	mov	r1, sp
 80018d6:	f000 f86f 	bl	80019b8 <_svfiprintf_r>
 80018da:	9b00      	ldr	r3, [sp, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	b01b      	add	sp, #108	; 0x6c
 80018e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018e6:	bf00      	nop
 80018e8:	ffff0208 	.word	0xffff0208

080018ec <vsiprintf>:
 80018ec:	4613      	mov	r3, r2
 80018ee:	460a      	mov	r2, r1
 80018f0:	4601      	mov	r1, r0
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <vsiprintf+0x10>)
 80018f4:	6800      	ldr	r0, [r0, #0]
 80018f6:	f7ff bfe3 	b.w	80018c0 <_vsiprintf_r>
 80018fa:	bf00      	nop
 80018fc:	20000004 	.word	0x20000004

08001900 <__ssputs_r>:
 8001900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001904:	688e      	ldr	r6, [r1, #8]
 8001906:	429e      	cmp	r6, r3
 8001908:	4682      	mov	sl, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4690      	mov	r8, r2
 800190e:	461f      	mov	r7, r3
 8001910:	d838      	bhi.n	8001984 <__ssputs_r+0x84>
 8001912:	898a      	ldrh	r2, [r1, #12]
 8001914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001918:	d032      	beq.n	8001980 <__ssputs_r+0x80>
 800191a:	6825      	ldr	r5, [r4, #0]
 800191c:	6909      	ldr	r1, [r1, #16]
 800191e:	eba5 0901 	sub.w	r9, r5, r1
 8001922:	6965      	ldr	r5, [r4, #20]
 8001924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800192c:	3301      	adds	r3, #1
 800192e:	444b      	add	r3, r9
 8001930:	106d      	asrs	r5, r5, #1
 8001932:	429d      	cmp	r5, r3
 8001934:	bf38      	it	cc
 8001936:	461d      	movcc	r5, r3
 8001938:	0553      	lsls	r3, r2, #21
 800193a:	d531      	bpl.n	80019a0 <__ssputs_r+0xa0>
 800193c:	4629      	mov	r1, r5
 800193e:	f000 fb63 	bl	8002008 <_malloc_r>
 8001942:	4606      	mov	r6, r0
 8001944:	b950      	cbnz	r0, 800195c <__ssputs_r+0x5c>
 8001946:	230c      	movs	r3, #12
 8001948:	f8ca 3000 	str.w	r3, [sl]
 800194c:	89a3      	ldrh	r3, [r4, #12]
 800194e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001952:	81a3      	strh	r3, [r4, #12]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800195c:	6921      	ldr	r1, [r4, #16]
 800195e:	464a      	mov	r2, r9
 8001960:	f000 fabe 	bl	8001ee0 <memcpy>
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800196a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196e:	81a3      	strh	r3, [r4, #12]
 8001970:	6126      	str	r6, [r4, #16]
 8001972:	6165      	str	r5, [r4, #20]
 8001974:	444e      	add	r6, r9
 8001976:	eba5 0509 	sub.w	r5, r5, r9
 800197a:	6026      	str	r6, [r4, #0]
 800197c:	60a5      	str	r5, [r4, #8]
 800197e:	463e      	mov	r6, r7
 8001980:	42be      	cmp	r6, r7
 8001982:	d900      	bls.n	8001986 <__ssputs_r+0x86>
 8001984:	463e      	mov	r6, r7
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	4632      	mov	r2, r6
 800198a:	4641      	mov	r1, r8
 800198c:	f000 fab6 	bl	8001efc <memmove>
 8001990:	68a3      	ldr	r3, [r4, #8]
 8001992:	1b9b      	subs	r3, r3, r6
 8001994:	60a3      	str	r3, [r4, #8]
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	4433      	add	r3, r6
 800199a:	6023      	str	r3, [r4, #0]
 800199c:	2000      	movs	r0, #0
 800199e:	e7db      	b.n	8001958 <__ssputs_r+0x58>
 80019a0:	462a      	mov	r2, r5
 80019a2:	f000 fba5 	bl	80020f0 <_realloc_r>
 80019a6:	4606      	mov	r6, r0
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d1e1      	bne.n	8001970 <__ssputs_r+0x70>
 80019ac:	6921      	ldr	r1, [r4, #16]
 80019ae:	4650      	mov	r0, sl
 80019b0:	f000 fabe 	bl	8001f30 <_free_r>
 80019b4:	e7c7      	b.n	8001946 <__ssputs_r+0x46>
	...

080019b8 <_svfiprintf_r>:
 80019b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019bc:	4698      	mov	r8, r3
 80019be:	898b      	ldrh	r3, [r1, #12]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	b09d      	sub	sp, #116	; 0x74
 80019c4:	4607      	mov	r7, r0
 80019c6:	460d      	mov	r5, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	d50e      	bpl.n	80019ea <_svfiprintf_r+0x32>
 80019cc:	690b      	ldr	r3, [r1, #16]
 80019ce:	b963      	cbnz	r3, 80019ea <_svfiprintf_r+0x32>
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	f000 fb19 	bl	8002008 <_malloc_r>
 80019d6:	6028      	str	r0, [r5, #0]
 80019d8:	6128      	str	r0, [r5, #16]
 80019da:	b920      	cbnz	r0, 80019e6 <_svfiprintf_r+0x2e>
 80019dc:	230c      	movs	r3, #12
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	e0d1      	b.n	8001b8a <_svfiprintf_r+0x1d2>
 80019e6:	2340      	movs	r3, #64	; 0x40
 80019e8:	616b      	str	r3, [r5, #20]
 80019ea:	2300      	movs	r3, #0
 80019ec:	9309      	str	r3, [sp, #36]	; 0x24
 80019ee:	2320      	movs	r3, #32
 80019f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80019f8:	2330      	movs	r3, #48	; 0x30
 80019fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001ba4 <_svfiprintf_r+0x1ec>
 80019fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a02:	f04f 0901 	mov.w	r9, #1
 8001a06:	4623      	mov	r3, r4
 8001a08:	469a      	mov	sl, r3
 8001a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a0e:	b10a      	cbz	r2, 8001a14 <_svfiprintf_r+0x5c>
 8001a10:	2a25      	cmp	r2, #37	; 0x25
 8001a12:	d1f9      	bne.n	8001a08 <_svfiprintf_r+0x50>
 8001a14:	ebba 0b04 	subs.w	fp, sl, r4
 8001a18:	d00b      	beq.n	8001a32 <_svfiprintf_r+0x7a>
 8001a1a:	465b      	mov	r3, fp
 8001a1c:	4622      	mov	r2, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4638      	mov	r0, r7
 8001a22:	f7ff ff6d 	bl	8001900 <__ssputs_r>
 8001a26:	3001      	adds	r0, #1
 8001a28:	f000 80aa 	beq.w	8001b80 <_svfiprintf_r+0x1c8>
 8001a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a2e:	445a      	add	r2, fp
 8001a30:	9209      	str	r2, [sp, #36]	; 0x24
 8001a32:	f89a 3000 	ldrb.w	r3, [sl]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80a2 	beq.w	8001b80 <_svfiprintf_r+0x1c8>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a46:	f10a 0a01 	add.w	sl, sl, #1
 8001a4a:	9304      	str	r3, [sp, #16]
 8001a4c:	9307      	str	r3, [sp, #28]
 8001a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a52:	931a      	str	r3, [sp, #104]	; 0x68
 8001a54:	4654      	mov	r4, sl
 8001a56:	2205      	movs	r2, #5
 8001a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a5c:	4851      	ldr	r0, [pc, #324]	; (8001ba4 <_svfiprintf_r+0x1ec>)
 8001a5e:	f7fe fbcf 	bl	8000200 <memchr>
 8001a62:	9a04      	ldr	r2, [sp, #16]
 8001a64:	b9d8      	cbnz	r0, 8001a9e <_svfiprintf_r+0xe6>
 8001a66:	06d0      	lsls	r0, r2, #27
 8001a68:	bf44      	itt	mi
 8001a6a:	2320      	movmi	r3, #32
 8001a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a70:	0711      	lsls	r1, r2, #28
 8001a72:	bf44      	itt	mi
 8001a74:	232b      	movmi	r3, #43	; 0x2b
 8001a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8001a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a80:	d015      	beq.n	8001aae <_svfiprintf_r+0xf6>
 8001a82:	9a07      	ldr	r2, [sp, #28]
 8001a84:	4654      	mov	r4, sl
 8001a86:	2000      	movs	r0, #0
 8001a88:	f04f 0c0a 	mov.w	ip, #10
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a92:	3b30      	subs	r3, #48	; 0x30
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d94e      	bls.n	8001b36 <_svfiprintf_r+0x17e>
 8001a98:	b1b0      	cbz	r0, 8001ac8 <_svfiprintf_r+0x110>
 8001a9a:	9207      	str	r2, [sp, #28]
 8001a9c:	e014      	b.n	8001ac8 <_svfiprintf_r+0x110>
 8001a9e:	eba0 0308 	sub.w	r3, r0, r8
 8001aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	9304      	str	r3, [sp, #16]
 8001aaa:	46a2      	mov	sl, r4
 8001aac:	e7d2      	b.n	8001a54 <_svfiprintf_r+0x9c>
 8001aae:	9b03      	ldr	r3, [sp, #12]
 8001ab0:	1d19      	adds	r1, r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	9103      	str	r1, [sp, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bfbb      	ittet	lt
 8001aba:	425b      	neglt	r3, r3
 8001abc:	f042 0202 	orrlt.w	r2, r2, #2
 8001ac0:	9307      	strge	r3, [sp, #28]
 8001ac2:	9307      	strlt	r3, [sp, #28]
 8001ac4:	bfb8      	it	lt
 8001ac6:	9204      	strlt	r2, [sp, #16]
 8001ac8:	7823      	ldrb	r3, [r4, #0]
 8001aca:	2b2e      	cmp	r3, #46	; 0x2e
 8001acc:	d10c      	bne.n	8001ae8 <_svfiprintf_r+0x130>
 8001ace:	7863      	ldrb	r3, [r4, #1]
 8001ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ad2:	d135      	bne.n	8001b40 <_svfiprintf_r+0x188>
 8001ad4:	9b03      	ldr	r3, [sp, #12]
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	9203      	str	r2, [sp, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bfb8      	it	lt
 8001ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ae4:	3402      	adds	r4, #2
 8001ae6:	9305      	str	r3, [sp, #20]
 8001ae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001bb4 <_svfiprintf_r+0x1fc>
 8001aec:	7821      	ldrb	r1, [r4, #0]
 8001aee:	2203      	movs	r2, #3
 8001af0:	4650      	mov	r0, sl
 8001af2:	f7fe fb85 	bl	8000200 <memchr>
 8001af6:	b140      	cbz	r0, 8001b0a <_svfiprintf_r+0x152>
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	eba0 000a 	sub.w	r0, r0, sl
 8001afe:	fa03 f000 	lsl.w	r0, r3, r0
 8001b02:	9b04      	ldr	r3, [sp, #16]
 8001b04:	4303      	orrs	r3, r0
 8001b06:	3401      	adds	r4, #1
 8001b08:	9304      	str	r3, [sp, #16]
 8001b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b0e:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <_svfiprintf_r+0x1f0>)
 8001b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b14:	2206      	movs	r2, #6
 8001b16:	f7fe fb73 	bl	8000200 <memchr>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d038      	beq.n	8001b90 <_svfiprintf_r+0x1d8>
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <_svfiprintf_r+0x1f4>)
 8001b20:	bb1b      	cbnz	r3, 8001b6a <_svfiprintf_r+0x1b2>
 8001b22:	9b03      	ldr	r3, [sp, #12]
 8001b24:	3307      	adds	r3, #7
 8001b26:	f023 0307 	bic.w	r3, r3, #7
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	9303      	str	r3, [sp, #12]
 8001b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b30:	4433      	add	r3, r6
 8001b32:	9309      	str	r3, [sp, #36]	; 0x24
 8001b34:	e767      	b.n	8001a06 <_svfiprintf_r+0x4e>
 8001b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e7a5      	b.n	8001a8c <_svfiprintf_r+0xd4>
 8001b40:	2300      	movs	r3, #0
 8001b42:	3401      	adds	r4, #1
 8001b44:	9305      	str	r3, [sp, #20]
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 0c0a 	mov.w	ip, #10
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b52:	3a30      	subs	r2, #48	; 0x30
 8001b54:	2a09      	cmp	r2, #9
 8001b56:	d903      	bls.n	8001b60 <_svfiprintf_r+0x1a8>
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0c5      	beq.n	8001ae8 <_svfiprintf_r+0x130>
 8001b5c:	9105      	str	r1, [sp, #20]
 8001b5e:	e7c3      	b.n	8001ae8 <_svfiprintf_r+0x130>
 8001b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b64:	4604      	mov	r4, r0
 8001b66:	2301      	movs	r3, #1
 8001b68:	e7f0      	b.n	8001b4c <_svfiprintf_r+0x194>
 8001b6a:	ab03      	add	r3, sp, #12
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	462a      	mov	r2, r5
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <_svfiprintf_r+0x1f8>)
 8001b72:	a904      	add	r1, sp, #16
 8001b74:	4638      	mov	r0, r7
 8001b76:	f3af 8000 	nop.w
 8001b7a:	1c42      	adds	r2, r0, #1
 8001b7c:	4606      	mov	r6, r0
 8001b7e:	d1d6      	bne.n	8001b2e <_svfiprintf_r+0x176>
 8001b80:	89ab      	ldrh	r3, [r5, #12]
 8001b82:	065b      	lsls	r3, r3, #25
 8001b84:	f53f af2c 	bmi.w	80019e0 <_svfiprintf_r+0x28>
 8001b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b8a:	b01d      	add	sp, #116	; 0x74
 8001b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b90:	ab03      	add	r3, sp, #12
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	462a      	mov	r2, r5
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <_svfiprintf_r+0x1f8>)
 8001b98:	a904      	add	r1, sp, #16
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	f000 f87a 	bl	8001c94 <_printf_i>
 8001ba0:	e7eb      	b.n	8001b7a <_svfiprintf_r+0x1c2>
 8001ba2:	bf00      	nop
 8001ba4:	080021d0 	.word	0x080021d0
 8001ba8:	080021da 	.word	0x080021da
 8001bac:	00000000 	.word	0x00000000
 8001bb0:	08001901 	.word	0x08001901
 8001bb4:	080021d6 	.word	0x080021d6

08001bb8 <_printf_common>:
 8001bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bbc:	4616      	mov	r6, r2
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	688a      	ldr	r2, [r1, #8]
 8001bc2:	690b      	ldr	r3, [r1, #16]
 8001bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	bfb8      	it	lt
 8001bcc:	4613      	movlt	r3, r2
 8001bce:	6033      	str	r3, [r6, #0]
 8001bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bd4:	4607      	mov	r7, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	b10a      	cbz	r2, 8001bde <_printf_common+0x26>
 8001bda:	3301      	adds	r3, #1
 8001bdc:	6033      	str	r3, [r6, #0]
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	0699      	lsls	r1, r3, #26
 8001be2:	bf42      	ittt	mi
 8001be4:	6833      	ldrmi	r3, [r6, #0]
 8001be6:	3302      	addmi	r3, #2
 8001be8:	6033      	strmi	r3, [r6, #0]
 8001bea:	6825      	ldr	r5, [r4, #0]
 8001bec:	f015 0506 	ands.w	r5, r5, #6
 8001bf0:	d106      	bne.n	8001c00 <_printf_common+0x48>
 8001bf2:	f104 0a19 	add.w	sl, r4, #25
 8001bf6:	68e3      	ldr	r3, [r4, #12]
 8001bf8:	6832      	ldr	r2, [r6, #0]
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	42ab      	cmp	r3, r5
 8001bfe:	dc26      	bgt.n	8001c4e <_printf_common+0x96>
 8001c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c04:	1e13      	subs	r3, r2, #0
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	bf18      	it	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	0692      	lsls	r2, r2, #26
 8001c0e:	d42b      	bmi.n	8001c68 <_printf_common+0xb0>
 8001c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c14:	4649      	mov	r1, r9
 8001c16:	4638      	mov	r0, r7
 8001c18:	47c0      	blx	r8
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	d01e      	beq.n	8001c5c <_printf_common+0xa4>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	68e5      	ldr	r5, [r4, #12]
 8001c22:	6832      	ldr	r2, [r6, #0]
 8001c24:	f003 0306 	and.w	r3, r3, #6
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	bf08      	it	eq
 8001c2c:	1aad      	subeq	r5, r5, r2
 8001c2e:	68a3      	ldr	r3, [r4, #8]
 8001c30:	6922      	ldr	r2, [r4, #16]
 8001c32:	bf0c      	ite	eq
 8001c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c38:	2500      	movne	r5, #0
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	bfc4      	itt	gt
 8001c3e:	1a9b      	subgt	r3, r3, r2
 8001c40:	18ed      	addgt	r5, r5, r3
 8001c42:	2600      	movs	r6, #0
 8001c44:	341a      	adds	r4, #26
 8001c46:	42b5      	cmp	r5, r6
 8001c48:	d11a      	bne.n	8001c80 <_printf_common+0xc8>
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	e008      	b.n	8001c60 <_printf_common+0xa8>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	4652      	mov	r2, sl
 8001c52:	4649      	mov	r1, r9
 8001c54:	4638      	mov	r0, r7
 8001c56:	47c0      	blx	r8
 8001c58:	3001      	adds	r0, #1
 8001c5a:	d103      	bne.n	8001c64 <_printf_common+0xac>
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c64:	3501      	adds	r5, #1
 8001c66:	e7c6      	b.n	8001bf6 <_printf_common+0x3e>
 8001c68:	18e1      	adds	r1, r4, r3
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	2030      	movs	r0, #48	; 0x30
 8001c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c72:	4422      	add	r2, r4
 8001c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	e7c7      	b.n	8001c10 <_printf_common+0x58>
 8001c80:	2301      	movs	r3, #1
 8001c82:	4622      	mov	r2, r4
 8001c84:	4649      	mov	r1, r9
 8001c86:	4638      	mov	r0, r7
 8001c88:	47c0      	blx	r8
 8001c8a:	3001      	adds	r0, #1
 8001c8c:	d0e6      	beq.n	8001c5c <_printf_common+0xa4>
 8001c8e:	3601      	adds	r6, #1
 8001c90:	e7d9      	b.n	8001c46 <_printf_common+0x8e>
	...

08001c94 <_printf_i>:
 8001c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c98:	7e0f      	ldrb	r7, [r1, #24]
 8001c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c9c:	2f78      	cmp	r7, #120	; 0x78
 8001c9e:	4691      	mov	r9, r2
 8001ca0:	4680      	mov	r8, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	469a      	mov	sl, r3
 8001ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001caa:	d807      	bhi.n	8001cbc <_printf_i+0x28>
 8001cac:	2f62      	cmp	r7, #98	; 0x62
 8001cae:	d80a      	bhi.n	8001cc6 <_printf_i+0x32>
 8001cb0:	2f00      	cmp	r7, #0
 8001cb2:	f000 80d8 	beq.w	8001e66 <_printf_i+0x1d2>
 8001cb6:	2f58      	cmp	r7, #88	; 0x58
 8001cb8:	f000 80a3 	beq.w	8001e02 <_printf_i+0x16e>
 8001cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cc4:	e03a      	b.n	8001d3c <_printf_i+0xa8>
 8001cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cca:	2b15      	cmp	r3, #21
 8001ccc:	d8f6      	bhi.n	8001cbc <_printf_i+0x28>
 8001cce:	a101      	add	r1, pc, #4	; (adr r1, 8001cd4 <_printf_i+0x40>)
 8001cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cd4:	08001d2d 	.word	0x08001d2d
 8001cd8:	08001d41 	.word	0x08001d41
 8001cdc:	08001cbd 	.word	0x08001cbd
 8001ce0:	08001cbd 	.word	0x08001cbd
 8001ce4:	08001cbd 	.word	0x08001cbd
 8001ce8:	08001cbd 	.word	0x08001cbd
 8001cec:	08001d41 	.word	0x08001d41
 8001cf0:	08001cbd 	.word	0x08001cbd
 8001cf4:	08001cbd 	.word	0x08001cbd
 8001cf8:	08001cbd 	.word	0x08001cbd
 8001cfc:	08001cbd 	.word	0x08001cbd
 8001d00:	08001e4d 	.word	0x08001e4d
 8001d04:	08001d71 	.word	0x08001d71
 8001d08:	08001e2f 	.word	0x08001e2f
 8001d0c:	08001cbd 	.word	0x08001cbd
 8001d10:	08001cbd 	.word	0x08001cbd
 8001d14:	08001e6f 	.word	0x08001e6f
 8001d18:	08001cbd 	.word	0x08001cbd
 8001d1c:	08001d71 	.word	0x08001d71
 8001d20:	08001cbd 	.word	0x08001cbd
 8001d24:	08001cbd 	.word	0x08001cbd
 8001d28:	08001e37 	.word	0x08001e37
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	1d1a      	adds	r2, r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	602a      	str	r2, [r5, #0]
 8001d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0a3      	b.n	8001e88 <_printf_i+0x1f4>
 8001d40:	6820      	ldr	r0, [r4, #0]
 8001d42:	6829      	ldr	r1, [r5, #0]
 8001d44:	0606      	lsls	r6, r0, #24
 8001d46:	f101 0304 	add.w	r3, r1, #4
 8001d4a:	d50a      	bpl.n	8001d62 <_printf_i+0xce>
 8001d4c:	680e      	ldr	r6, [r1, #0]
 8001d4e:	602b      	str	r3, [r5, #0]
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	da03      	bge.n	8001d5c <_printf_i+0xc8>
 8001d54:	232d      	movs	r3, #45	; 0x2d
 8001d56:	4276      	negs	r6, r6
 8001d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d5c:	485e      	ldr	r0, [pc, #376]	; (8001ed8 <_printf_i+0x244>)
 8001d5e:	230a      	movs	r3, #10
 8001d60:	e019      	b.n	8001d96 <_printf_i+0x102>
 8001d62:	680e      	ldr	r6, [r1, #0]
 8001d64:	602b      	str	r3, [r5, #0]
 8001d66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d6a:	bf18      	it	ne
 8001d6c:	b236      	sxthne	r6, r6
 8001d6e:	e7ef      	b.n	8001d50 <_printf_i+0xbc>
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	1d19      	adds	r1, r3, #4
 8001d76:	6029      	str	r1, [r5, #0]
 8001d78:	0601      	lsls	r1, r0, #24
 8001d7a:	d501      	bpl.n	8001d80 <_printf_i+0xec>
 8001d7c:	681e      	ldr	r6, [r3, #0]
 8001d7e:	e002      	b.n	8001d86 <_printf_i+0xf2>
 8001d80:	0646      	lsls	r6, r0, #25
 8001d82:	d5fb      	bpl.n	8001d7c <_printf_i+0xe8>
 8001d84:	881e      	ldrh	r6, [r3, #0]
 8001d86:	4854      	ldr	r0, [pc, #336]	; (8001ed8 <_printf_i+0x244>)
 8001d88:	2f6f      	cmp	r7, #111	; 0x6f
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2308      	moveq	r3, #8
 8001d8e:	230a      	movne	r3, #10
 8001d90:	2100      	movs	r1, #0
 8001d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d96:	6865      	ldr	r5, [r4, #4]
 8001d98:	60a5      	str	r5, [r4, #8]
 8001d9a:	2d00      	cmp	r5, #0
 8001d9c:	bfa2      	ittt	ge
 8001d9e:	6821      	ldrge	r1, [r4, #0]
 8001da0:	f021 0104 	bicge.w	r1, r1, #4
 8001da4:	6021      	strge	r1, [r4, #0]
 8001da6:	b90e      	cbnz	r6, 8001dac <_printf_i+0x118>
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d04d      	beq.n	8001e48 <_printf_i+0x1b4>
 8001dac:	4615      	mov	r5, r2
 8001dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8001db2:	fb03 6711 	mls	r7, r3, r1, r6
 8001db6:	5dc7      	ldrb	r7, [r0, r7]
 8001db8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001dbc:	4637      	mov	r7, r6
 8001dbe:	42bb      	cmp	r3, r7
 8001dc0:	460e      	mov	r6, r1
 8001dc2:	d9f4      	bls.n	8001dae <_printf_i+0x11a>
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d10b      	bne.n	8001de0 <_printf_i+0x14c>
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	07de      	lsls	r6, r3, #31
 8001dcc:	d508      	bpl.n	8001de0 <_printf_i+0x14c>
 8001dce:	6923      	ldr	r3, [r4, #16]
 8001dd0:	6861      	ldr	r1, [r4, #4]
 8001dd2:	4299      	cmp	r1, r3
 8001dd4:	bfde      	ittt	le
 8001dd6:	2330      	movle	r3, #48	; 0x30
 8001dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001de0:	1b52      	subs	r2, r2, r5
 8001de2:	6122      	str	r2, [r4, #16]
 8001de4:	f8cd a000 	str.w	sl, [sp]
 8001de8:	464b      	mov	r3, r9
 8001dea:	aa03      	add	r2, sp, #12
 8001dec:	4621      	mov	r1, r4
 8001dee:	4640      	mov	r0, r8
 8001df0:	f7ff fee2 	bl	8001bb8 <_printf_common>
 8001df4:	3001      	adds	r0, #1
 8001df6:	d14c      	bne.n	8001e92 <_printf_i+0x1fe>
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	b004      	add	sp, #16
 8001dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e02:	4835      	ldr	r0, [pc, #212]	; (8001ed8 <_printf_i+0x244>)
 8001e04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e08:	6829      	ldr	r1, [r5, #0]
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e10:	6029      	str	r1, [r5, #0]
 8001e12:	061d      	lsls	r5, r3, #24
 8001e14:	d514      	bpl.n	8001e40 <_printf_i+0x1ac>
 8001e16:	07df      	lsls	r7, r3, #31
 8001e18:	bf44      	itt	mi
 8001e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8001e1e:	6023      	strmi	r3, [r4, #0]
 8001e20:	b91e      	cbnz	r6, 8001e2a <_printf_i+0x196>
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f023 0320 	bic.w	r3, r3, #32
 8001e28:	6023      	str	r3, [r4, #0]
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	e7b0      	b.n	8001d90 <_printf_i+0xfc>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	2378      	movs	r3, #120	; 0x78
 8001e38:	4828      	ldr	r0, [pc, #160]	; (8001edc <_printf_i+0x248>)
 8001e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e3e:	e7e3      	b.n	8001e08 <_printf_i+0x174>
 8001e40:	0659      	lsls	r1, r3, #25
 8001e42:	bf48      	it	mi
 8001e44:	b2b6      	uxthmi	r6, r6
 8001e46:	e7e6      	b.n	8001e16 <_printf_i+0x182>
 8001e48:	4615      	mov	r5, r2
 8001e4a:	e7bb      	b.n	8001dc4 <_printf_i+0x130>
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	6826      	ldr	r6, [r4, #0]
 8001e50:	6961      	ldr	r1, [r4, #20]
 8001e52:	1d18      	adds	r0, r3, #4
 8001e54:	6028      	str	r0, [r5, #0]
 8001e56:	0635      	lsls	r5, r6, #24
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	d501      	bpl.n	8001e60 <_printf_i+0x1cc>
 8001e5c:	6019      	str	r1, [r3, #0]
 8001e5e:	e002      	b.n	8001e66 <_printf_i+0x1d2>
 8001e60:	0670      	lsls	r0, r6, #25
 8001e62:	d5fb      	bpl.n	8001e5c <_printf_i+0x1c8>
 8001e64:	8019      	strh	r1, [r3, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	6123      	str	r3, [r4, #16]
 8001e6a:	4615      	mov	r5, r2
 8001e6c:	e7ba      	b.n	8001de4 <_printf_i+0x150>
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	1d1a      	adds	r2, r3, #4
 8001e72:	602a      	str	r2, [r5, #0]
 8001e74:	681d      	ldr	r5, [r3, #0]
 8001e76:	6862      	ldr	r2, [r4, #4]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f7fe f9c0 	bl	8000200 <memchr>
 8001e80:	b108      	cbz	r0, 8001e86 <_printf_i+0x1f2>
 8001e82:	1b40      	subs	r0, r0, r5
 8001e84:	6060      	str	r0, [r4, #4]
 8001e86:	6863      	ldr	r3, [r4, #4]
 8001e88:	6123      	str	r3, [r4, #16]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e90:	e7a8      	b.n	8001de4 <_printf_i+0x150>
 8001e92:	6923      	ldr	r3, [r4, #16]
 8001e94:	462a      	mov	r2, r5
 8001e96:	4649      	mov	r1, r9
 8001e98:	4640      	mov	r0, r8
 8001e9a:	47d0      	blx	sl
 8001e9c:	3001      	adds	r0, #1
 8001e9e:	d0ab      	beq.n	8001df8 <_printf_i+0x164>
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	079b      	lsls	r3, r3, #30
 8001ea4:	d413      	bmi.n	8001ece <_printf_i+0x23a>
 8001ea6:	68e0      	ldr	r0, [r4, #12]
 8001ea8:	9b03      	ldr	r3, [sp, #12]
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	bfb8      	it	lt
 8001eae:	4618      	movlt	r0, r3
 8001eb0:	e7a4      	b.n	8001dfc <_printf_i+0x168>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	4632      	mov	r2, r6
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	4640      	mov	r0, r8
 8001eba:	47d0      	blx	sl
 8001ebc:	3001      	adds	r0, #1
 8001ebe:	d09b      	beq.n	8001df8 <_printf_i+0x164>
 8001ec0:	3501      	adds	r5, #1
 8001ec2:	68e3      	ldr	r3, [r4, #12]
 8001ec4:	9903      	ldr	r1, [sp, #12]
 8001ec6:	1a5b      	subs	r3, r3, r1
 8001ec8:	42ab      	cmp	r3, r5
 8001eca:	dcf2      	bgt.n	8001eb2 <_printf_i+0x21e>
 8001ecc:	e7eb      	b.n	8001ea6 <_printf_i+0x212>
 8001ece:	2500      	movs	r5, #0
 8001ed0:	f104 0619 	add.w	r6, r4, #25
 8001ed4:	e7f5      	b.n	8001ec2 <_printf_i+0x22e>
 8001ed6:	bf00      	nop
 8001ed8:	080021e1 	.word	0x080021e1
 8001edc:	080021f2 	.word	0x080021f2

08001ee0 <memcpy>:
 8001ee0:	440a      	add	r2, r1
 8001ee2:	4291      	cmp	r1, r2
 8001ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ee8:	d100      	bne.n	8001eec <memcpy+0xc>
 8001eea:	4770      	bx	lr
 8001eec:	b510      	push	{r4, lr}
 8001eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ef6:	4291      	cmp	r1, r2
 8001ef8:	d1f9      	bne.n	8001eee <memcpy+0xe>
 8001efa:	bd10      	pop	{r4, pc}

08001efc <memmove>:
 8001efc:	4288      	cmp	r0, r1
 8001efe:	b510      	push	{r4, lr}
 8001f00:	eb01 0402 	add.w	r4, r1, r2
 8001f04:	d902      	bls.n	8001f0c <memmove+0x10>
 8001f06:	4284      	cmp	r4, r0
 8001f08:	4623      	mov	r3, r4
 8001f0a:	d807      	bhi.n	8001f1c <memmove+0x20>
 8001f0c:	1e43      	subs	r3, r0, #1
 8001f0e:	42a1      	cmp	r1, r4
 8001f10:	d008      	beq.n	8001f24 <memmove+0x28>
 8001f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f1a:	e7f8      	b.n	8001f0e <memmove+0x12>
 8001f1c:	4402      	add	r2, r0
 8001f1e:	4601      	mov	r1, r0
 8001f20:	428a      	cmp	r2, r1
 8001f22:	d100      	bne.n	8001f26 <memmove+0x2a>
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f2e:	e7f7      	b.n	8001f20 <memmove+0x24>

08001f30 <_free_r>:
 8001f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f32:	2900      	cmp	r1, #0
 8001f34:	d044      	beq.n	8001fc0 <_free_r+0x90>
 8001f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f3a:	9001      	str	r0, [sp, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8001f42:	bfb8      	it	lt
 8001f44:	18e4      	addlt	r4, r4, r3
 8001f46:	f000 f913 	bl	8002170 <__malloc_lock>
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <_free_r+0x94>)
 8001f4c:	9801      	ldr	r0, [sp, #4]
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	b933      	cbnz	r3, 8001f60 <_free_r+0x30>
 8001f52:	6063      	str	r3, [r4, #4]
 8001f54:	6014      	str	r4, [r2, #0]
 8001f56:	b003      	add	sp, #12
 8001f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f5c:	f000 b90e 	b.w	800217c <__malloc_unlock>
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	d908      	bls.n	8001f76 <_free_r+0x46>
 8001f64:	6825      	ldr	r5, [r4, #0]
 8001f66:	1961      	adds	r1, r4, r5
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	bf01      	itttt	eq
 8001f6c:	6819      	ldreq	r1, [r3, #0]
 8001f6e:	685b      	ldreq	r3, [r3, #4]
 8001f70:	1949      	addeq	r1, r1, r5
 8001f72:	6021      	streq	r1, [r4, #0]
 8001f74:	e7ed      	b.n	8001f52 <_free_r+0x22>
 8001f76:	461a      	mov	r2, r3
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	b10b      	cbz	r3, 8001f80 <_free_r+0x50>
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	d9fa      	bls.n	8001f76 <_free_r+0x46>
 8001f80:	6811      	ldr	r1, [r2, #0]
 8001f82:	1855      	adds	r5, r2, r1
 8001f84:	42a5      	cmp	r5, r4
 8001f86:	d10b      	bne.n	8001fa0 <_free_r+0x70>
 8001f88:	6824      	ldr	r4, [r4, #0]
 8001f8a:	4421      	add	r1, r4
 8001f8c:	1854      	adds	r4, r2, r1
 8001f8e:	42a3      	cmp	r3, r4
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	d1e0      	bne.n	8001f56 <_free_r+0x26>
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	6053      	str	r3, [r2, #4]
 8001f9a:	4421      	add	r1, r4
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	e7da      	b.n	8001f56 <_free_r+0x26>
 8001fa0:	d902      	bls.n	8001fa8 <_free_r+0x78>
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	6003      	str	r3, [r0, #0]
 8001fa6:	e7d6      	b.n	8001f56 <_free_r+0x26>
 8001fa8:	6825      	ldr	r5, [r4, #0]
 8001faa:	1961      	adds	r1, r4, r5
 8001fac:	428b      	cmp	r3, r1
 8001fae:	bf04      	itt	eq
 8001fb0:	6819      	ldreq	r1, [r3, #0]
 8001fb2:	685b      	ldreq	r3, [r3, #4]
 8001fb4:	6063      	str	r3, [r4, #4]
 8001fb6:	bf04      	itt	eq
 8001fb8:	1949      	addeq	r1, r1, r5
 8001fba:	6021      	streq	r1, [r4, #0]
 8001fbc:	6054      	str	r4, [r2, #4]
 8001fbe:	e7ca      	b.n	8001f56 <_free_r+0x26>
 8001fc0:	b003      	add	sp, #12
 8001fc2:	bd30      	pop	{r4, r5, pc}
 8001fc4:	20000118 	.word	0x20000118

08001fc8 <sbrk_aligned>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4e0e      	ldr	r6, [pc, #56]	; (8002004 <sbrk_aligned+0x3c>)
 8001fcc:	460c      	mov	r4, r1
 8001fce:	6831      	ldr	r1, [r6, #0]
 8001fd0:	4605      	mov	r5, r0
 8001fd2:	b911      	cbnz	r1, 8001fda <sbrk_aligned+0x12>
 8001fd4:	f000 f8bc 	bl	8002150 <_sbrk_r>
 8001fd8:	6030      	str	r0, [r6, #0]
 8001fda:	4621      	mov	r1, r4
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f000 f8b7 	bl	8002150 <_sbrk_r>
 8001fe2:	1c43      	adds	r3, r0, #1
 8001fe4:	d00a      	beq.n	8001ffc <sbrk_aligned+0x34>
 8001fe6:	1cc4      	adds	r4, r0, #3
 8001fe8:	f024 0403 	bic.w	r4, r4, #3
 8001fec:	42a0      	cmp	r0, r4
 8001fee:	d007      	beq.n	8002000 <sbrk_aligned+0x38>
 8001ff0:	1a21      	subs	r1, r4, r0
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f000 f8ac 	bl	8002150 <_sbrk_r>
 8001ff8:	3001      	adds	r0, #1
 8001ffa:	d101      	bne.n	8002000 <sbrk_aligned+0x38>
 8001ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8002000:	4620      	mov	r0, r4
 8002002:	bd70      	pop	{r4, r5, r6, pc}
 8002004:	2000011c 	.word	0x2000011c

08002008 <_malloc_r>:
 8002008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800200c:	1ccd      	adds	r5, r1, #3
 800200e:	f025 0503 	bic.w	r5, r5, #3
 8002012:	3508      	adds	r5, #8
 8002014:	2d0c      	cmp	r5, #12
 8002016:	bf38      	it	cc
 8002018:	250c      	movcc	r5, #12
 800201a:	2d00      	cmp	r5, #0
 800201c:	4607      	mov	r7, r0
 800201e:	db01      	blt.n	8002024 <_malloc_r+0x1c>
 8002020:	42a9      	cmp	r1, r5
 8002022:	d905      	bls.n	8002030 <_malloc_r+0x28>
 8002024:	230c      	movs	r3, #12
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	2600      	movs	r6, #0
 800202a:	4630      	mov	r0, r6
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002030:	4e2e      	ldr	r6, [pc, #184]	; (80020ec <_malloc_r+0xe4>)
 8002032:	f000 f89d 	bl	8002170 <__malloc_lock>
 8002036:	6833      	ldr	r3, [r6, #0]
 8002038:	461c      	mov	r4, r3
 800203a:	bb34      	cbnz	r4, 800208a <_malloc_r+0x82>
 800203c:	4629      	mov	r1, r5
 800203e:	4638      	mov	r0, r7
 8002040:	f7ff ffc2 	bl	8001fc8 <sbrk_aligned>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	4604      	mov	r4, r0
 8002048:	d14d      	bne.n	80020e6 <_malloc_r+0xde>
 800204a:	6834      	ldr	r4, [r6, #0]
 800204c:	4626      	mov	r6, r4
 800204e:	2e00      	cmp	r6, #0
 8002050:	d140      	bne.n	80020d4 <_malloc_r+0xcc>
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	4631      	mov	r1, r6
 8002056:	4638      	mov	r0, r7
 8002058:	eb04 0803 	add.w	r8, r4, r3
 800205c:	f000 f878 	bl	8002150 <_sbrk_r>
 8002060:	4580      	cmp	r8, r0
 8002062:	d13a      	bne.n	80020da <_malloc_r+0xd2>
 8002064:	6821      	ldr	r1, [r4, #0]
 8002066:	3503      	adds	r5, #3
 8002068:	1a6d      	subs	r5, r5, r1
 800206a:	f025 0503 	bic.w	r5, r5, #3
 800206e:	3508      	adds	r5, #8
 8002070:	2d0c      	cmp	r5, #12
 8002072:	bf38      	it	cc
 8002074:	250c      	movcc	r5, #12
 8002076:	4629      	mov	r1, r5
 8002078:	4638      	mov	r0, r7
 800207a:	f7ff ffa5 	bl	8001fc8 <sbrk_aligned>
 800207e:	3001      	adds	r0, #1
 8002080:	d02b      	beq.n	80020da <_malloc_r+0xd2>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	442b      	add	r3, r5
 8002086:	6023      	str	r3, [r4, #0]
 8002088:	e00e      	b.n	80020a8 <_malloc_r+0xa0>
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	1b52      	subs	r2, r2, r5
 800208e:	d41e      	bmi.n	80020ce <_malloc_r+0xc6>
 8002090:	2a0b      	cmp	r2, #11
 8002092:	d916      	bls.n	80020c2 <_malloc_r+0xba>
 8002094:	1961      	adds	r1, r4, r5
 8002096:	42a3      	cmp	r3, r4
 8002098:	6025      	str	r5, [r4, #0]
 800209a:	bf18      	it	ne
 800209c:	6059      	strne	r1, [r3, #4]
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	bf08      	it	eq
 80020a2:	6031      	streq	r1, [r6, #0]
 80020a4:	5162      	str	r2, [r4, r5]
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	4638      	mov	r0, r7
 80020aa:	f104 060b 	add.w	r6, r4, #11
 80020ae:	f000 f865 	bl	800217c <__malloc_unlock>
 80020b2:	f026 0607 	bic.w	r6, r6, #7
 80020b6:	1d23      	adds	r3, r4, #4
 80020b8:	1af2      	subs	r2, r6, r3
 80020ba:	d0b6      	beq.n	800202a <_malloc_r+0x22>
 80020bc:	1b9b      	subs	r3, r3, r6
 80020be:	50a3      	str	r3, [r4, r2]
 80020c0:	e7b3      	b.n	800202a <_malloc_r+0x22>
 80020c2:	6862      	ldr	r2, [r4, #4]
 80020c4:	42a3      	cmp	r3, r4
 80020c6:	bf0c      	ite	eq
 80020c8:	6032      	streq	r2, [r6, #0]
 80020ca:	605a      	strne	r2, [r3, #4]
 80020cc:	e7ec      	b.n	80020a8 <_malloc_r+0xa0>
 80020ce:	4623      	mov	r3, r4
 80020d0:	6864      	ldr	r4, [r4, #4]
 80020d2:	e7b2      	b.n	800203a <_malloc_r+0x32>
 80020d4:	4634      	mov	r4, r6
 80020d6:	6876      	ldr	r6, [r6, #4]
 80020d8:	e7b9      	b.n	800204e <_malloc_r+0x46>
 80020da:	230c      	movs	r3, #12
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4638      	mov	r0, r7
 80020e0:	f000 f84c 	bl	800217c <__malloc_unlock>
 80020e4:	e7a1      	b.n	800202a <_malloc_r+0x22>
 80020e6:	6025      	str	r5, [r4, #0]
 80020e8:	e7de      	b.n	80020a8 <_malloc_r+0xa0>
 80020ea:	bf00      	nop
 80020ec:	20000118 	.word	0x20000118

080020f0 <_realloc_r>:
 80020f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f4:	4680      	mov	r8, r0
 80020f6:	4614      	mov	r4, r2
 80020f8:	460e      	mov	r6, r1
 80020fa:	b921      	cbnz	r1, 8002106 <_realloc_r+0x16>
 80020fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002100:	4611      	mov	r1, r2
 8002102:	f7ff bf81 	b.w	8002008 <_malloc_r>
 8002106:	b92a      	cbnz	r2, 8002114 <_realloc_r+0x24>
 8002108:	f7ff ff12 	bl	8001f30 <_free_r>
 800210c:	4625      	mov	r5, r4
 800210e:	4628      	mov	r0, r5
 8002110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002114:	f000 f838 	bl	8002188 <_malloc_usable_size_r>
 8002118:	4284      	cmp	r4, r0
 800211a:	4607      	mov	r7, r0
 800211c:	d802      	bhi.n	8002124 <_realloc_r+0x34>
 800211e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002122:	d812      	bhi.n	800214a <_realloc_r+0x5a>
 8002124:	4621      	mov	r1, r4
 8002126:	4640      	mov	r0, r8
 8002128:	f7ff ff6e 	bl	8002008 <_malloc_r>
 800212c:	4605      	mov	r5, r0
 800212e:	2800      	cmp	r0, #0
 8002130:	d0ed      	beq.n	800210e <_realloc_r+0x1e>
 8002132:	42bc      	cmp	r4, r7
 8002134:	4622      	mov	r2, r4
 8002136:	4631      	mov	r1, r6
 8002138:	bf28      	it	cs
 800213a:	463a      	movcs	r2, r7
 800213c:	f7ff fed0 	bl	8001ee0 <memcpy>
 8002140:	4631      	mov	r1, r6
 8002142:	4640      	mov	r0, r8
 8002144:	f7ff fef4 	bl	8001f30 <_free_r>
 8002148:	e7e1      	b.n	800210e <_realloc_r+0x1e>
 800214a:	4635      	mov	r5, r6
 800214c:	e7df      	b.n	800210e <_realloc_r+0x1e>
	...

08002150 <_sbrk_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4d06      	ldr	r5, [pc, #24]	; (800216c <_sbrk_r+0x1c>)
 8002154:	2300      	movs	r3, #0
 8002156:	4604      	mov	r4, r0
 8002158:	4608      	mov	r0, r1
 800215a:	602b      	str	r3, [r5, #0]
 800215c:	f7ff fa94 	bl	8001688 <_sbrk>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d102      	bne.n	800216a <_sbrk_r+0x1a>
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	b103      	cbz	r3, 800216a <_sbrk_r+0x1a>
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	bd38      	pop	{r3, r4, r5, pc}
 800216c:	20000120 	.word	0x20000120

08002170 <__malloc_lock>:
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <__malloc_lock+0x8>)
 8002172:	f000 b811 	b.w	8002198 <__retarget_lock_acquire_recursive>
 8002176:	bf00      	nop
 8002178:	20000124 	.word	0x20000124

0800217c <__malloc_unlock>:
 800217c:	4801      	ldr	r0, [pc, #4]	; (8002184 <__malloc_unlock+0x8>)
 800217e:	f000 b80c 	b.w	800219a <__retarget_lock_release_recursive>
 8002182:	bf00      	nop
 8002184:	20000124 	.word	0x20000124

08002188 <_malloc_usable_size_r>:
 8002188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800218c:	1f18      	subs	r0, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfbc      	itt	lt
 8002192:	580b      	ldrlt	r3, [r1, r0]
 8002194:	18c0      	addlt	r0, r0, r3
 8002196:	4770      	bx	lr

08002198 <__retarget_lock_acquire_recursive>:
 8002198:	4770      	bx	lr

0800219a <__retarget_lock_release_recursive>:
 800219a:	4770      	bx	lr

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
