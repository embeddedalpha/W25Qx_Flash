
W25Qx_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000239c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f0  080025f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080025f0  080025f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f0  080025f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080025f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000000dc  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036ee  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000be0  00000000  00000000  00023786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00024368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000198  00000000  00000000  00024578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aed8  00000000  00000000  00024710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003b9d  00000000  00000000  0003f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f5ca  00000000  00000000  00043185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d274f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000af4  00000000  00000000  000d27a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002534 	.word	0x08002534

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002534 	.word	0x08002534

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <Console_Init>:
int callback = 0;



 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if(port == USART1)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a9d      	ldr	r2, [pc, #628]	; (8000524 <Console_Init+0x284>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13b      	bne.n	800032a <Console_Init+0x8a>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80002b2:	4b9d      	ldr	r3, [pc, #628]	; (8000528 <Console_Init+0x288>)
 80002b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b6:	4a9c      	ldr	r2, [pc, #624]	; (8000528 <Console_Init+0x288>)
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6453      	str	r3, [r2, #68]	; 0x44
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80002be:	4b9a      	ldr	r3, [pc, #616]	; (8000528 <Console_Init+0x288>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a99      	ldr	r2, [pc, #612]	; (8000528 <Console_Init+0x288>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
		port -> CR3 |= USART_CR3_DMAT;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	615a      	str	r2, [r3, #20]
		DMA2_Stream7 -> CR |= 4 << 25  | 0 << 16 | 0 << 13 | 0 << 11 | 1 << 10 | 0 << 8 | 1 << 6 |
 80002d6:	4b95      	ldr	r3, [pc, #596]	; (800052c <Console_Init+0x28c>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4994      	ldr	r1, [pc, #592]	; (800052c <Console_Init+0x28c>)
 80002dc:	4b94      	ldr	r3, [pc, #592]	; (8000530 <Console_Init+0x290>)
 80002de:	4313      	orrs	r3, r2
 80002e0:	600b      	str	r3, [r1, #0]
				1 << 4 | 3 << 16;
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80002e2:	2307      	movs	r3, #7
 80002e4:	228c      	movs	r2, #140	; 0x8c
 80002e6:	2109      	movs	r1, #9
 80002e8:	4892      	ldr	r0, [pc, #584]	; (8000534 <Console_Init+0x294>)
 80002ea:	f000 ff2b 	bl	8001144 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART1_RX);
 80002ee:	2307      	movs	r3, #7
 80002f0:	229c      	movs	r2, #156	; 0x9c
 80002f2:	210a      	movs	r1, #10
 80002f4:	488f      	ldr	r0, [pc, #572]	; (8000534 <Console_Init+0x294>)
 80002f6:	f000 ff25 	bl	8001144 <GPIO_Pin_Setup>

		port ->BRR |= (int)(84000000 / (16 * baudrate)) << 4;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	498d      	ldr	r1, [pc, #564]	; (8000538 <Console_Init+0x298>)
 8000304:	fb91 f2f2 	sdiv	r2, r1, r2
 8000308:	0112      	lsls	r2, r2, #4
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	609a      	str	r2, [r3, #8]
		port -> CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	f043 020c 	orr.w	r2, r3, #12
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60da      	str	r2, [r3, #12]
		port -> CR1 |= USART_CR1_UE;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
	}



}
 8000328:	e0f8      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a83      	ldr	r2, [pc, #524]	; (800053c <Console_Init+0x29c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d12d      	bne.n	800038e <Console_Init+0xee>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8000332:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <Console_Init+0x288>)
 8000334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000336:	4a7c      	ldr	r2, [pc, #496]	; (8000528 <Console_Init+0x288>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOC, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 800033e:	2307      	movs	r3, #7
 8000340:	228c      	movs	r2, #140	; 0x8c
 8000342:	2106      	movs	r1, #6
 8000344:	487e      	ldr	r0, [pc, #504]	; (8000540 <Console_Init+0x2a0>)
 8000346:	f000 fefd 	bl	8001144 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOC, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 800034a:	2307      	movs	r3, #7
 800034c:	228c      	movs	r2, #140	; 0x8c
 800034e:	2107      	movs	r1, #7
 8000350:	487b      	ldr	r0, [pc, #492]	; (8000540 <Console_Init+0x2a0>)
 8000352:	f000 fef7 	bl	8001144 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / (16 * baudrate)) << 4;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	4a74      	ldr	r2, [pc, #464]	; (8000538 <Console_Init+0x298>)
 8000368:	fb92 f3f3 	sdiv	r3, r2, r3
 800036c:	011b      	lsls	r3, r3, #4
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	f043 0208 	orr.w	r2, r3, #8
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	f043 0204 	orr.w	r2, r3, #4
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60da      	str	r2, [r3, #12]
}
 800038c:	e0c6      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART2)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a6c      	ldr	r2, [pc, #432]	; (8000544 <Console_Init+0x2a4>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d12d      	bne.n	80003f2 <Console_Init+0x152>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000396:	4b64      	ldr	r3, [pc, #400]	; (8000528 <Console_Init+0x288>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	4a63      	ldr	r2, [pc, #396]	; (8000528 <Console_Init+0x288>)
 800039c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 80003a2:	2307      	movs	r3, #7
 80003a4:	228c      	movs	r2, #140	; 0x8c
 80003a6:	2102      	movs	r1, #2
 80003a8:	4862      	ldr	r0, [pc, #392]	; (8000534 <Console_Init+0x294>)
 80003aa:	f000 fecb 	bl	8001144 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART2_RX);
 80003ae:	2307      	movs	r3, #7
 80003b0:	229c      	movs	r2, #156	; 0x9c
 80003b2:	2103      	movs	r1, #3
 80003b4:	485f      	ldr	r0, [pc, #380]	; (8000534 <Console_Init+0x294>)
 80003b6:	f000 fec5 	bl	8001144 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	015b      	lsls	r3, r3, #5
 80003ca:	4a5b      	ldr	r2, [pc, #364]	; (8000538 <Console_Init+0x298>)
 80003cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	461a      	mov	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	f043 0208 	orr.w	r2, r3, #8
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	f043 0204 	orr.w	r2, r3, #4
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	60da      	str	r2, [r3, #12]
}
 80003f0:	e094      	b.n	800051c <Console_Init+0x27c>
	else if(port == USART3)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a54      	ldr	r2, [pc, #336]	; (8000548 <Console_Init+0x2a8>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d12d      	bne.n	8000456 <Console_Init+0x1b6>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80003fa:	4b4b      	ldr	r3, [pc, #300]	; (8000528 <Console_Init+0x288>)
 80003fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fe:	4a4a      	ldr	r2, [pc, #296]	; (8000528 <Console_Init+0x288>)
 8000400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000404:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART3_TX);
 8000406:	2307      	movs	r3, #7
 8000408:	228c      	movs	r2, #140	; 0x8c
 800040a:	210a      	movs	r1, #10
 800040c:	484f      	ldr	r0, [pc, #316]	; (800054c <Console_Init+0x2ac>)
 800040e:	f000 fe99 	bl	8001144 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 11, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART3_RX);
 8000412:	2307      	movs	r3, #7
 8000414:	229c      	movs	r2, #156	; 0x9c
 8000416:	210b      	movs	r1, #11
 8000418:	484c      	ldr	r0, [pc, #304]	; (800054c <Console_Init+0x2ac>)
 800041a:	f000 fe93 	bl	8001144 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	015b      	lsls	r3, r3, #5
 800042e:	4a42      	ldr	r2, [pc, #264]	; (8000538 <Console_Init+0x298>)
 8000430:	fb92 f3f3 	sdiv	r3, r2, r3
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	461a      	mov	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	f043 0208 	orr.w	r2, r3, #8
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	f043 0204 	orr.w	r2, r3, #4
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	60da      	str	r2, [r3, #12]
}
 8000454:	e062      	b.n	800051c <Console_Init+0x27c>
	else if(port == UART4)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <Console_Init+0x2b0>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d12d      	bne.n	80004ba <Console_Init+0x21a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <Console_Init+0x288>)
 8000460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000462:	4a31      	ldr	r2, [pc, #196]	; (8000528 <Console_Init+0x288>)
 8000464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000468:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 0, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART4_TX);
 800046a:	2307      	movs	r3, #7
 800046c:	228c      	movs	r2, #140	; 0x8c
 800046e:	2100      	movs	r1, #0
 8000470:	4830      	ldr	r0, [pc, #192]	; (8000534 <Console_Init+0x294>)
 8000472:	f000 fe67 	bl	8001144 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 1, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART4_RX);
 8000476:	2307      	movs	r3, #7
 8000478:	229c      	movs	r2, #156	; 0x9c
 800047a:	2101      	movs	r1, #1
 800047c:	482d      	ldr	r0, [pc, #180]	; (8000534 <Console_Init+0x294>)
 800047e:	f000 fe61 	bl	8001144 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	015b      	lsls	r3, r3, #5
 8000492:	4a29      	ldr	r2, [pc, #164]	; (8000538 <Console_Init+0x298>)
 8000494:	fb92 f3f3 	sdiv	r3, r2, r3
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f043 0208 	orr.w	r2, r3, #8
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	f043 0204 	orr.w	r2, r3, #4
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	60da      	str	r2, [r3, #12]
}
 80004b8:	e030      	b.n	800051c <Console_Init+0x27c>
	else if(port == UART5)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a25      	ldr	r2, [pc, #148]	; (8000554 <Console_Init+0x2b4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d12c      	bne.n	800051c <Console_Init+0x27c>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <Console_Init+0x288>)
 80004c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <Console_Init+0x288>)
 80004c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004cc:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART5_TX);
 80004ce:	2307      	movs	r3, #7
 80004d0:	228c      	movs	r2, #140	; 0x8c
 80004d2:	210c      	movs	r1, #12
 80004d4:	481a      	ldr	r0, [pc, #104]	; (8000540 <Console_Init+0x2a0>)
 80004d6:	f000 fe35 	bl	8001144 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOD, 2, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN, USART5_RX);
 80004da:	2307      	movs	r3, #7
 80004dc:	229c      	movs	r2, #156	; 0x9c
 80004de:	2102      	movs	r1, #2
 80004e0:	481d      	ldr	r0, [pc, #116]	; (8000558 <Console_Init+0x2b8>)
 80004e2:	f000 fe2f 	bl	8001144 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(84000000 / ((16 * baudrate)*2)) << 4;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	015b      	lsls	r3, r3, #5
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <Console_Init+0x298>)
 80004f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	461a      	mov	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	f043 0208 	orr.w	r2, r3, #8
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f043 0204 	orr.w	r2, r3, #4
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60da      	str	r2, [r3, #12]
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40011000 	.word	0x40011000
 8000528:	40023800 	.word	0x40023800
 800052c:	400264b8 	.word	0x400264b8
 8000530:	08030450 	.word	0x08030450
 8000534:	40020000 	.word	0x40020000
 8000538:	0501bd00 	.word	0x0501bd00
 800053c:	40011400 	.word	0x40011400
 8000540:	40020800 	.word	0x40020800
 8000544:	40004400 	.word	0x40004400
 8000548:	40004800 	.word	0x40004800
 800054c:	40020400 	.word	0x40020400
 8000550:	40004c00 	.word	0x40004c00
 8000554:	40005000 	.word	0x40005000
 8000558:	40020c00 	.word	0x40020c00

0800055c <printConsole>:


 void printConsole(USART_TypeDef *port,char *msg, ...)
{
 800055c:	b40e      	push	{r1, r2, r3}
 800055e:	b580      	push	{r7, lr}
 8000560:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8000564:	af00      	add	r7, sp, #0
 8000566:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800056a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800056e:	6018      	str	r0, [r3, #0]

char buff[1000];
//	#ifdef DEBUG_UART
	va_list args;
	va_start(args, msg);
 8000570:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8000574:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000578:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800057c:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 800057e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000582:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8000586:	f107 0010 	add.w	r0, r7, #16
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8000590:	f001 fb78 	bl	8001c84 <vsiprintf>
	DMA2_Stream7 -> PAR = (uint32_t)&port -> DR;
 8000594:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000598:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1d1a      	adds	r2, r3, #4
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <printConsole+0x98>)
 80005a2:	609a      	str	r2, [r3, #8]
	DMA2_Stream7 -> M0AR = (uint32_t)&buff[0];
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <printConsole+0x98>)
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	60d3      	str	r3, [r2, #12]
	DMA2_Stream7 -> NDTR = (uint16_t)strlen(buff);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe1d 	bl	80001f0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <printConsole+0x98>)
 80005bc:	605a      	str	r2, [r3, #4]
	DMA2_Stream7 -> CR |= DMA_SxCR_EN;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <printConsole+0x98>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <printConsole+0x98>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
	while((DMA2->HISR & DMA_HIFCR_CTCIF7) == 0){}
 80005ca:	bf00      	nop
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <printConsole+0x9c>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f9      	beq.n	80005cc <printConsole+0x70>
	DMA2 ->HIFCR |= DMA_HIFCR_CTCIF7;
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <printConsole+0x9c>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <printConsole+0x9c>)
 80005de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005e2:	60d3      	str	r3, [r2, #12]
////		port -> CR1 |= USART_CR1_SBK;
//		while (!(port->SR & USART_SR_TXE));
//	}

//	#endif
}
 80005e4:	bf00      	nop
 80005e6:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80005ea:	46bd      	mov	sp, r7
 80005ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f0:	b003      	add	sp, #12
 80005f2:	4770      	bx	lr
 80005f4:	400264b8 	.word	0x400264b8
 80005f8:	40026400 	.word	0x40026400

080005fc <Delay_us>:
	return (0UL);                                                     /* Function successful */
}


__STATIC_INLINE uint32_t Delay_us(float us)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = 167 * us;
 8000606:	edd7 7a01 	vldr	s15, [r7, #4]
 800060a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000640 <Delay_us+0x44>
 800060e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <Delay_us+0x48>)
 8000614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000618:	ee17 2a90 	vmov	r2, s15
 800061c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <Delay_us+0x48>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000624:	bf00      	nop
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <Delay_us+0x48>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	43270000 	.word	0x43270000
 8000644:	e000e010 	.word	0xe000e010

08000648 <Read_Status_Register>:
 * ############################################### Internal Operation ######################################
 * #########################################################################################################
 */

static void Read_Status_Register(void)
{
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	b095      	sub	sp, #84	; 0x54
 800064c:	af10      	add	r7, sp, #64	; 0x40
	int x[3];
	SPI_CSS_Low(W25QX);
 800064e:	4e74      	ldr	r6, [pc, #464]	; (8000820 <Read_Status_Register+0x1d8>)
 8000650:	466d      	mov	r5, sp
 8000652:	f106 0410 	add.w	r4, r6, #16
 8000656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800065c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800065e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000666:	e885 0003 	stmia.w	r5, {r0, r1}
 800066a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800066e:	f000 fff7 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x05);
 8000672:	4e6b      	ldr	r6, [pc, #428]	; (8000820 <Read_Status_Register+0x1d8>)
 8000674:	2305      	movs	r3, #5
 8000676:	930e      	str	r3, [sp, #56]	; 0x38
 8000678:	466d      	mov	r5, sp
 800067a:	f106 0410 	add.w	r4, r6, #16
 800067e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800068a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800068e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000692:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000696:	f001 f80b 	bl	80016b0 <SPI_TRX_Data>
	x[0] = SPI_TRX_Data(W25QX, 0xAA);
 800069a:	4e61      	ldr	r6, [pc, #388]	; (8000820 <Read_Status_Register+0x1d8>)
 800069c:	23aa      	movs	r3, #170	; 0xaa
 800069e:	930e      	str	r3, [sp, #56]	; 0x38
 80006a0:	466d      	mov	r5, sp
 80006a2:	f106 0410 	add.w	r4, r6, #16
 80006a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80006ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006be:	f000 fff7 	bl	80016b0 <SPI_TRX_Data>
 80006c2:	4603      	mov	r3, r0
 80006c4:	607b      	str	r3, [r7, #4]
	x[1] = SPI_TRX_Data(W25QX, 0xAA);
 80006c6:	4e56      	ldr	r6, [pc, #344]	; (8000820 <Read_Status_Register+0x1d8>)
 80006c8:	23aa      	movs	r3, #170	; 0xaa
 80006ca:	930e      	str	r3, [sp, #56]	; 0x38
 80006cc:	466d      	mov	r5, sp
 80006ce:	f106 0410 	add.w	r4, r6, #16
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80006e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006ea:	f000 ffe1 	bl	80016b0 <SPI_TRX_Data>
 80006ee:	4603      	mov	r3, r0
 80006f0:	60bb      	str	r3, [r7, #8]
	x[2] = SPI_TRX_Data(W25QX, 0xAA);
 80006f2:	4e4b      	ldr	r6, [pc, #300]	; (8000820 <Read_Status_Register+0x1d8>)
 80006f4:	23aa      	movs	r3, #170	; 0xaa
 80006f6:	930e      	str	r3, [sp, #56]	; 0x38
 80006f8:	466d      	mov	r5, sp
 80006fa:	f106 0410 	add.w	r4, r6, #16
 80006fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800070e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000712:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000716:	f000 ffcb 	bl	80016b0 <SPI_TRX_Data>
 800071a:	4603      	mov	r3, r0
 800071c:	60fb      	str	r3, [r7, #12]
	SPI_CSS_High(W25QX);
 800071e:	4e40      	ldr	r6, [pc, #256]	; (8000820 <Read_Status_Register+0x1d8>)
 8000720:	466d      	mov	r5, sp
 8000722:	f106 0410 	add.w	r4, r6, #16
 8000726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800072a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800072e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000732:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000736:	e885 0003 	stmia.w	r5, {r0, r1}
 800073a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800073e:	f000 ffa3 	bl	8001688 <SPI_CSS_High>

	SR.SRP  = ((1 << 7) & x[0]) >> 7;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	11db      	asrs	r3, r3, #7
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	4a36      	ldr	r2, [pc, #216]	; (8000824 <Read_Status_Register+0x1dc>)
 800074c:	6013      	str	r3, [r2, #0]
	SR.SEC  = ((1 << 6) & x[0]) >> 6;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	119b      	asrs	r3, r3, #6
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	4a33      	ldr	r2, [pc, #204]	; (8000824 <Read_Status_Register+0x1dc>)
 8000758:	6053      	str	r3, [r2, #4]
	SR.TB   = ((1 << 5) & x[0]) >> 5;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	115b      	asrs	r3, r3, #5
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	4a30      	ldr	r2, [pc, #192]	; (8000824 <Read_Status_Register+0x1dc>)
 8000764:	6093      	str	r3, [r2, #8]
	SR.BP2  = ((1 << 4) & x[0]) >> 4;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	111b      	asrs	r3, r3, #4
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <Read_Status_Register+0x1dc>)
 8000770:	60d3      	str	r3, [r2, #12]
	SR.BP1  = ((1 << 3) & x[0]) >> 3;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	10db      	asrs	r3, r3, #3
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <Read_Status_Register+0x1dc>)
 800077c:	6113      	str	r3, [r2, #16]
	SR.BP0  = ((1 << 2) & x[0]) >> 2;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	109b      	asrs	r3, r3, #2
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	4a27      	ldr	r2, [pc, #156]	; (8000824 <Read_Status_Register+0x1dc>)
 8000788:	6153      	str	r3, [r2, #20]
	SR.WEL  = ((1 << 1) & x[0]) >> 1;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	105b      	asrs	r3, r3, #1
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	4a24      	ldr	r2, [pc, #144]	; (8000824 <Read_Status_Register+0x1dc>)
 8000794:	6193      	str	r3, [r2, #24]
	SR.BUSY = ((1 << 0) & x[0]) >> 0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	4a21      	ldr	r2, [pc, #132]	; (8000824 <Read_Status_Register+0x1dc>)
 800079e:	61d3      	str	r3, [r2, #28]

	SR.SUS  = ((1 << 7) & x[1]) >> 7;
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	11db      	asrs	r3, r3, #7
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <Read_Status_Register+0x1dc>)
 80007aa:	6213      	str	r3, [r2, #32]
	SR.CMP  = ((1 << 6) & x[1]) >> 6;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	119b      	asrs	r3, r3, #6
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <Read_Status_Register+0x1dc>)
 80007b6:	6253      	str	r3, [r2, #36]	; 0x24
	SR.LB3  = ((1 << 5) & x[1]) >> 5;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	115b      	asrs	r3, r3, #5
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <Read_Status_Register+0x1dc>)
 80007c2:	6293      	str	r3, [r2, #40]	; 0x28
	SR.LB2  = ((1 << 4) & x[1]) >> 4;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	111b      	asrs	r3, r3, #4
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	4a15      	ldr	r2, [pc, #84]	; (8000824 <Read_Status_Register+0x1dc>)
 80007ce:	62d3      	str	r3, [r2, #44]	; 0x2c
	SR.LB1  = ((1 << 3) & x[1]) >> 3;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	10db      	asrs	r3, r3, #3
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <Read_Status_Register+0x1dc>)
 80007da:	6313      	str	r3, [r2, #48]	; 0x30
	SR.QE   = ((1 << 1) & x[1]) >> 1;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	105b      	asrs	r3, r3, #1
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <Read_Status_Register+0x1dc>)
 80007e6:	6353      	str	r3, [r2, #52]	; 0x34
	SR.SRL  = ((1 << 0) & x[1]) >> 0;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <Read_Status_Register+0x1dc>)
 80007f0:	6393      	str	r3, [r2, #56]	; 0x38

	SR.DRV1  = ((1 << 6) & x[1]) >> 6;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	119b      	asrs	r3, r3, #6
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <Read_Status_Register+0x1dc>)
 80007fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	SR.DRV2  = ((1 << 5) & x[1]) >> 5;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	115b      	asrs	r3, r3, #5
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	4a07      	ldr	r2, [pc, #28]	; (8000824 <Read_Status_Register+0x1dc>)
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
	SR.WPS  = ((1 << 2) & x[1]) >> 2;
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	109b      	asrs	r3, r3, #2
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <Read_Status_Register+0x1dc>)
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081e:	bf00      	nop
 8000820:	20000084 	.word	0x20000084
 8000824:	200000cc 	.word	0x200000cc

08000828 <Write_Enable>:

static int Write_Enable()
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b093      	sub	sp, #76	; 0x4c
 800082c:	af10      	add	r7, sp, #64	; 0x40
	int retval;
	SPI_CSS_Low(W25QX);
 800082e:	4e24      	ldr	r6, [pc, #144]	; (80008c0 <Write_Enable+0x98>)
 8000830:	466d      	mov	r5, sp
 8000832:	f106 0410 	add.w	r4, r6, #16
 8000836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000846:	e885 0003 	stmia.w	r5, {r0, r1}
 800084a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800084e:	f000 ff07 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x06);
 8000852:	4e1b      	ldr	r6, [pc, #108]	; (80008c0 <Write_Enable+0x98>)
 8000854:	2306      	movs	r3, #6
 8000856:	930e      	str	r3, [sp, #56]	; 0x38
 8000858:	466d      	mov	r5, sp
 800085a:	f106 0410 	add.w	r4, r6, #16
 800085e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800086e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000872:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000876:	f000 ff1b 	bl	80016b0 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 800087a:	4e11      	ldr	r6, [pc, #68]	; (80008c0 <Write_Enable+0x98>)
 800087c:	466d      	mov	r5, sp
 800087e:	f106 0410 	add.w	r4, r6, #16
 8000882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000892:	e885 0003 	stmia.w	r5, {r0, r1}
 8000896:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800089a:	f000 fef5 	bl	8001688 <SPI_CSS_High>

	Read_Status_Register();
 800089e:	f7ff fed3 	bl	8000648 <Read_Status_Register>
	if(SR.WEL)
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <Write_Enable+0x9c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <Write_Enable+0x88>
	{
		retval = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	e002      	b.n	80008b6 <Write_Enable+0x8e>
	}
	else
	{
		retval = -1;
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	607b      	str	r3, [r7, #4]
	}
	return retval;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c0:	20000084 	.word	0x20000084
 80008c4:	200000cc 	.word	0x200000cc

080008c8 <Write_Disable>:

static int Write_Disable()
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ca:	b093      	sub	sp, #76	; 0x4c
 80008cc:	af10      	add	r7, sp, #64	; 0x40
	int retval;
	SPI_CSS_Low(W25QX);
 80008ce:	4e24      	ldr	r6, [pc, #144]	; (8000960 <Write_Disable+0x98>)
 80008d0:	466d      	mov	r5, sp
 80008d2:	f106 0410 	add.w	r4, r6, #16
 80008d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80008ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ee:	f000 feb7 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x04);
 80008f2:	4e1b      	ldr	r6, [pc, #108]	; (8000960 <Write_Disable+0x98>)
 80008f4:	2304      	movs	r3, #4
 80008f6:	930e      	str	r3, [sp, #56]	; 0x38
 80008f8:	466d      	mov	r5, sp
 80008fa:	f106 0410 	add.w	r4, r6, #16
 80008fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800090e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000912:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000916:	f000 fecb 	bl	80016b0 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 800091a:	4e11      	ldr	r6, [pc, #68]	; (8000960 <Write_Disable+0x98>)
 800091c:	466d      	mov	r5, sp
 800091e:	f106 0410 	add.w	r4, r6, #16
 8000922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000932:	e885 0003 	stmia.w	r5, {r0, r1}
 8000936:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800093a:	f000 fea5 	bl	8001688 <SPI_CSS_High>
	Read_Status_Register();
 800093e:	f7ff fe83 	bl	8000648 <Read_Status_Register>
	if(SR.WEL)
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <Write_Disable+0x9c>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <Write_Disable+0x8a>
	{
		retval = -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	e001      	b.n	8000956 <Write_Disable+0x8e>
	}
	else
	{
		retval = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
	}
	return retval;
 8000956:	687b      	ldr	r3, [r7, #4]
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000960:	20000084 	.word	0x20000084
 8000964:	200000cc 	.word	0x200000cc

08000968 <W25QX_Init>:
 * ############################################### Operation ###############################################
 * #########################################################################################################
 */

void W25QX_Init(W25Qx_Typedef *self)
{
 8000968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800096c:	b0b1      	sub	sp, #196	; 0xc4
 800096e:	af10      	add	r7, sp, #64	; 0x40
 8000970:	6378      	str	r0, [r7, #52]	; 0x34
	W25QX.SPI = self->SPI_Port;
 8000972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b99      	ldr	r3, [pc, #612]	; (8000bdc <W25QX_Init+0x274>)
 8000978:	601a      	str	r2, [r3, #0]
	W25QX.Frame = SPI_Frame_8Bit;
 800097a:	4a98      	ldr	r2, [pc, #608]	; (8000bdc <W25QX_Init+0x274>)
 800097c:	2300      	movs	r3, #0
 800097e:	7493      	strb	r3, [r2, #18]
	W25QX.type = SPI_Full_Duplex_Master;
 8000980:	4a96      	ldr	r2, [pc, #600]	; (8000bdc <W25QX_Init+0x274>)
 8000982:	2300      	movs	r3, #0
 8000984:	7153      	strb	r3, [r2, #5]
	W25QX.mode = SPI_Master;
 8000986:	4a95      	ldr	r2, [pc, #596]	; (8000bdc <W25QX_Init+0x274>)
 8000988:	2301      	movs	r3, #1
 800098a:	7193      	strb	r3, [r2, #6]
	W25QX.LSB_MSB = 0;
 800098c:	4a93      	ldr	r2, [pc, #588]	; (8000bdc <W25QX_Init+0x274>)
 800098e:	2300      	movs	r3, #0
 8000990:	7393      	strb	r3, [r2, #14]
	W25QX.frequency = 0;
 8000992:	4a92      	ldr	r2, [pc, #584]	; (8000bdc <W25QX_Init+0x274>)
 8000994:	2300      	movs	r3, #0
 8000996:	6093      	str	r3, [r2, #8]
	W25QX.nCSS_Port = GPIOA;
 8000998:	4a90      	ldr	r2, [pc, #576]	; (8000bdc <W25QX_Init+0x274>)
 800099a:	4b91      	ldr	r3, [pc, #580]	; (8000be0 <W25QX_Init+0x278>)
 800099c:	6153      	str	r3, [r2, #20]
	W25QX.nCSS_pin = 15;
 800099e:	4a8f      	ldr	r2, [pc, #572]	; (8000bdc <W25QX_Init+0x274>)
 80009a0:	230f      	movs	r3, #15
 80009a2:	7613      	strb	r3, [r2, #24]
	W25QX.pin_remap = self->pin_remap;
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	4a8c      	ldr	r2, [pc, #560]	; (8000bdc <W25QX_Init+0x274>)
 80009aa:	7113      	strb	r3, [r2, #4]
	W25QX.polarity = 1;
 80009ac:	4a8b      	ldr	r2, [pc, #556]	; (8000bdc <W25QX_Init+0x274>)
 80009ae:	2301      	movs	r3, #1
 80009b0:	7353      	strb	r3, [r2, #13]
	W25QX.phase = 1;
 80009b2:	4a8a      	ldr	r2, [pc, #552]	; (8000bdc <W25QX_Init+0x274>)
 80009b4:	2301      	movs	r3, #1
 80009b6:	7313      	strb	r3, [r2, #12]
	SPI_Init(W25QX);
 80009b8:	4e88      	ldr	r6, [pc, #544]	; (8000bdc <W25QX_Init+0x274>)
 80009ba:	466d      	mov	r5, sp
 80009bc:	f106 0410 	add.w	r4, r6, #16
 80009c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80009d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009d8:	f000 fcbc 	bl	8001354 <SPI_Init>

	W25Qx_Release_Power_Down();
 80009dc:	f000 f9dc 	bl	8000d98 <W25Qx_Release_Power_Down>
	Delay_us(5);
 80009e0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80009e4:	f7ff fe0a 	bl	80005fc <Delay_us>

	SPI_CSS_Low(W25QX);
 80009e8:	4e7c      	ldr	r6, [pc, #496]	; (8000bdc <W25QX_Init+0x274>)
 80009ea:	466d      	mov	r5, sp
 80009ec:	f106 0410 	add.w	r4, r6, #16
 80009f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a08:	f000 fe2a 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x4B);
 8000a0c:	4e73      	ldr	r6, [pc, #460]	; (8000bdc <W25QX_Init+0x274>)
 8000a0e:	234b      	movs	r3, #75	; 0x4b
 8000a10:	930e      	str	r3, [sp, #56]	; 0x38
 8000a12:	466d      	mov	r5, sp
 8000a14:	f106 0410 	add.w	r4, r6, #16
 8000a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a30:	f000 fe3e 	bl	80016b0 <SPI_TRX_Data>
	self->Manufacturer_ID = SPI_TRX_Data(W25QX, 0xAA);
 8000a34:	4e69      	ldr	r6, [pc, #420]	; (8000bdc <W25QX_Init+0x274>)
 8000a36:	23aa      	movs	r3, #170	; 0xaa
 8000a38:	930e      	str	r3, [sp, #56]	; 0x38
 8000a3a:	466d      	mov	r5, sp
 8000a3c:	f106 0410 	add.w	r4, r6, #16
 8000a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a58:	f000 fe2a 	bl	80016b0 <SPI_TRX_Data>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a62:	7153      	strb	r3, [r2, #5]
	self->Memory_Type = SPI_TRX_Data(W25QX, 0xAA);
 8000a64:	4e5d      	ldr	r6, [pc, #372]	; (8000bdc <W25QX_Init+0x274>)
 8000a66:	23aa      	movs	r3, #170	; 0xaa
 8000a68:	930e      	str	r3, [sp, #56]	; 0x38
 8000a6a:	466d      	mov	r5, sp
 8000a6c:	f106 0410 	add.w	r4, r6, #16
 8000a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a88:	f000 fe12 	bl	80016b0 <SPI_TRX_Data>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a92:	7193      	strb	r3, [r2, #6]
	self->Capacity = SPI_TRX_Data(W25QX, 0xAA);
 8000a94:	4e51      	ldr	r6, [pc, #324]	; (8000bdc <W25QX_Init+0x274>)
 8000a96:	23aa      	movs	r3, #170	; 0xaa
 8000a98:	930e      	str	r3, [sp, #56]	; 0x38
 8000a9a:	466d      	mov	r5, sp
 8000a9c:	f106 0410 	add.w	r4, r6, #16
 8000aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ab0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ab4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ab8:	f000 fdfa 	bl	80016b0 <SPI_TRX_Data>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ac2:	71d3      	strb	r3, [r2, #7]
	SPI_CSS_High(W25QX);
 8000ac4:	4e45      	ldr	r6, [pc, #276]	; (8000bdc <W25QX_Init+0x274>)
 8000ac6:	466d      	mov	r5, sp
 8000ac8:	f106 0410 	add.w	r4, r6, #16
 8000acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ae0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ae4:	f000 fdd0 	bl	8001688 <SPI_CSS_High>

	uint64_t x[8];
	SPI_CSS_Low(W25QX);
 8000ae8:	4e3c      	ldr	r6, [pc, #240]	; (8000bdc <W25QX_Init+0x274>)
 8000aea:	466d      	mov	r5, sp
 8000aec:	f106 0410 	add.w	r4, r6, #16
 8000af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b08:	f000 fdaa 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x4B);
 8000b0c:	4e33      	ldr	r6, [pc, #204]	; (8000bdc <W25QX_Init+0x274>)
 8000b0e:	234b      	movs	r3, #75	; 0x4b
 8000b10:	930e      	str	r3, [sp, #56]	; 0x38
 8000b12:	466d      	mov	r5, sp
 8000b14:	f106 0410 	add.w	r4, r6, #16
 8000b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b30:	f000 fdbe 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8000b34:	4e29      	ldr	r6, [pc, #164]	; (8000bdc <W25QX_Init+0x274>)
 8000b36:	23aa      	movs	r3, #170	; 0xaa
 8000b38:	930e      	str	r3, [sp, #56]	; 0x38
 8000b3a:	466d      	mov	r5, sp
 8000b3c:	f106 0410 	add.w	r4, r6, #16
 8000b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b58:	f000 fdaa 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8000b5c:	4e1f      	ldr	r6, [pc, #124]	; (8000bdc <W25QX_Init+0x274>)
 8000b5e:	23aa      	movs	r3, #170	; 0xaa
 8000b60:	930e      	str	r3, [sp, #56]	; 0x38
 8000b62:	466d      	mov	r5, sp
 8000b64:	f106 0410 	add.w	r4, r6, #16
 8000b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b7c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b80:	f000 fd96 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8000b84:	4e15      	ldr	r6, [pc, #84]	; (8000bdc <W25QX_Init+0x274>)
 8000b86:	23aa      	movs	r3, #170	; 0xaa
 8000b88:	930e      	str	r3, [sp, #56]	; 0x38
 8000b8a:	466d      	mov	r5, sp
 8000b8c:	f106 0410 	add.w	r4, r6, #16
 8000b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ba0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ba4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ba8:	f000 fd82 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, 0xAA);
 8000bac:	4e0b      	ldr	r6, [pc, #44]	; (8000bdc <W25QX_Init+0x274>)
 8000bae:	23aa      	movs	r3, #170	; 0xaa
 8000bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8000bb2:	466d      	mov	r5, sp
 8000bb4:	f106 0410 	add.w	r4, r6, #16
 8000bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bcc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bd0:	f000 fd6e 	bl	80016b0 <SPI_TRX_Data>
	for(int i = 0 ; i < 8; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000bd8:	e02a      	b.n	8000c30 <W25QX_Init+0x2c8>
 8000bda:	bf00      	nop
 8000bdc:	20000084 	.word	0x20000084
 8000be0:	40020000 	.word	0x40020000
	{
		x[i] = SPI_TRX_Data(W25QX, 0xAA);
 8000be4:	4e68      	ldr	r6, [pc, #416]	; (8000d88 <W25QX_Init+0x420>)
 8000be6:	23aa      	movs	r3, #170	; 0xaa
 8000be8:	930e      	str	r3, [sp, #56]	; 0x38
 8000bea:	466d      	mov	r5, sp
 8000bec:	f106 0410 	add.w	r4, r6, #16
 8000bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c08:	f000 fd52 	bl	80016b0 <SPI_TRX_Data>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	17da      	asrs	r2, r3, #31
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	3350      	adds	r3, #80	; 0x50
 8000c1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000c1e:	4413      	add	r3, r2
 8000c20:	3b48      	subs	r3, #72	; 0x48
 8000c22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000c26:	e9c3 1200 	strd	r1, r2, [r3]
	for(int i = 0 ; i < 8; i++)
 8000c2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	ddd6      	ble.n	8000be4 <W25QX_Init+0x27c>
	}
	self->Unique_ID = (x[0] << 56) | (x[1] << 48) | (x[2] << 40) | (x[3] << 32) | (x[4] << 24) | (x[5] << 16) |
 8000c36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000c3a:	f04f 0400 	mov.w	r4, #0
 8000c3e:	f04f 0500 	mov.w	r5, #0
 8000c42:	0615      	lsls	r5, r2, #24
 8000c44:	2400      	movs	r4, #0
 8000c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	f04f 0100 	mov.w	r1, #0
 8000c52:	0411      	lsls	r1, r2, #16
 8000c54:	2000      	movs	r0, #0
 8000c56:	ea44 0800 	orr.w	r8, r4, r0
 8000c5a:	ea45 0901 	orr.w	r9, r5, r1
 8000c5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	f04f 0100 	mov.w	r1, #0
 8000c6a:	0211      	lsls	r1, r2, #8
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	ea48 0a00 	orr.w	sl, r8, r0
 8000c72:	ea49 0b01 	orr.w	fp, r9, r1
 8000c76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	0003      	movs	r3, r0
 8000c84:	2200      	movs	r2, #0
 8000c86:	ea4a 0102 	orr.w	r1, sl, r2
 8000c8a:	6239      	str	r1, [r7, #32]
 8000c8c:	ea4b 0303 	orr.w	r3, fp, r3
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
 8000c92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	060b      	lsls	r3, r1, #24
 8000ca0:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8000ca4:	0602      	lsls	r2, r0, #24
 8000ca6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000caa:	4621      	mov	r1, r4
 8000cac:	4311      	orrs	r1, r2
 8000cae:	61b9      	str	r1, [r7, #24]
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	4319      	orrs	r1, r3
 8000cb4:	61f9      	str	r1, [r7, #28]
 8000cb6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	040b      	lsls	r3, r1, #16
 8000cc4:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000cc8:	0402      	lsls	r2, r0, #16
 8000cca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000cce:	4621      	mov	r1, r4
 8000cd0:	4311      	orrs	r1, r2
 8000cd2:	6139      	str	r1, [r7, #16]
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4319      	orrs	r1, r3
 8000cd8:	6179      	str	r1, [r7, #20]
			(x[6] << 8) | (x[7] << 0);
 8000cda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	020b      	lsls	r3, r1, #8
 8000ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000cec:	0202      	lsls	r2, r0, #8
	self->Unique_ID = (x[0] << 56) | (x[1] << 48) | (x[2] << 40) | (x[3] << 32) | (x[4] << 24) | (x[5] << 16) |
 8000cee:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	4311      	orrs	r1, r2
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	4319      	orrs	r1, r3
 8000cfc:	60f9      	str	r1, [r7, #12]
			(x[6] << 8) | (x[7] << 0);
 8000cfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000d06:	4621      	mov	r1, r4
 8000d08:	4311      	orrs	r1, r2
 8000d0a:	6039      	str	r1, [r7, #0]
 8000d0c:	4629      	mov	r1, r5
 8000d0e:	4319      	orrs	r1, r3
 8000d10:	6079      	str	r1, [r7, #4]
	self->Unique_ID = (x[0] << 56) | (x[1] << 48) | (x[2] << 40) | (x[3] << 32) | (x[4] << 24) | (x[5] << 16) |
 8000d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000d18:	e9c3 1202 	strd	r1, r2, [r3, #8]
	SPI_CSS_High(W25QX);
 8000d1c:	4e1a      	ldr	r6, [pc, #104]	; (8000d88 <W25QX_Init+0x420>)
 8000d1e:	466d      	mov	r5, sp
 8000d20:	f106 0410 	add.w	r4, r6, #16
 8000d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d38:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d3c:	f000 fca4 	bl	8001688 <SPI_CSS_High>

	if(self->Memory_Type == 0x13)	//W25Q80
 8000d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d42:	799b      	ldrb	r3, [r3, #6]
 8000d44:	2b13      	cmp	r3, #19
 8000d46:	d105      	bne.n	8000d54 <W25QX_Init+0x3ec>
	{
		self->Last_Address = 0x0FFFFF;
 8000d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <W25QX_Init+0x424>)
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	if(self->Memory_Type == 0x14)	//W25Q16
 8000d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	2b14      	cmp	r3, #20
 8000d5a:	d105      	bne.n	8000d68 <W25QX_Init+0x400>
	{
		self->Last_Address = 0x1FFFFF;
 8000d5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <W25QX_Init+0x428>)
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	if(self->Memory_Type == 0x15)	//W25Q32
 8000d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6a:	799b      	ldrb	r3, [r3, #6]
 8000d6c:	2b15      	cmp	r3, #21
 8000d6e:	d105      	bne.n	8000d7c <W25QX_Init+0x414>
	{
		self->Last_Address = 0x3FFFFF;
 8000d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <W25QX_Init+0x42c>)
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}

}
 8000d7c:	bf00      	nop
 8000d7e:	3784      	adds	r7, #132	; 0x84
 8000d80:	46bd      	mov	sp, r7
 8000d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d86:	bf00      	nop
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	000fffff 	.word	0x000fffff
 8000d90:	001fffff 	.word	0x001fffff
 8000d94:	003fffff 	.word	0x003fffff

08000d98 <W25Qx_Release_Power_Down>:

void W25Qx_Release_Power_Down(void)
{
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	b091      	sub	sp, #68	; 0x44
 8000d9c:	af10      	add	r7, sp, #64	; 0x40
	SPI_CSS_Low(W25QX);
 8000d9e:	4e1e      	ldr	r6, [pc, #120]	; (8000e18 <W25Qx_Release_Power_Down+0x80>)
 8000da0:	466d      	mov	r5, sp
 8000da2:	f106 0410 	add.w	r4, r6, #16
 8000da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dbe:	f000 fc4f 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0xAB);
 8000dc2:	4e15      	ldr	r6, [pc, #84]	; (8000e18 <W25Qx_Release_Power_Down+0x80>)
 8000dc4:	23ab      	movs	r3, #171	; 0xab
 8000dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8000dc8:	466d      	mov	r5, sp
 8000dca:	f106 0410 	add.w	r4, r6, #16
 8000dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8000de2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000de6:	f000 fc63 	bl	80016b0 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 8000dea:	4e0b      	ldr	r6, [pc, #44]	; (8000e18 <W25Qx_Release_Power_Down+0x80>)
 8000dec:	466d      	mov	r5, sp
 8000dee:	f106 0410 	add.w	r4, r6, #16
 8000df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e0a:	f000 fc3d 	bl	8001688 <SPI_CSS_High>
}
 8000e0e:	bf00      	nop
 8000e10:	3704      	adds	r7, #4
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000084 	.word	0x20000084

08000e1c <W25Qx_Write_Page>:
 * ################################################# Read & Write ##########################################
 * #########################################################################################################
 */

void W25Qx_Write_Page(uint32_t address, int *data[], int len)
{
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b097      	sub	sp, #92	; 0x5c
 8000e20:	af10      	add	r7, sp, #64	; 0x40
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
	Write_Enable();
 8000e28:	f7ff fcfe 	bl	8000828 <Write_Enable>
	SPI_CSS_Low(W25QX);
 8000e2c:	4e50      	ldr	r6, [pc, #320]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000e2e:	466d      	mov	r5, sp
 8000e30:	f106 0410 	add.w	r4, r6, #16
 8000e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e4c:	f000 fc08 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x02);
 8000e50:	4e47      	ldr	r6, [pc, #284]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000e52:	2302      	movs	r3, #2
 8000e54:	930e      	str	r3, [sp, #56]	; 0x38
 8000e56:	466d      	mov	r5, sp
 8000e58:	f106 0410 	add.w	r4, r6, #16
 8000e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e74:	f000 fc1c 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & address) >> 16);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4e3c      	ldr	r6, [pc, #240]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000e80:	930e      	str	r3, [sp, #56]	; 0x38
 8000e82:	466d      	mov	r5, sp
 8000e84:	f106 0410 	add.w	r4, r6, #16
 8000e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e98:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ea0:	f000 fc06 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & address) >> 8);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4e31      	ldr	r6, [pc, #196]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000eac:	930e      	str	r3, [sp, #56]	; 0x38
 8000eae:	466d      	mov	r5, sp
 8000eb0:	f106 0410 	add.w	r4, r6, #16
 8000eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ec8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ecc:	f000 fbf0 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & address) >> 0);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4e26      	ldr	r6, [pc, #152]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8000ed8:	466d      	mov	r5, sp
 8000eda:	f106 0410 	add.w	r4, r6, #16
 8000ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ef2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ef6:	f000 fbdb 	bl	80016b0 <SPI_TRX_Data>
	for(int i = 0; i < len; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e01a      	b.n	8000f36 <W25Qx_Write_Page+0x11a>
	{
		SPI_TRX_Data(W25QX, data[i]);
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	4413      	add	r3, r2
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4e19      	ldr	r6, [pc, #100]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8000f0e:	466d      	mov	r5, sp
 8000f10:	f106 0410 	add.w	r4, r6, #16
 8000f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f24:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f28:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f2c:	f000 fbc0 	bl	80016b0 <SPI_TRX_Data>
	for(int i = 0; i < len; i++)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbe0      	blt.n	8000f00 <W25Qx_Write_Page+0xe4>
	}
	SPI_CSS_High(W25QX);
 8000f3e:	4e0c      	ldr	r6, [pc, #48]	; (8000f70 <W25Qx_Write_Page+0x154>)
 8000f40:	466d      	mov	r5, sp
 8000f42:	f106 0410 	add.w	r4, r6, #16
 8000f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f5a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f5e:	f000 fb93 	bl	8001688 <SPI_CSS_High>
	Write_Disable();
 8000f62:	f7ff fcb1 	bl	80008c8 <Write_Disable>
}
 8000f66:	bf00      	nop
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000084 	.word	0x20000084

08000f74 <W25Qx_Read_Page>:
	SPI_CSS_High(W25QX);
	Write_Disable();
}

int W25Qx_Read_Page(uint32_t address)
{
 8000f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f76:	b095      	sub	sp, #84	; 0x54
 8000f78:	af10      	add	r7, sp, #64	; 0x40
 8000f7a:	6078      	str	r0, [r7, #4]
	int read;
	SPI_CSS_Low(W25QX);
 8000f7c:	4e49      	ldr	r6, [pc, #292]	; (80010a4 <W25Qx_Read_Page+0x130>)
 8000f7e:	466d      	mov	r5, sp
 8000f80:	f106 0410 	add.w	r4, r6, #16
 8000f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f9c:	f000 fb60 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x03);
 8000fa0:	4e40      	ldr	r6, [pc, #256]	; (80010a4 <W25Qx_Read_Page+0x130>)
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8000fa6:	466d      	mov	r5, sp
 8000fa8:	f106 0410 	add.w	r4, r6, #16
 8000fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fc0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fc4:	f000 fb74 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0xFF0000 & address) >> 16);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4e35      	ldr	r6, [pc, #212]	; (80010a4 <W25Qx_Read_Page+0x130>)
 8000fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8000fd2:	466d      	mov	r5, sp
 8000fd4:	f106 0410 	add.w	r4, r6, #16
 8000fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ff0:	f000 fb5e 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x00FF00 & address) >> 8);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4e2a      	ldr	r6, [pc, #168]	; (80010a4 <W25Qx_Read_Page+0x130>)
 8000ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8000ffe:	466d      	mov	r5, sp
 8001000:	f106 0410 	add.w	r4, r6, #16
 8001004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001014:	e885 0003 	stmia.w	r5, {r0, r1}
 8001018:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800101c:	f000 fb48 	bl	80016b0 <SPI_TRX_Data>
	SPI_TRX_Data(W25QX, (0x0000FF & address) >> 0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4e1f      	ldr	r6, [pc, #124]	; (80010a4 <W25Qx_Read_Page+0x130>)
 8001026:	930e      	str	r3, [sp, #56]	; 0x38
 8001028:	466d      	mov	r5, sp
 800102a:	f106 0410 	add.w	r4, r6, #16
 800102e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800103e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001042:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001046:	f000 fb33 	bl	80016b0 <SPI_TRX_Data>
	read = SPI_TRX_Data(W25QX, 0xAA);
 800104a:	4e16      	ldr	r6, [pc, #88]	; (80010a4 <W25Qx_Read_Page+0x130>)
 800104c:	23aa      	movs	r3, #170	; 0xaa
 800104e:	930e      	str	r3, [sp, #56]	; 0x38
 8001050:	466d      	mov	r5, sp
 8001052:	f106 0410 	add.w	r4, r6, #16
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001066:	e885 0003 	stmia.w	r5, {r0, r1}
 800106a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800106e:	f000 fb1f 	bl	80016b0 <SPI_TRX_Data>
 8001072:	60f8      	str	r0, [r7, #12]
	SPI_CSS_High(W25QX);
 8001074:	4e0b      	ldr	r6, [pc, #44]	; (80010a4 <W25Qx_Read_Page+0x130>)
 8001076:	466d      	mov	r5, sp
 8001078:	f106 0410 	add.w	r4, r6, #16
 800107c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001090:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001094:	f000 faf8 	bl	8001688 <SPI_CSS_High>
	return read;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000084 	.word	0x20000084

080010a8 <W25Qx_Chip_Erase>:
 * ################################################# Chip Erase ############################################
 * #########################################################################################################
 */

int W25Qx_Chip_Erase(void)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b091      	sub	sp, #68	; 0x44
 80010ac:	af10      	add	r7, sp, #64	; 0x40
	Write_Enable();
 80010ae:	f7ff fbbb 	bl	8000828 <Write_Enable>
	SPI_CSS_Low(W25QX);
 80010b2:	4e22      	ldr	r6, [pc, #136]	; (800113c <W25Qx_Chip_Erase+0x94>)
 80010b4:	466d      	mov	r5, sp
 80010b6:	f106 0410 	add.w	r4, r6, #16
 80010ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010d2:	f000 fac5 	bl	8001660 <SPI_CSS_Low>
	SPI_TRX_Data(W25QX, 0x60);
 80010d6:	4e19      	ldr	r6, [pc, #100]	; (800113c <W25Qx_Chip_Erase+0x94>)
 80010d8:	2360      	movs	r3, #96	; 0x60
 80010da:	930e      	str	r3, [sp, #56]	; 0x38
 80010dc:	466d      	mov	r5, sp
 80010de:	f106 0410 	add.w	r4, r6, #16
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010fa:	f000 fad9 	bl	80016b0 <SPI_TRX_Data>
	SPI_CSS_High(W25QX);
 80010fe:	4e0f      	ldr	r6, [pc, #60]	; (800113c <W25Qx_Chip_Erase+0x94>)
 8001100:	466d      	mov	r5, sp
 8001102:	f106 0410 	add.w	r4, r6, #16
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001112:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001116:	e885 0003 	stmia.w	r5, {r0, r1}
 800111a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800111e:	f000 fab3 	bl	8001688 <SPI_CSS_High>
	do{
		Read_Status_Register();
 8001122:	f7ff fa91 	bl	8000648 <Read_Status_Register>
	}while(SR.BUSY == 1);
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <W25Qx_Chip_Erase+0x98>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d0f9      	beq.n	8001122 <W25Qx_Chip_Erase+0x7a>
	Write_Disable();
 800112e:	f7ff fbcb 	bl	80008c8 <Write_Disable>
	return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3704      	adds	r7, #4
 8001138:	46bd      	mov	sp, r7
 800113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113c:	20000084 	.word	0x20000084
 8001140:	200000cc 	.word	0x200000cc

08001144 <GPIO_Pin_Setup>:

#include "GPIO.h"


int GPIO_Pin_Setup(GPIO_TypeDef *PORT, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	70fb      	strb	r3, [r7, #3]
 8001156:	460b      	mov	r3, r1
 8001158:	70bb      	strb	r3, [r7, #2]
 800115a:	4613      	mov	r3, r2
 800115c:	707b      	strb	r3, [r7, #1]

	if(PORT == GPIOA)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a61      	ldr	r2, [pc, #388]	; (80012e8 <GPIO_Pin_Setup+0x1a4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d106      	bne.n	8001174 <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 8001166:	4b61      	ldr	r3, [pc, #388]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a60      	ldr	r2, [pc, #384]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	e039      	b.n	80011e8 <GPIO_Pin_Setup+0xa4>
	} else 	if(PORT == GPIOB)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a5e      	ldr	r2, [pc, #376]	; (80012f0 <GPIO_Pin_Setup+0x1ac>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 800117c:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a5a      	ldr	r2, [pc, #360]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	e02e      	b.n	80011e8 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOC)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a59      	ldr	r2, [pc, #356]	; (80012f4 <GPIO_Pin_Setup+0x1b0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d106      	bne.n	80011a0 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a55      	ldr	r2, [pc, #340]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	e023      	b.n	80011e8 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOD)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a55      	ldr	r2, [pc, #340]	; (80012f8 <GPIO_Pin_Setup+0x1b4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d106      	bne.n	80011b6 <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 80011a8:	4b50      	ldr	r3, [pc, #320]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	e018      	b.n	80011e8 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <GPIO_Pin_Setup+0x1b8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d106      	bne.n	80011cc <GPIO_Pin_Setup+0x88>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a4a      	ldr	r2, [pc, #296]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	e00d      	b.n	80011e8 <GPIO_Pin_Setup+0xa4>
	}else 	if(PORT == GPIOH)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <GPIO_Pin_Setup+0x1bc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d106      	bne.n	80011e2 <GPIO_Pin_Setup+0x9e>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOHEN;
 80011d4:	4b45      	ldr	r3, [pc, #276]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a44      	ldr	r2, [pc, #272]	; (80012ec <GPIO_Pin_Setup+0x1a8>)
 80011da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	e002      	b.n	80011e8 <GPIO_Pin_Setup+0xa4>
	}else
	{
		return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e078      	b.n	80012da <GPIO_Pin_Setup+0x196>
//	PORT -> OTYPER  &= ~((0xFF) << (1 * pin));
//	PORT -> OSPEEDR &= ~((0xFF) << (2 * pin));
//	PORT -> PUPDR   &= ~((0xFF) << (2 * pin));


	PORT -> MODER	&= ~(0x3 << (2 * pin));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	0052      	lsls	r2, r2, #1
 80011f0:	2103      	movs	r1, #3
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	43d2      	mvns	r2, r2
 80011f8:	401a      	ands	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
	PORT -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	78ba      	ldrb	r2, [r7, #2]
 8001204:	0992      	lsrs	r2, r2, #6
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	4611      	mov	r1, r2
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	0052      	lsls	r2, r2, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]

	PORT -> OTYPER	&= ~(0x1 << (1 * pin));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	43d2      	mvns	r2, r2
 8001226:	401a      	ands	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	605a      	str	r2, [r3, #4]
	PORT -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	78ba      	ldrb	r2, [r7, #2]
 8001232:	0912      	lsrs	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	f002 0103 	and.w	r1, r2, #3
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	605a      	str	r2, [r3, #4]

	PORT -> OSPEEDR	&= ~(0x3 << (2 * pin));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	0052      	lsls	r2, r2, #1
 800124e:	2103      	movs	r1, #3
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	43d2      	mvns	r2, r2
 8001256:	401a      	ands	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
	PORT -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	78ba      	ldrb	r2, [r7, #2]
 8001262:	0892      	lsrs	r2, r2, #2
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 0103 	and.w	r1, r2, #3
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	0052      	lsls	r2, r2, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]

	PORT -> PUPDR	&= ~(0x03 << (2 * pin));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	2103      	movs	r1, #3
 8001282:	fa01 f202 	lsl.w	r2, r1, r2
 8001286:	43d2      	mvns	r2, r2
 8001288:	401a      	ands	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60da      	str	r2, [r3, #12]
	PORT -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	78ba      	ldrb	r2, [r7, #2]
 8001294:	f002 0103 	and.w	r1, r2, #3
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	0052      	lsls	r2, r2, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]

	if(pin < 8)PORT -> AFR[0] |= ( alternate_function << (4 * (pin)));
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	d80a      	bhi.n	80012c2 <GPIO_Pin_Setup+0x17e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	7879      	ldrb	r1, [r7, #1]
 80012b2:	78fa      	ldrb	r2, [r7, #3]
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	621a      	str	r2, [r3, #32]
 80012c0:	e00a      	b.n	80012d8 <GPIO_Pin_Setup+0x194>
	else	   PORT -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	7879      	ldrb	r1, [r7, #1]
 80012c8:	78fa      	ldrb	r2, [r7, #3]
 80012ca:	3a08      	subs	r2, #8
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24

	if (alternate_function == NONE) {}

	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021c00 	.word	0x40021c00

08001304 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 800130e:	2201      	movs	r2, #1
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	615a      	str	r2, [r3, #20]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2101      	movs	r1, #1
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	43d2      	mvns	r2, r2
 8001340:	401a      	ands	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	615a      	str	r2, [r3, #20]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SPI_Init>:
	}
	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
}

void SPI_Init(SPI_Config SPI)
{
 8001354:	b084      	sub	sp, #16
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
 800135a:	f107 0c08 	add.w	ip, r7, #8
 800135e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}



	if (SPI.SPI == SPI1)   //CK -> PA5 	//MISO -> PA6 	//MOSI -> PA7
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4aa2      	ldr	r2, [pc, #648]	; (80015f0 <SPI_Init+0x29c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d130      	bne.n	80013cc <SPI_Init+0x78>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 800136a:	4ba2      	ldr	r3, [pc, #648]	; (80015f4 <SPI_Init+0x2a0>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4aa1      	ldr	r2, [pc, #644]	; (80015f4 <SPI_Init+0x2a0>)
 8001370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44

		if(SPI.pin_remap == 0)
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d012      	beq.n	80013a8 <SPI_Init+0x54>
		{
			GPIO_Pin_Setup(GPIOA, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 8001382:	2305      	movs	r3, #5
 8001384:	228c      	movs	r2, #140	; 0x8c
 8001386:	2105      	movs	r1, #5
 8001388:	489b      	ldr	r0, [pc, #620]	; (80015f8 <SPI_Init+0x2a4>)
 800138a:	f7ff fedb 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOA, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 800138e:	2305      	movs	r3, #5
 8001390:	228c      	movs	r2, #140	; 0x8c
 8001392:	2106      	movs	r1, #6
 8001394:	4898      	ldr	r0, [pc, #608]	; (80015f8 <SPI_Init+0x2a4>)
 8001396:	f7ff fed5 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOA, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 800139a:	2305      	movs	r3, #5
 800139c:	228c      	movs	r2, #140	; 0x8c
 800139e:	2107      	movs	r1, #7
 80013a0:	4895      	ldr	r0, [pc, #596]	; (80015f8 <SPI_Init+0x2a4>)
 80013a2:	f7ff fecf 	bl	8001144 <GPIO_Pin_Setup>
 80013a6:	e011      	b.n	80013cc <SPI_Init+0x78>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 80013a8:	2305      	movs	r3, #5
 80013aa:	228c      	movs	r2, #140	; 0x8c
 80013ac:	2103      	movs	r1, #3
 80013ae:	4893      	ldr	r0, [pc, #588]	; (80015fc <SPI_Init+0x2a8>)
 80013b0:	f7ff fec8 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 80013b4:	2305      	movs	r3, #5
 80013b6:	228c      	movs	r2, #140	; 0x8c
 80013b8:	2104      	movs	r1, #4
 80013ba:	4890      	ldr	r0, [pc, #576]	; (80015fc <SPI_Init+0x2a8>)
 80013bc:	f7ff fec2 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 80013c0:	2305      	movs	r3, #5
 80013c2:	228c      	movs	r2, #140	; 0x8c
 80013c4:	2105      	movs	r1, #5
 80013c6:	488d      	ldr	r0, [pc, #564]	; (80015fc <SPI_Init+0x2a8>)
 80013c8:	f7ff febc 	bl	8001144 <GPIO_Pin_Setup>
		}
	}
	if(SPI.SPI == SPI2)	//CK -> PB10 	//MISO -> PB14 	//MOSI -> PB15
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4a8c      	ldr	r2, [pc, #560]	; (8001600 <SPI_Init+0x2ac>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d130      	bne.n	8001436 <SPI_Init+0xe2>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80013d4:	4b87      	ldr	r3, [pc, #540]	; (80015f4 <SPI_Init+0x2a0>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a86      	ldr	r2, [pc, #536]	; (80015f4 <SPI_Init+0x2a0>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40

		if(SPI.pin_remap == 0)
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	f083 0301 	eor.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d012      	beq.n	8001412 <SPI_Init+0xbe>
		{
	        GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 80013ec:	2305      	movs	r3, #5
 80013ee:	228c      	movs	r2, #140	; 0x8c
 80013f0:	210a      	movs	r1, #10
 80013f2:	4882      	ldr	r0, [pc, #520]	; (80015fc <SPI_Init+0x2a8>)
 80013f4:	f7ff fea6 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 80013f8:	2305      	movs	r3, #5
 80013fa:	228c      	movs	r2, #140	; 0x8c
 80013fc:	2102      	movs	r1, #2
 80013fe:	4881      	ldr	r0, [pc, #516]	; (8001604 <SPI_Init+0x2b0>)
 8001400:	f7ff fea0 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8001404:	2305      	movs	r3, #5
 8001406:	228c      	movs	r2, #140	; 0x8c
 8001408:	2103      	movs	r1, #3
 800140a:	487e      	ldr	r0, [pc, #504]	; (8001604 <SPI_Init+0x2b0>)
 800140c:	f7ff fe9a 	bl	8001144 <GPIO_Pin_Setup>
 8001410:	e011      	b.n	8001436 <SPI_Init+0xe2>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 13, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 8001412:	2305      	movs	r3, #5
 8001414:	228c      	movs	r2, #140	; 0x8c
 8001416:	210d      	movs	r1, #13
 8001418:	4878      	ldr	r0, [pc, #480]	; (80015fc <SPI_Init+0x2a8>)
 800141a:	f7ff fe93 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 14, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 800141e:	2305      	movs	r3, #5
 8001420:	228c      	movs	r2, #140	; 0x8c
 8001422:	210e      	movs	r1, #14
 8001424:	4875      	ldr	r0, [pc, #468]	; (80015fc <SPI_Init+0x2a8>)
 8001426:	f7ff fe8d 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 15, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 800142a:	2305      	movs	r3, #5
 800142c:	228c      	movs	r2, #140	; 0x8c
 800142e:	210f      	movs	r1, #15
 8001430:	4872      	ldr	r0, [pc, #456]	; (80015fc <SPI_Init+0x2a8>)
 8001432:	f7ff fe87 	bl	8001144 <GPIO_Pin_Setup>
		}

	}
	if(SPI.SPI == SPI3)	//CK -> PB12 	//MISO -> PB4 	//MOSI -> PB5
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4a73      	ldr	r2, [pc, #460]	; (8001608 <SPI_Init+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d130      	bne.n	80014a0 <SPI_Init+0x14c>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 800143e:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <SPI_Init+0x2a0>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a6c      	ldr	r2, [pc, #432]	; (80015f4 <SPI_Init+0x2a0>)
 8001444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40

		if(SPI.pin_remap == 0)
 800144a:	7b3b      	ldrb	r3, [r7, #12]
 800144c:	f083 0301 	eor.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d012      	beq.n	800147c <SPI_Init+0x128>
		{
	        GPIO_Pin_Setup(GPIOC, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8001456:	2306      	movs	r3, #6
 8001458:	228c      	movs	r2, #140	; 0x8c
 800145a:	210a      	movs	r1, #10
 800145c:	4869      	ldr	r0, [pc, #420]	; (8001604 <SPI_Init+0x2b0>)
 800145e:	f7ff fe71 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8001462:	2306      	movs	r3, #6
 8001464:	228c      	movs	r2, #140	; 0x8c
 8001466:	210b      	movs	r1, #11
 8001468:	4866      	ldr	r0, [pc, #408]	; (8001604 <SPI_Init+0x2b0>)
 800146a:	f7ff fe6b 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOC, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 800146e:	2306      	movs	r3, #6
 8001470:	228c      	movs	r2, #140	; 0x8c
 8001472:	210c      	movs	r1, #12
 8001474:	4863      	ldr	r0, [pc, #396]	; (8001604 <SPI_Init+0x2b0>)
 8001476:	f7ff fe65 	bl	8001144 <GPIO_Pin_Setup>
 800147a:	e011      	b.n	80014a0 <SPI_Init+0x14c>
		}
		else
		{
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 800147c:	2306      	movs	r3, #6
 800147e:	228c      	movs	r2, #140	; 0x8c
 8001480:	2103      	movs	r1, #3
 8001482:	485e      	ldr	r0, [pc, #376]	; (80015fc <SPI_Init+0x2a8>)
 8001484:	f7ff fe5e 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8001488:	2306      	movs	r3, #6
 800148a:	228c      	movs	r2, #140	; 0x8c
 800148c:	2104      	movs	r1, #4
 800148e:	485b      	ldr	r0, [pc, #364]	; (80015fc <SPI_Init+0x2a8>)
 8001490:	f7ff fe58 	bl	8001144 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 6);
 8001494:	2306      	movs	r3, #6
 8001496:	228c      	movs	r2, #140	; 0x8c
 8001498:	2105      	movs	r1, #5
 800149a:	4858      	ldr	r0, [pc, #352]	; (80015fc <SPI_Init+0x2a8>)
 800149c:	f7ff fe52 	bl	8001144 <GPIO_Pin_Setup>





	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014aa:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.phase << 0;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	7d3b      	ldrb	r3, [r7, #20]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.polarity << 1;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	7d7b      	ldrb	r3, [r7, #21]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.mode  << 2;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4619      	mov	r1, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.frequency << 3;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4619      	mov	r1, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.Frame << 11;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	02db      	lsls	r3, r3, #11
 80014f2:	4619      	mov	r1, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.CRC_Enable << 13;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	035b      	lsls	r3, r3, #13
 8001502:	4619      	mov	r1, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.LSB_MSB << 7;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	7dbb      	ldrb	r3, [r7, #22]
 8001510:	01db      	lsls	r3, r3, #7
 8001512:	4619      	mov	r1, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR2 &= ~(SPI_CR2_FRF);
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f022 0210 	bic.w	r2, r2, #16
 8001524:	605a      	str	r2, [r3, #4]

	SPI.SPI -> CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001530:	601a      	str	r2, [r3, #0]
//	SPI.SPI -> CR2 |= SPI_CR2_SSOE;


	if(SPI.mode == SPI_Master)
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d130      	bne.n	800159a <SPI_Init+0x246>
	{
		SPI.SPI -> CR1 |= SPI_CR1_MSTR ;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f042 0204 	orr.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
		switch (SPI.type)
 8001544:	7b7b      	ldrb	r3, [r7, #13]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d01a      	beq.n	8001580 <SPI_Init+0x22c>
 800154a:	2b02      	cmp	r3, #2
 800154c:	dc27      	bgt.n	800159e <SPI_Init+0x24a>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <SPI_Init+0x204>
 8001552:	2b01      	cmp	r3, #1
 8001554:	d007      	beq.n	8001566 <SPI_Init+0x212>
			case SPI_Half_Duplex_Master_RX:
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
				break;
			default:
				break;
 8001556:	e022      	b.n	800159e <SPI_Init+0x24a>
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001562:	601a      	str	r2, [r3, #0]
				break;
 8001564:	e01c      	b.n	80015a0 <SPI_Init+0x24c>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001570:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800157c:	601a      	str	r2, [r3, #0]
				break;
 800157e:	e00f      	b.n	80015a0 <SPI_Init+0x24c>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001596:	601a      	str	r2, [r3, #0]
				break;
 8001598:	e002      	b.n	80015a0 <SPI_Init+0x24c>
		}

	}
 800159a:	bf00      	nop
 800159c:	e000      	b.n	80015a0 <SPI_Init+0x24c>
				break;
 800159e:	bf00      	nop

	if(SPI.mode == SPI_Slave)
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d13f      	bne.n	8001626 <SPI_Init+0x2d2>
	{
	SPI.SPI -> CR1 &= ~SPI_CR1_MSTR;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f022 0204 	bic.w	r2, r2, #4
 80015b0:	601a      	str	r2, [r3, #0]
	switch (SPI.type)
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d029      	beq.n	800160c <SPI_Init+0x2b8>
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	dc36      	bgt.n	800162a <SPI_Init+0x2d6>
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d002      	beq.n	80015c6 <SPI_Init+0x272>
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d007      	beq.n	80015d4 <SPI_Init+0x280>
		case SPI_Half_Duplex_Slave_RX:
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
			break;
		default:
			break;
 80015c4:	e031      	b.n	800162a <SPI_Init+0x2d6>
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d0:	601a      	str	r2, [r3, #0]
			break;
 80015d2:	e02b      	b.n	800162c <SPI_Init+0x2d8>
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015de:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ea:	601a      	str	r2, [r3, #0]
			break;
 80015ec:	e01e      	b.n	800162c <SPI_Init+0x2d8>
 80015ee:	bf00      	nop
 80015f0:	40013000 	.word	0x40013000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40003800 	.word	0x40003800
 8001604:	40020800 	.word	0x40020800
 8001608:	40003c00 	.word	0x40003c00
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001616:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001622:	601a      	str	r2, [r3, #0]
			break;
 8001624:	e002      	b.n	800162c <SPI_Init+0x2d8>
	 }
	}
 8001626:	bf00      	nop
 8001628:	e000      	b.n	800162c <SPI_Init+0x2d8>
			break;
 800162a:	bf00      	nop


	GPIO_Pin_Setup(SPI.nCSS_Port, SPI.nCSS_pin, GENERAL_PURPOSE_OUTPUT_PUSHPULL_PULLUP, NONE);
 800162c:	69f8      	ldr	r0, [r7, #28]
 800162e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001632:	2300      	movs	r3, #0
 8001634:	224d      	movs	r2, #77	; 0x4d
 8001636:	f7ff fd85 	bl	8001144 <GPIO_Pin_Setup>

	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe5e 	bl	8001304 <GPIO_Pin_High>

	SPI.SPI -> CR1 |= SPI_CR1_SPE;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001652:	601a      	str	r2, [r3, #0]

}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800165c:	b004      	add	sp, #16
 800165e:	4770      	bx	lr

08001660 <SPI_CSS_Low>:


void SPI_CSS_Low(SPI_Config SPI)
{
 8001660:	b084      	sub	sp, #16
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
 8001666:	f107 0c08 	add.w	ip, r7, #8
 800166a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_Low(SPI.nCSS_Port, SPI.nCSS_pin);
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fe56 	bl	8001328 <GPIO_Pin_Low>
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001684:	b004      	add	sp, #16
 8001686:	4770      	bx	lr

08001688 <SPI_CSS_High>:


void SPI_CSS_High(SPI_Config SPI)
{
 8001688:	b084      	sub	sp, #16
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
 800168e:	f107 0c08 	add.w	ip, r7, #8
 8001692:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f897 2020 	ldrb.w	r2, [r7, #32]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe30 	bl	8001304 <GPIO_Pin_High>
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ac:	b004      	add	sp, #16
 80016ae:	4770      	bx	lr

080016b0 <SPI_TRX_Data>:


//
int SPI_TRX_Data(SPI_Config SPI, int data)
{
 80016b0:	b084      	sub	sp, #16
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	f107 0c10 	add.w	ip, r7, #16
 80016bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int temp = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
	while (!(SPI.SPI->SR & SPI_SR_TXE));
 80016c4:	bf00      	nop
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f9      	beq.n	80016c6 <SPI_TRX_Data+0x16>
	SPI.SPI -> DR = data;
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016d6:	60da      	str	r2, [r3, #12]
	while (!(SPI.SPI->SR & SPI_SR_RXNE));
 80016d8:	bf00      	nop
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f9      	beq.n	80016da <SPI_TRX_Data+0x2a>
	temp = SPI.SPI -> DR;
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	607b      	str	r3, [r7, #4]
	while (!(SPI.SPI->SR & SPI_SR_TXE));
 80016ec:	bf00      	nop
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f9      	beq.n	80016ee <SPI_TRX_Data+0x3e>
	while (SPI.SPI->SR & SPI_SR_BSY);
 80016fa:	bf00      	nop
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <SPI_TRX_Data+0x4c>
	return temp;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	b004      	add	sp, #16
 8001716:	4770      	bx	lr

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ffc2 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <MCU_Clock_Setup>:
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 80017b6:	2304      	movs	r3, #4
 80017b8:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 80017ba:	23a8      	movs	r3, #168	; 0xa8
 80017bc:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 80017c2:	2307      	movs	r3, #7
 80017c4:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a3a      	ldr	r2, [pc, #232]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80017d8:	bf00      	nop
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f9      	beq.n	80017da <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a34      	ldr	r2, [pc, #208]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <MCU_Clock_Setup+0x110>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <MCU_Clock_Setup+0x110>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <MCU_Clock_Setup+0x114>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a30      	ldr	r2, [pc, #192]	; (80018c4 <MCU_Clock_Setup+0x114>)
 8001804:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001808:	f043 0305 	orr.w	r3, r3, #5
 800180c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	793a      	ldrb	r2, [r7, #4]
 8001814:	0611      	lsls	r1, r2, #24
 8001816:	797a      	ldrb	r2, [r7, #5]
 8001818:	0412      	lsls	r2, r2, #16
 800181a:	4311      	orrs	r1, r2
 800181c:	79ba      	ldrb	r2, [r7, #6]
 800181e:	0192      	lsls	r2, r2, #6
 8001820:	4311      	orrs	r1, r2
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	430a      	orrs	r2, r1
 8001826:	4611      	mov	r1, r2
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <MCU_Clock_Setup+0x10c>)
 800182a:	430b      	orrs	r3, r1
 800182c:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MCU_Clock_Setup+0x10c>)
 800183c:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <MCU_Clock_Setup+0x10c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001848:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800184c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MCU_Clock_Setup+0x10c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001864:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8001866:	bf00      	nop
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MCU_Clock_Setup+0x10c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f9      	beq.n	8001868 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a10      	ldr	r2, [pc, #64]	; (80018bc <MCU_Clock_Setup+0x10c>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001880:	bf00      	nop
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MCU_Clock_Setup+0x10c>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b08      	cmp	r3, #8
 800188c:	d1f9      	bne.n	8001882 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 800188e:	f000 f90f 	bl	8001ab0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MCU_Clock_Setup+0x118>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <MCU_Clock_Setup+0x11c>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff63 	bl	800176c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <MCU_Clock_Setup+0x10c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	20000000 	.word	0x20000000
 80018cc:	18618619 	.word	0x18618619

080018d0 <Delay_Config>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <Delay_Config+0x2c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <Delay_Config+0x2c>)
 80018dc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80018e0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <Delay_Config+0x2c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <Delay_Config+0x2c>)
 80018ea:	2205      	movs	r2, #5
 80018ec:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <Delay_ms>:

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800190a:	edd7 7a01 	vldr	s15, [r7, #4]
 800190e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001954 <Delay_ms+0x54>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191a:	ee17 3a90 	vmov	r3, s15
 800191e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <Delay_ms+0x58>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <Delay_ms+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <Delay_ms+0x58>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a09      	ldr	r2, [pc, #36]	; (8001958 <Delay_ms+0x58>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001938:	bf00      	nop
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <Delay_ms+0x58>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f9      	beq.n	800193a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	48241000 	.word	0x48241000
 8001958:	e000e010 	.word	0xe000e010

0800195c <main>:


W25Qx_Typedef W25QX16;

int main(void)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af00      	add	r7, sp, #0
	W25QX16.SPI_Port = SPI1;
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <main+0xa4>)
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <main+0xa8>)
 8001966:	601a      	str	r2, [r3, #0]
	W25QX16.pin_remap = true;
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <main+0xa4>)
 800196a:	2201      	movs	r2, #1
 800196c:	711a      	strb	r2, [r3, #4]

	MCU_Clock_Setup();
 800196e:	f7ff ff1f 	bl	80017b0 <MCU_Clock_Setup>
	Console_Init(USART1, 460800);
 8001972:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 8001976:	4824      	ldr	r0, [pc, #144]	; (8001a08 <main+0xac>)
 8001978:	f7fe fc92 	bl	80002a0 <Console_Init>
	Delay_Config();
 800197c:	f7ff ffa8 	bl	80018d0 <Delay_Config>

	printConsole(USART1, "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n");
 8001980:	4922      	ldr	r1, [pc, #136]	; (8001a0c <main+0xb0>)
 8001982:	4821      	ldr	r0, [pc, #132]	; (8001a08 <main+0xac>)
 8001984:	f7fe fdea 	bl	800055c <printConsole>

	W25QX_Init(&W25QX16);
 8001988:	481d      	ldr	r0, [pc, #116]	; (8001a00 <main+0xa4>)
 800198a:	f7fe ffed 	bl	8000968 <W25QX_Init>
	W25Qx_Chip_Erase();
 800198e:	f7ff fb8b 	bl	80010a8 <W25Qx_Chip_Erase>

	int *data[10] = {0,1,2,3,4,5,6,7,8,9};
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <main+0xb4>)
 8001994:	1d3c      	adds	r4, r7, #4
 8001996:	461d      	mov	r5, r3
 8001998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019a4:	e884 0003 	stmia.w	r4, {r0, r1}


	W25Qx_Write_Page(0x000000, data, 10);
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	220a      	movs	r2, #10
 80019ac:	4619      	mov	r1, r3
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fa34 	bl	8000e1c <W25Qx_Write_Page>


	int i = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop forever */
	for(;;)
	{
//		printConsole(USART1, "0x%x, 0x%x \r\n",MF,ID);
		if((i % 255)==0)
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <main+0xb8>)
 80019bc:	fb83 1302 	smull	r1, r3, r3, r2
 80019c0:	4413      	add	r3, r2
 80019c2:	11d9      	asrs	r1, r3, #7
 80019c4:	17d3      	asrs	r3, r2, #31
 80019c6:	1ac9      	subs	r1, r1, r3
 80019c8:	460b      	mov	r3, r1
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	1a5b      	subs	r3, r3, r1
 80019ce:	1ad1      	subs	r1, r2, r3
 80019d0:	2900      	cmp	r1, #0
 80019d2:	d103      	bne.n	80019dc <main+0x80>
		{
			printConsole(USART1,"\r\n");
 80019d4:	4910      	ldr	r1, [pc, #64]	; (8001a18 <main+0xbc>)
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <main+0xac>)
 80019d8:	f7fe fdc0 	bl	800055c <printConsole>
		}
		printConsole(USART1, "0x%x,",W25Qx_Read_Page(i));
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fac8 	bl	8000f74 <W25Qx_Read_Page>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <main+0xc0>)
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <main+0xac>)
 80019ec:	f7fe fdb6 	bl	800055c <printConsole>


		Delay_ms(10);
 80019f0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80019f4:	f7ff ff84 	bl	8001900 <Delay_ms>
		i++;
 80019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fa:	3301      	adds	r3, #1
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if((i % 255)==0)
 80019fe:	e7db      	b.n	80019b8 <main+0x5c>
 8001a00:	20000118 	.word	0x20000118
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	0800254c 	.word	0x0800254c
 8001a10:	08002584 	.word	0x08002584
 8001a14:	80808081 	.word	0x80808081
 8001a18:	08002578 	.word	0x08002578
 8001a1c:	0800257c 	.word	0x0800257c

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f000 f8d8 	bl	8001c04 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20020000 	.word	0x20020000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	20000130 	.word	0x20000130
 8001a88:	20000148 	.word	0x20000148

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d011      	beq.n	8001afe <SystemCoreClockUpdate+0x4e>
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d844      	bhi.n	8001b6a <SystemCoreClockUpdate+0xba>
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <SystemCoreClockUpdate+0x3e>
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d004      	beq.n	8001af6 <SystemCoreClockUpdate+0x46>
 8001aec:	e03d      	b.n	8001b6a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <SystemCoreClockUpdate+0xf0>)
 8001af0:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <SystemCoreClockUpdate+0xf4>)
 8001af2:	601a      	str	r2, [r3, #0]
      break;
 8001af4:	e03d      	b.n	8001b72 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <SystemCoreClockUpdate+0xf0>)
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <SystemCoreClockUpdate+0xf8>)
 8001afa:	601a      	str	r2, [r3, #0]
      break;
 8001afc:	e039      	b.n	8001b72 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0d9b      	lsrs	r3, r3, #22
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b12:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <SystemCoreClockUpdate+0xf8>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001b24:	6852      	ldr	r2, [r2, #4]
 8001b26:	0992      	lsrs	r2, r2, #6
 8001b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e00b      	b.n	8001b4c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <SystemCoreClockUpdate+0xf4>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001b3e:	6852      	ldr	r2, [r2, #4]
 8001b40:	0992      	lsrs	r2, r2, #6
 8001b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0c1b      	lsrs	r3, r3, #16
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <SystemCoreClockUpdate+0xf0>)
 8001b66:	6013      	str	r3, [r2, #0]
      break;
 8001b68:	e003      	b.n	8001b72 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <SystemCoreClockUpdate+0xf0>)
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <SystemCoreClockUpdate+0xf4>)
 8001b6e:	601a      	str	r2, [r3, #0]
      break;
 8001b70:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <SystemCoreClockUpdate+0xec>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <SystemCoreClockUpdate+0xfc>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <SystemCoreClockUpdate+0xf0>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <SystemCoreClockUpdate+0xf0>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	017d7840 	.word	0x017d7840
 8001bac:	080025ac 	.word	0x080025ac

08001bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb4:	f7ff ff6a 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bde:	f000 f817 	bl	8001c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be2:	f7ff febb 	bl	800195c <main>

08001be6 <LoopForever>:

LoopForever:
  b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   r0, =_estack
 8001be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001bf4:	080025f8 	.word	0x080025f8
  ldr r2, =_sbss
 8001bf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001bfc:	20000144 	.word	0x20000144

08001c00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC_IRQHandler>
	...

08001c04 <__errno>:
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <__errno+0x8>)
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000004 	.word	0x20000004

08001c10 <__libc_init_array>:
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4d0d      	ldr	r5, [pc, #52]	; (8001c48 <__libc_init_array+0x38>)
 8001c14:	4c0d      	ldr	r4, [pc, #52]	; (8001c4c <__libc_init_array+0x3c>)
 8001c16:	1b64      	subs	r4, r4, r5
 8001c18:	10a4      	asrs	r4, r4, #2
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	42a6      	cmp	r6, r4
 8001c1e:	d109      	bne.n	8001c34 <__libc_init_array+0x24>
 8001c20:	4d0b      	ldr	r5, [pc, #44]	; (8001c50 <__libc_init_array+0x40>)
 8001c22:	4c0c      	ldr	r4, [pc, #48]	; (8001c54 <__libc_init_array+0x44>)
 8001c24:	f000 fc86 	bl	8002534 <_init>
 8001c28:	1b64      	subs	r4, r4, r5
 8001c2a:	10a4      	asrs	r4, r4, #2
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	42a6      	cmp	r6, r4
 8001c30:	d105      	bne.n	8001c3e <__libc_init_array+0x2e>
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
 8001c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c38:	4798      	blx	r3
 8001c3a:	3601      	adds	r6, #1
 8001c3c:	e7ee      	b.n	8001c1c <__libc_init_array+0xc>
 8001c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c42:	4798      	blx	r3
 8001c44:	3601      	adds	r6, #1
 8001c46:	e7f2      	b.n	8001c2e <__libc_init_array+0x1e>
 8001c48:	080025f0 	.word	0x080025f0
 8001c4c:	080025f0 	.word	0x080025f0
 8001c50:	080025f0 	.word	0x080025f0
 8001c54:	080025f4 	.word	0x080025f4

08001c58 <_vsiprintf_r>:
 8001c58:	b500      	push	{lr}
 8001c5a:	b09b      	sub	sp, #108	; 0x6c
 8001c5c:	9100      	str	r1, [sp, #0]
 8001c5e:	9104      	str	r1, [sp, #16]
 8001c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c64:	9105      	str	r1, [sp, #20]
 8001c66:	9102      	str	r1, [sp, #8]
 8001c68:	4905      	ldr	r1, [pc, #20]	; (8001c80 <_vsiprintf_r+0x28>)
 8001c6a:	9103      	str	r1, [sp, #12]
 8001c6c:	4669      	mov	r1, sp
 8001c6e:	f000 f86f 	bl	8001d50 <_svfiprintf_r>
 8001c72:	9b00      	ldr	r3, [sp, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	b01b      	add	sp, #108	; 0x6c
 8001c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7e:	bf00      	nop
 8001c80:	ffff0208 	.word	0xffff0208

08001c84 <vsiprintf>:
 8001c84:	4613      	mov	r3, r2
 8001c86:	460a      	mov	r2, r1
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <vsiprintf+0x10>)
 8001c8c:	6800      	ldr	r0, [r0, #0]
 8001c8e:	f7ff bfe3 	b.w	8001c58 <_vsiprintf_r>
 8001c92:	bf00      	nop
 8001c94:	20000004 	.word	0x20000004

08001c98 <__ssputs_r>:
 8001c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c9c:	688e      	ldr	r6, [r1, #8]
 8001c9e:	429e      	cmp	r6, r3
 8001ca0:	4682      	mov	sl, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	461f      	mov	r7, r3
 8001ca8:	d838      	bhi.n	8001d1c <__ssputs_r+0x84>
 8001caa:	898a      	ldrh	r2, [r1, #12]
 8001cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001cb0:	d032      	beq.n	8001d18 <__ssputs_r+0x80>
 8001cb2:	6825      	ldr	r5, [r4, #0]
 8001cb4:	6909      	ldr	r1, [r1, #16]
 8001cb6:	eba5 0901 	sub.w	r9, r5, r1
 8001cba:	6965      	ldr	r5, [r4, #20]
 8001cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	444b      	add	r3, r9
 8001cc8:	106d      	asrs	r5, r5, #1
 8001cca:	429d      	cmp	r5, r3
 8001ccc:	bf38      	it	cc
 8001cce:	461d      	movcc	r5, r3
 8001cd0:	0553      	lsls	r3, r2, #21
 8001cd2:	d531      	bpl.n	8001d38 <__ssputs_r+0xa0>
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f000 fb63 	bl	80023a0 <_malloc_r>
 8001cda:	4606      	mov	r6, r0
 8001cdc:	b950      	cbnz	r0, 8001cf4 <__ssputs_r+0x5c>
 8001cde:	230c      	movs	r3, #12
 8001ce0:	f8ca 3000 	str.w	r3, [sl]
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cea:	81a3      	strh	r3, [r4, #12]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cf4:	6921      	ldr	r1, [r4, #16]
 8001cf6:	464a      	mov	r2, r9
 8001cf8:	f000 fabe 	bl	8002278 <memcpy>
 8001cfc:	89a3      	ldrh	r3, [r4, #12]
 8001cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d06:	81a3      	strh	r3, [r4, #12]
 8001d08:	6126      	str	r6, [r4, #16]
 8001d0a:	6165      	str	r5, [r4, #20]
 8001d0c:	444e      	add	r6, r9
 8001d0e:	eba5 0509 	sub.w	r5, r5, r9
 8001d12:	6026      	str	r6, [r4, #0]
 8001d14:	60a5      	str	r5, [r4, #8]
 8001d16:	463e      	mov	r6, r7
 8001d18:	42be      	cmp	r6, r7
 8001d1a:	d900      	bls.n	8001d1e <__ssputs_r+0x86>
 8001d1c:	463e      	mov	r6, r7
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	4632      	mov	r2, r6
 8001d22:	4641      	mov	r1, r8
 8001d24:	f000 fab6 	bl	8002294 <memmove>
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	1b9b      	subs	r3, r3, r6
 8001d2c:	60a3      	str	r3, [r4, #8]
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	4433      	add	r3, r6
 8001d32:	6023      	str	r3, [r4, #0]
 8001d34:	2000      	movs	r0, #0
 8001d36:	e7db      	b.n	8001cf0 <__ssputs_r+0x58>
 8001d38:	462a      	mov	r2, r5
 8001d3a:	f000 fba5 	bl	8002488 <_realloc_r>
 8001d3e:	4606      	mov	r6, r0
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d1e1      	bne.n	8001d08 <__ssputs_r+0x70>
 8001d44:	6921      	ldr	r1, [r4, #16]
 8001d46:	4650      	mov	r0, sl
 8001d48:	f000 fabe 	bl	80022c8 <_free_r>
 8001d4c:	e7c7      	b.n	8001cde <__ssputs_r+0x46>
	...

08001d50 <_svfiprintf_r>:
 8001d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d54:	4698      	mov	r8, r3
 8001d56:	898b      	ldrh	r3, [r1, #12]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	b09d      	sub	sp, #116	; 0x74
 8001d5c:	4607      	mov	r7, r0
 8001d5e:	460d      	mov	r5, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	d50e      	bpl.n	8001d82 <_svfiprintf_r+0x32>
 8001d64:	690b      	ldr	r3, [r1, #16]
 8001d66:	b963      	cbnz	r3, 8001d82 <_svfiprintf_r+0x32>
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	f000 fb19 	bl	80023a0 <_malloc_r>
 8001d6e:	6028      	str	r0, [r5, #0]
 8001d70:	6128      	str	r0, [r5, #16]
 8001d72:	b920      	cbnz	r0, 8001d7e <_svfiprintf_r+0x2e>
 8001d74:	230c      	movs	r3, #12
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	e0d1      	b.n	8001f22 <_svfiprintf_r+0x1d2>
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	616b      	str	r3, [r5, #20]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9309      	str	r3, [sp, #36]	; 0x24
 8001d86:	2320      	movs	r3, #32
 8001d88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d90:	2330      	movs	r3, #48	; 0x30
 8001d92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001f3c <_svfiprintf_r+0x1ec>
 8001d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d9a:	f04f 0901 	mov.w	r9, #1
 8001d9e:	4623      	mov	r3, r4
 8001da0:	469a      	mov	sl, r3
 8001da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001da6:	b10a      	cbz	r2, 8001dac <_svfiprintf_r+0x5c>
 8001da8:	2a25      	cmp	r2, #37	; 0x25
 8001daa:	d1f9      	bne.n	8001da0 <_svfiprintf_r+0x50>
 8001dac:	ebba 0b04 	subs.w	fp, sl, r4
 8001db0:	d00b      	beq.n	8001dca <_svfiprintf_r+0x7a>
 8001db2:	465b      	mov	r3, fp
 8001db4:	4622      	mov	r2, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	4638      	mov	r0, r7
 8001dba:	f7ff ff6d 	bl	8001c98 <__ssputs_r>
 8001dbe:	3001      	adds	r0, #1
 8001dc0:	f000 80aa 	beq.w	8001f18 <_svfiprintf_r+0x1c8>
 8001dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dc6:	445a      	add	r2, fp
 8001dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8001dca:	f89a 3000 	ldrb.w	r3, [sl]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80a2 	beq.w	8001f18 <_svfiprintf_r+0x1c8>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dde:	f10a 0a01 	add.w	sl, sl, #1
 8001de2:	9304      	str	r3, [sp, #16]
 8001de4:	9307      	str	r3, [sp, #28]
 8001de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dea:	931a      	str	r3, [sp, #104]	; 0x68
 8001dec:	4654      	mov	r4, sl
 8001dee:	2205      	movs	r2, #5
 8001df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001df4:	4851      	ldr	r0, [pc, #324]	; (8001f3c <_svfiprintf_r+0x1ec>)
 8001df6:	f7fe fa03 	bl	8000200 <memchr>
 8001dfa:	9a04      	ldr	r2, [sp, #16]
 8001dfc:	b9d8      	cbnz	r0, 8001e36 <_svfiprintf_r+0xe6>
 8001dfe:	06d0      	lsls	r0, r2, #27
 8001e00:	bf44      	itt	mi
 8001e02:	2320      	movmi	r3, #32
 8001e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e08:	0711      	lsls	r1, r2, #28
 8001e0a:	bf44      	itt	mi
 8001e0c:	232b      	movmi	r3, #43	; 0x2b
 8001e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e12:	f89a 3000 	ldrb.w	r3, [sl]
 8001e16:	2b2a      	cmp	r3, #42	; 0x2a
 8001e18:	d015      	beq.n	8001e46 <_svfiprintf_r+0xf6>
 8001e1a:	9a07      	ldr	r2, [sp, #28]
 8001e1c:	4654      	mov	r4, sl
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f04f 0c0a 	mov.w	ip, #10
 8001e24:	4621      	mov	r1, r4
 8001e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e2a:	3b30      	subs	r3, #48	; 0x30
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d94e      	bls.n	8001ece <_svfiprintf_r+0x17e>
 8001e30:	b1b0      	cbz	r0, 8001e60 <_svfiprintf_r+0x110>
 8001e32:	9207      	str	r2, [sp, #28]
 8001e34:	e014      	b.n	8001e60 <_svfiprintf_r+0x110>
 8001e36:	eba0 0308 	sub.w	r3, r0, r8
 8001e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	9304      	str	r3, [sp, #16]
 8001e42:	46a2      	mov	sl, r4
 8001e44:	e7d2      	b.n	8001dec <_svfiprintf_r+0x9c>
 8001e46:	9b03      	ldr	r3, [sp, #12]
 8001e48:	1d19      	adds	r1, r3, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	9103      	str	r1, [sp, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bfbb      	ittet	lt
 8001e52:	425b      	neglt	r3, r3
 8001e54:	f042 0202 	orrlt.w	r2, r2, #2
 8001e58:	9307      	strge	r3, [sp, #28]
 8001e5a:	9307      	strlt	r3, [sp, #28]
 8001e5c:	bfb8      	it	lt
 8001e5e:	9204      	strlt	r2, [sp, #16]
 8001e60:	7823      	ldrb	r3, [r4, #0]
 8001e62:	2b2e      	cmp	r3, #46	; 0x2e
 8001e64:	d10c      	bne.n	8001e80 <_svfiprintf_r+0x130>
 8001e66:	7863      	ldrb	r3, [r4, #1]
 8001e68:	2b2a      	cmp	r3, #42	; 0x2a
 8001e6a:	d135      	bne.n	8001ed8 <_svfiprintf_r+0x188>
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	1d1a      	adds	r2, r3, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	9203      	str	r2, [sp, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bfb8      	it	lt
 8001e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e7c:	3402      	adds	r4, #2
 8001e7e:	9305      	str	r3, [sp, #20]
 8001e80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001f4c <_svfiprintf_r+0x1fc>
 8001e84:	7821      	ldrb	r1, [r4, #0]
 8001e86:	2203      	movs	r2, #3
 8001e88:	4650      	mov	r0, sl
 8001e8a:	f7fe f9b9 	bl	8000200 <memchr>
 8001e8e:	b140      	cbz	r0, 8001ea2 <_svfiprintf_r+0x152>
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	eba0 000a 	sub.w	r0, r0, sl
 8001e96:	fa03 f000 	lsl.w	r0, r3, r0
 8001e9a:	9b04      	ldr	r3, [sp, #16]
 8001e9c:	4303      	orrs	r3, r0
 8001e9e:	3401      	adds	r4, #1
 8001ea0:	9304      	str	r3, [sp, #16]
 8001ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea6:	4826      	ldr	r0, [pc, #152]	; (8001f40 <_svfiprintf_r+0x1f0>)
 8001ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001eac:	2206      	movs	r2, #6
 8001eae:	f7fe f9a7 	bl	8000200 <memchr>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d038      	beq.n	8001f28 <_svfiprintf_r+0x1d8>
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <_svfiprintf_r+0x1f4>)
 8001eb8:	bb1b      	cbnz	r3, 8001f02 <_svfiprintf_r+0x1b2>
 8001eba:	9b03      	ldr	r3, [sp, #12]
 8001ebc:	3307      	adds	r3, #7
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	9303      	str	r3, [sp, #12]
 8001ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ec8:	4433      	add	r3, r6
 8001eca:	9309      	str	r3, [sp, #36]	; 0x24
 8001ecc:	e767      	b.n	8001d9e <_svfiprintf_r+0x4e>
 8001ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	e7a5      	b.n	8001e24 <_svfiprintf_r+0xd4>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	3401      	adds	r4, #1
 8001edc:	9305      	str	r3, [sp, #20]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 0c0a 	mov.w	ip, #10
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eea:	3a30      	subs	r2, #48	; 0x30
 8001eec:	2a09      	cmp	r2, #9
 8001eee:	d903      	bls.n	8001ef8 <_svfiprintf_r+0x1a8>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0c5      	beq.n	8001e80 <_svfiprintf_r+0x130>
 8001ef4:	9105      	str	r1, [sp, #20]
 8001ef6:	e7c3      	b.n	8001e80 <_svfiprintf_r+0x130>
 8001ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001efc:	4604      	mov	r4, r0
 8001efe:	2301      	movs	r3, #1
 8001f00:	e7f0      	b.n	8001ee4 <_svfiprintf_r+0x194>
 8001f02:	ab03      	add	r3, sp, #12
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	462a      	mov	r2, r5
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <_svfiprintf_r+0x1f8>)
 8001f0a:	a904      	add	r1, sp, #16
 8001f0c:	4638      	mov	r0, r7
 8001f0e:	f3af 8000 	nop.w
 8001f12:	1c42      	adds	r2, r0, #1
 8001f14:	4606      	mov	r6, r0
 8001f16:	d1d6      	bne.n	8001ec6 <_svfiprintf_r+0x176>
 8001f18:	89ab      	ldrh	r3, [r5, #12]
 8001f1a:	065b      	lsls	r3, r3, #25
 8001f1c:	f53f af2c 	bmi.w	8001d78 <_svfiprintf_r+0x28>
 8001f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f22:	b01d      	add	sp, #116	; 0x74
 8001f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f28:	ab03      	add	r3, sp, #12
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <_svfiprintf_r+0x1f8>)
 8001f30:	a904      	add	r1, sp, #16
 8001f32:	4638      	mov	r0, r7
 8001f34:	f000 f87a 	bl	800202c <_printf_i>
 8001f38:	e7eb      	b.n	8001f12 <_svfiprintf_r+0x1c2>
 8001f3a:	bf00      	nop
 8001f3c:	080025bc 	.word	0x080025bc
 8001f40:	080025c6 	.word	0x080025c6
 8001f44:	00000000 	.word	0x00000000
 8001f48:	08001c99 	.word	0x08001c99
 8001f4c:	080025c2 	.word	0x080025c2

08001f50 <_printf_common>:
 8001f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f54:	4616      	mov	r6, r2
 8001f56:	4699      	mov	r9, r3
 8001f58:	688a      	ldr	r2, [r1, #8]
 8001f5a:	690b      	ldr	r3, [r1, #16]
 8001f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f60:	4293      	cmp	r3, r2
 8001f62:	bfb8      	it	lt
 8001f64:	4613      	movlt	r3, r2
 8001f66:	6033      	str	r3, [r6, #0]
 8001f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f6c:	4607      	mov	r7, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	b10a      	cbz	r2, 8001f76 <_printf_common+0x26>
 8001f72:	3301      	adds	r3, #1
 8001f74:	6033      	str	r3, [r6, #0]
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	0699      	lsls	r1, r3, #26
 8001f7a:	bf42      	ittt	mi
 8001f7c:	6833      	ldrmi	r3, [r6, #0]
 8001f7e:	3302      	addmi	r3, #2
 8001f80:	6033      	strmi	r3, [r6, #0]
 8001f82:	6825      	ldr	r5, [r4, #0]
 8001f84:	f015 0506 	ands.w	r5, r5, #6
 8001f88:	d106      	bne.n	8001f98 <_printf_common+0x48>
 8001f8a:	f104 0a19 	add.w	sl, r4, #25
 8001f8e:	68e3      	ldr	r3, [r4, #12]
 8001f90:	6832      	ldr	r2, [r6, #0]
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	42ab      	cmp	r3, r5
 8001f96:	dc26      	bgt.n	8001fe6 <_printf_common+0x96>
 8001f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f9c:	1e13      	subs	r3, r2, #0
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	bf18      	it	ne
 8001fa2:	2301      	movne	r3, #1
 8001fa4:	0692      	lsls	r2, r2, #26
 8001fa6:	d42b      	bmi.n	8002000 <_printf_common+0xb0>
 8001fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fac:	4649      	mov	r1, r9
 8001fae:	4638      	mov	r0, r7
 8001fb0:	47c0      	blx	r8
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d01e      	beq.n	8001ff4 <_printf_common+0xa4>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	68e5      	ldr	r5, [r4, #12]
 8001fba:	6832      	ldr	r2, [r6, #0]
 8001fbc:	f003 0306 	and.w	r3, r3, #6
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	bf08      	it	eq
 8001fc4:	1aad      	subeq	r5, r5, r2
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	6922      	ldr	r2, [r4, #16]
 8001fca:	bf0c      	ite	eq
 8001fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fd0:	2500      	movne	r5, #0
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	bfc4      	itt	gt
 8001fd6:	1a9b      	subgt	r3, r3, r2
 8001fd8:	18ed      	addgt	r5, r5, r3
 8001fda:	2600      	movs	r6, #0
 8001fdc:	341a      	adds	r4, #26
 8001fde:	42b5      	cmp	r5, r6
 8001fe0:	d11a      	bne.n	8002018 <_printf_common+0xc8>
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e008      	b.n	8001ff8 <_printf_common+0xa8>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	4652      	mov	r2, sl
 8001fea:	4649      	mov	r1, r9
 8001fec:	4638      	mov	r0, r7
 8001fee:	47c0      	blx	r8
 8001ff0:	3001      	adds	r0, #1
 8001ff2:	d103      	bne.n	8001ffc <_printf_common+0xac>
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ffc:	3501      	adds	r5, #1
 8001ffe:	e7c6      	b.n	8001f8e <_printf_common+0x3e>
 8002000:	18e1      	adds	r1, r4, r3
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	2030      	movs	r0, #48	; 0x30
 8002006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800200a:	4422      	add	r2, r4
 800200c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002014:	3302      	adds	r3, #2
 8002016:	e7c7      	b.n	8001fa8 <_printf_common+0x58>
 8002018:	2301      	movs	r3, #1
 800201a:	4622      	mov	r2, r4
 800201c:	4649      	mov	r1, r9
 800201e:	4638      	mov	r0, r7
 8002020:	47c0      	blx	r8
 8002022:	3001      	adds	r0, #1
 8002024:	d0e6      	beq.n	8001ff4 <_printf_common+0xa4>
 8002026:	3601      	adds	r6, #1
 8002028:	e7d9      	b.n	8001fde <_printf_common+0x8e>
	...

0800202c <_printf_i>:
 800202c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002030:	7e0f      	ldrb	r7, [r1, #24]
 8002032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002034:	2f78      	cmp	r7, #120	; 0x78
 8002036:	4691      	mov	r9, r2
 8002038:	4680      	mov	r8, r0
 800203a:	460c      	mov	r4, r1
 800203c:	469a      	mov	sl, r3
 800203e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002042:	d807      	bhi.n	8002054 <_printf_i+0x28>
 8002044:	2f62      	cmp	r7, #98	; 0x62
 8002046:	d80a      	bhi.n	800205e <_printf_i+0x32>
 8002048:	2f00      	cmp	r7, #0
 800204a:	f000 80d8 	beq.w	80021fe <_printf_i+0x1d2>
 800204e:	2f58      	cmp	r7, #88	; 0x58
 8002050:	f000 80a3 	beq.w	800219a <_printf_i+0x16e>
 8002054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800205c:	e03a      	b.n	80020d4 <_printf_i+0xa8>
 800205e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002062:	2b15      	cmp	r3, #21
 8002064:	d8f6      	bhi.n	8002054 <_printf_i+0x28>
 8002066:	a101      	add	r1, pc, #4	; (adr r1, 800206c <_printf_i+0x40>)
 8002068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800206c:	080020c5 	.word	0x080020c5
 8002070:	080020d9 	.word	0x080020d9
 8002074:	08002055 	.word	0x08002055
 8002078:	08002055 	.word	0x08002055
 800207c:	08002055 	.word	0x08002055
 8002080:	08002055 	.word	0x08002055
 8002084:	080020d9 	.word	0x080020d9
 8002088:	08002055 	.word	0x08002055
 800208c:	08002055 	.word	0x08002055
 8002090:	08002055 	.word	0x08002055
 8002094:	08002055 	.word	0x08002055
 8002098:	080021e5 	.word	0x080021e5
 800209c:	08002109 	.word	0x08002109
 80020a0:	080021c7 	.word	0x080021c7
 80020a4:	08002055 	.word	0x08002055
 80020a8:	08002055 	.word	0x08002055
 80020ac:	08002207 	.word	0x08002207
 80020b0:	08002055 	.word	0x08002055
 80020b4:	08002109 	.word	0x08002109
 80020b8:	08002055 	.word	0x08002055
 80020bc:	08002055 	.word	0x08002055
 80020c0:	080021cf 	.word	0x080021cf
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	1d1a      	adds	r2, r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	602a      	str	r2, [r5, #0]
 80020cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0a3      	b.n	8002220 <_printf_i+0x1f4>
 80020d8:	6820      	ldr	r0, [r4, #0]
 80020da:	6829      	ldr	r1, [r5, #0]
 80020dc:	0606      	lsls	r6, r0, #24
 80020de:	f101 0304 	add.w	r3, r1, #4
 80020e2:	d50a      	bpl.n	80020fa <_printf_i+0xce>
 80020e4:	680e      	ldr	r6, [r1, #0]
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	2e00      	cmp	r6, #0
 80020ea:	da03      	bge.n	80020f4 <_printf_i+0xc8>
 80020ec:	232d      	movs	r3, #45	; 0x2d
 80020ee:	4276      	negs	r6, r6
 80020f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f4:	485e      	ldr	r0, [pc, #376]	; (8002270 <_printf_i+0x244>)
 80020f6:	230a      	movs	r3, #10
 80020f8:	e019      	b.n	800212e <_printf_i+0x102>
 80020fa:	680e      	ldr	r6, [r1, #0]
 80020fc:	602b      	str	r3, [r5, #0]
 80020fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002102:	bf18      	it	ne
 8002104:	b236      	sxthne	r6, r6
 8002106:	e7ef      	b.n	80020e8 <_printf_i+0xbc>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	6820      	ldr	r0, [r4, #0]
 800210c:	1d19      	adds	r1, r3, #4
 800210e:	6029      	str	r1, [r5, #0]
 8002110:	0601      	lsls	r1, r0, #24
 8002112:	d501      	bpl.n	8002118 <_printf_i+0xec>
 8002114:	681e      	ldr	r6, [r3, #0]
 8002116:	e002      	b.n	800211e <_printf_i+0xf2>
 8002118:	0646      	lsls	r6, r0, #25
 800211a:	d5fb      	bpl.n	8002114 <_printf_i+0xe8>
 800211c:	881e      	ldrh	r6, [r3, #0]
 800211e:	4854      	ldr	r0, [pc, #336]	; (8002270 <_printf_i+0x244>)
 8002120:	2f6f      	cmp	r7, #111	; 0x6f
 8002122:	bf0c      	ite	eq
 8002124:	2308      	moveq	r3, #8
 8002126:	230a      	movne	r3, #10
 8002128:	2100      	movs	r1, #0
 800212a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800212e:	6865      	ldr	r5, [r4, #4]
 8002130:	60a5      	str	r5, [r4, #8]
 8002132:	2d00      	cmp	r5, #0
 8002134:	bfa2      	ittt	ge
 8002136:	6821      	ldrge	r1, [r4, #0]
 8002138:	f021 0104 	bicge.w	r1, r1, #4
 800213c:	6021      	strge	r1, [r4, #0]
 800213e:	b90e      	cbnz	r6, 8002144 <_printf_i+0x118>
 8002140:	2d00      	cmp	r5, #0
 8002142:	d04d      	beq.n	80021e0 <_printf_i+0x1b4>
 8002144:	4615      	mov	r5, r2
 8002146:	fbb6 f1f3 	udiv	r1, r6, r3
 800214a:	fb03 6711 	mls	r7, r3, r1, r6
 800214e:	5dc7      	ldrb	r7, [r0, r7]
 8002150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002154:	4637      	mov	r7, r6
 8002156:	42bb      	cmp	r3, r7
 8002158:	460e      	mov	r6, r1
 800215a:	d9f4      	bls.n	8002146 <_printf_i+0x11a>
 800215c:	2b08      	cmp	r3, #8
 800215e:	d10b      	bne.n	8002178 <_printf_i+0x14c>
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	07de      	lsls	r6, r3, #31
 8002164:	d508      	bpl.n	8002178 <_printf_i+0x14c>
 8002166:	6923      	ldr	r3, [r4, #16]
 8002168:	6861      	ldr	r1, [r4, #4]
 800216a:	4299      	cmp	r1, r3
 800216c:	bfde      	ittt	le
 800216e:	2330      	movle	r3, #48	; 0x30
 8002170:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002174:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002178:	1b52      	subs	r2, r2, r5
 800217a:	6122      	str	r2, [r4, #16]
 800217c:	f8cd a000 	str.w	sl, [sp]
 8002180:	464b      	mov	r3, r9
 8002182:	aa03      	add	r2, sp, #12
 8002184:	4621      	mov	r1, r4
 8002186:	4640      	mov	r0, r8
 8002188:	f7ff fee2 	bl	8001f50 <_printf_common>
 800218c:	3001      	adds	r0, #1
 800218e:	d14c      	bne.n	800222a <_printf_i+0x1fe>
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	b004      	add	sp, #16
 8002196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800219a:	4835      	ldr	r0, [pc, #212]	; (8002270 <_printf_i+0x244>)
 800219c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021a0:	6829      	ldr	r1, [r5, #0]
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80021a8:	6029      	str	r1, [r5, #0]
 80021aa:	061d      	lsls	r5, r3, #24
 80021ac:	d514      	bpl.n	80021d8 <_printf_i+0x1ac>
 80021ae:	07df      	lsls	r7, r3, #31
 80021b0:	bf44      	itt	mi
 80021b2:	f043 0320 	orrmi.w	r3, r3, #32
 80021b6:	6023      	strmi	r3, [r4, #0]
 80021b8:	b91e      	cbnz	r6, 80021c2 <_printf_i+0x196>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	f023 0320 	bic.w	r3, r3, #32
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	2310      	movs	r3, #16
 80021c4:	e7b0      	b.n	8002128 <_printf_i+0xfc>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	2378      	movs	r3, #120	; 0x78
 80021d0:	4828      	ldr	r0, [pc, #160]	; (8002274 <_printf_i+0x248>)
 80021d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021d6:	e7e3      	b.n	80021a0 <_printf_i+0x174>
 80021d8:	0659      	lsls	r1, r3, #25
 80021da:	bf48      	it	mi
 80021dc:	b2b6      	uxthmi	r6, r6
 80021de:	e7e6      	b.n	80021ae <_printf_i+0x182>
 80021e0:	4615      	mov	r5, r2
 80021e2:	e7bb      	b.n	800215c <_printf_i+0x130>
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	6826      	ldr	r6, [r4, #0]
 80021e8:	6961      	ldr	r1, [r4, #20]
 80021ea:	1d18      	adds	r0, r3, #4
 80021ec:	6028      	str	r0, [r5, #0]
 80021ee:	0635      	lsls	r5, r6, #24
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	d501      	bpl.n	80021f8 <_printf_i+0x1cc>
 80021f4:	6019      	str	r1, [r3, #0]
 80021f6:	e002      	b.n	80021fe <_printf_i+0x1d2>
 80021f8:	0670      	lsls	r0, r6, #25
 80021fa:	d5fb      	bpl.n	80021f4 <_printf_i+0x1c8>
 80021fc:	8019      	strh	r1, [r3, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	6123      	str	r3, [r4, #16]
 8002202:	4615      	mov	r5, r2
 8002204:	e7ba      	b.n	800217c <_printf_i+0x150>
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	1d1a      	adds	r2, r3, #4
 800220a:	602a      	str	r2, [r5, #0]
 800220c:	681d      	ldr	r5, [r3, #0]
 800220e:	6862      	ldr	r2, [r4, #4]
 8002210:	2100      	movs	r1, #0
 8002212:	4628      	mov	r0, r5
 8002214:	f7fd fff4 	bl	8000200 <memchr>
 8002218:	b108      	cbz	r0, 800221e <_printf_i+0x1f2>
 800221a:	1b40      	subs	r0, r0, r5
 800221c:	6060      	str	r0, [r4, #4]
 800221e:	6863      	ldr	r3, [r4, #4]
 8002220:	6123      	str	r3, [r4, #16]
 8002222:	2300      	movs	r3, #0
 8002224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002228:	e7a8      	b.n	800217c <_printf_i+0x150>
 800222a:	6923      	ldr	r3, [r4, #16]
 800222c:	462a      	mov	r2, r5
 800222e:	4649      	mov	r1, r9
 8002230:	4640      	mov	r0, r8
 8002232:	47d0      	blx	sl
 8002234:	3001      	adds	r0, #1
 8002236:	d0ab      	beq.n	8002190 <_printf_i+0x164>
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	079b      	lsls	r3, r3, #30
 800223c:	d413      	bmi.n	8002266 <_printf_i+0x23a>
 800223e:	68e0      	ldr	r0, [r4, #12]
 8002240:	9b03      	ldr	r3, [sp, #12]
 8002242:	4298      	cmp	r0, r3
 8002244:	bfb8      	it	lt
 8002246:	4618      	movlt	r0, r3
 8002248:	e7a4      	b.n	8002194 <_printf_i+0x168>
 800224a:	2301      	movs	r3, #1
 800224c:	4632      	mov	r2, r6
 800224e:	4649      	mov	r1, r9
 8002250:	4640      	mov	r0, r8
 8002252:	47d0      	blx	sl
 8002254:	3001      	adds	r0, #1
 8002256:	d09b      	beq.n	8002190 <_printf_i+0x164>
 8002258:	3501      	adds	r5, #1
 800225a:	68e3      	ldr	r3, [r4, #12]
 800225c:	9903      	ldr	r1, [sp, #12]
 800225e:	1a5b      	subs	r3, r3, r1
 8002260:	42ab      	cmp	r3, r5
 8002262:	dcf2      	bgt.n	800224a <_printf_i+0x21e>
 8002264:	e7eb      	b.n	800223e <_printf_i+0x212>
 8002266:	2500      	movs	r5, #0
 8002268:	f104 0619 	add.w	r6, r4, #25
 800226c:	e7f5      	b.n	800225a <_printf_i+0x22e>
 800226e:	bf00      	nop
 8002270:	080025cd 	.word	0x080025cd
 8002274:	080025de 	.word	0x080025de

08002278 <memcpy>:
 8002278:	440a      	add	r2, r1
 800227a:	4291      	cmp	r1, r2
 800227c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002280:	d100      	bne.n	8002284 <memcpy+0xc>
 8002282:	4770      	bx	lr
 8002284:	b510      	push	{r4, lr}
 8002286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800228a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800228e:	4291      	cmp	r1, r2
 8002290:	d1f9      	bne.n	8002286 <memcpy+0xe>
 8002292:	bd10      	pop	{r4, pc}

08002294 <memmove>:
 8002294:	4288      	cmp	r0, r1
 8002296:	b510      	push	{r4, lr}
 8002298:	eb01 0402 	add.w	r4, r1, r2
 800229c:	d902      	bls.n	80022a4 <memmove+0x10>
 800229e:	4284      	cmp	r4, r0
 80022a0:	4623      	mov	r3, r4
 80022a2:	d807      	bhi.n	80022b4 <memmove+0x20>
 80022a4:	1e43      	subs	r3, r0, #1
 80022a6:	42a1      	cmp	r1, r4
 80022a8:	d008      	beq.n	80022bc <memmove+0x28>
 80022aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022b2:	e7f8      	b.n	80022a6 <memmove+0x12>
 80022b4:	4402      	add	r2, r0
 80022b6:	4601      	mov	r1, r0
 80022b8:	428a      	cmp	r2, r1
 80022ba:	d100      	bne.n	80022be <memmove+0x2a>
 80022bc:	bd10      	pop	{r4, pc}
 80022be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80022c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80022c6:	e7f7      	b.n	80022b8 <memmove+0x24>

080022c8 <_free_r>:
 80022c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022ca:	2900      	cmp	r1, #0
 80022cc:	d044      	beq.n	8002358 <_free_r+0x90>
 80022ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022d2:	9001      	str	r0, [sp, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f1a1 0404 	sub.w	r4, r1, #4
 80022da:	bfb8      	it	lt
 80022dc:	18e4      	addlt	r4, r4, r3
 80022de:	f000 f913 	bl	8002508 <__malloc_lock>
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <_free_r+0x94>)
 80022e4:	9801      	ldr	r0, [sp, #4]
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	b933      	cbnz	r3, 80022f8 <_free_r+0x30>
 80022ea:	6063      	str	r3, [r4, #4]
 80022ec:	6014      	str	r4, [r2, #0]
 80022ee:	b003      	add	sp, #12
 80022f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022f4:	f000 b90e 	b.w	8002514 <__malloc_unlock>
 80022f8:	42a3      	cmp	r3, r4
 80022fa:	d908      	bls.n	800230e <_free_r+0x46>
 80022fc:	6825      	ldr	r5, [r4, #0]
 80022fe:	1961      	adds	r1, r4, r5
 8002300:	428b      	cmp	r3, r1
 8002302:	bf01      	itttt	eq
 8002304:	6819      	ldreq	r1, [r3, #0]
 8002306:	685b      	ldreq	r3, [r3, #4]
 8002308:	1949      	addeq	r1, r1, r5
 800230a:	6021      	streq	r1, [r4, #0]
 800230c:	e7ed      	b.n	80022ea <_free_r+0x22>
 800230e:	461a      	mov	r2, r3
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	b10b      	cbz	r3, 8002318 <_free_r+0x50>
 8002314:	42a3      	cmp	r3, r4
 8002316:	d9fa      	bls.n	800230e <_free_r+0x46>
 8002318:	6811      	ldr	r1, [r2, #0]
 800231a:	1855      	adds	r5, r2, r1
 800231c:	42a5      	cmp	r5, r4
 800231e:	d10b      	bne.n	8002338 <_free_r+0x70>
 8002320:	6824      	ldr	r4, [r4, #0]
 8002322:	4421      	add	r1, r4
 8002324:	1854      	adds	r4, r2, r1
 8002326:	42a3      	cmp	r3, r4
 8002328:	6011      	str	r1, [r2, #0]
 800232a:	d1e0      	bne.n	80022ee <_free_r+0x26>
 800232c:	681c      	ldr	r4, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	6053      	str	r3, [r2, #4]
 8002332:	4421      	add	r1, r4
 8002334:	6011      	str	r1, [r2, #0]
 8002336:	e7da      	b.n	80022ee <_free_r+0x26>
 8002338:	d902      	bls.n	8002340 <_free_r+0x78>
 800233a:	230c      	movs	r3, #12
 800233c:	6003      	str	r3, [r0, #0]
 800233e:	e7d6      	b.n	80022ee <_free_r+0x26>
 8002340:	6825      	ldr	r5, [r4, #0]
 8002342:	1961      	adds	r1, r4, r5
 8002344:	428b      	cmp	r3, r1
 8002346:	bf04      	itt	eq
 8002348:	6819      	ldreq	r1, [r3, #0]
 800234a:	685b      	ldreq	r3, [r3, #4]
 800234c:	6063      	str	r3, [r4, #4]
 800234e:	bf04      	itt	eq
 8002350:	1949      	addeq	r1, r1, r5
 8002352:	6021      	streq	r1, [r4, #0]
 8002354:	6054      	str	r4, [r2, #4]
 8002356:	e7ca      	b.n	80022ee <_free_r+0x26>
 8002358:	b003      	add	sp, #12
 800235a:	bd30      	pop	{r4, r5, pc}
 800235c:	20000134 	.word	0x20000134

08002360 <sbrk_aligned>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	4e0e      	ldr	r6, [pc, #56]	; (800239c <sbrk_aligned+0x3c>)
 8002364:	460c      	mov	r4, r1
 8002366:	6831      	ldr	r1, [r6, #0]
 8002368:	4605      	mov	r5, r0
 800236a:	b911      	cbnz	r1, 8002372 <sbrk_aligned+0x12>
 800236c:	f000 f8bc 	bl	80024e8 <_sbrk_r>
 8002370:	6030      	str	r0, [r6, #0]
 8002372:	4621      	mov	r1, r4
 8002374:	4628      	mov	r0, r5
 8002376:	f000 f8b7 	bl	80024e8 <_sbrk_r>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d00a      	beq.n	8002394 <sbrk_aligned+0x34>
 800237e:	1cc4      	adds	r4, r0, #3
 8002380:	f024 0403 	bic.w	r4, r4, #3
 8002384:	42a0      	cmp	r0, r4
 8002386:	d007      	beq.n	8002398 <sbrk_aligned+0x38>
 8002388:	1a21      	subs	r1, r4, r0
 800238a:	4628      	mov	r0, r5
 800238c:	f000 f8ac 	bl	80024e8 <_sbrk_r>
 8002390:	3001      	adds	r0, #1
 8002392:	d101      	bne.n	8002398 <sbrk_aligned+0x38>
 8002394:	f04f 34ff 	mov.w	r4, #4294967295
 8002398:	4620      	mov	r0, r4
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	20000138 	.word	0x20000138

080023a0 <_malloc_r>:
 80023a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a4:	1ccd      	adds	r5, r1, #3
 80023a6:	f025 0503 	bic.w	r5, r5, #3
 80023aa:	3508      	adds	r5, #8
 80023ac:	2d0c      	cmp	r5, #12
 80023ae:	bf38      	it	cc
 80023b0:	250c      	movcc	r5, #12
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	4607      	mov	r7, r0
 80023b6:	db01      	blt.n	80023bc <_malloc_r+0x1c>
 80023b8:	42a9      	cmp	r1, r5
 80023ba:	d905      	bls.n	80023c8 <_malloc_r+0x28>
 80023bc:	230c      	movs	r3, #12
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	2600      	movs	r6, #0
 80023c2:	4630      	mov	r0, r6
 80023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c8:	4e2e      	ldr	r6, [pc, #184]	; (8002484 <_malloc_r+0xe4>)
 80023ca:	f000 f89d 	bl	8002508 <__malloc_lock>
 80023ce:	6833      	ldr	r3, [r6, #0]
 80023d0:	461c      	mov	r4, r3
 80023d2:	bb34      	cbnz	r4, 8002422 <_malloc_r+0x82>
 80023d4:	4629      	mov	r1, r5
 80023d6:	4638      	mov	r0, r7
 80023d8:	f7ff ffc2 	bl	8002360 <sbrk_aligned>
 80023dc:	1c43      	adds	r3, r0, #1
 80023de:	4604      	mov	r4, r0
 80023e0:	d14d      	bne.n	800247e <_malloc_r+0xde>
 80023e2:	6834      	ldr	r4, [r6, #0]
 80023e4:	4626      	mov	r6, r4
 80023e6:	2e00      	cmp	r6, #0
 80023e8:	d140      	bne.n	800246c <_malloc_r+0xcc>
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	4631      	mov	r1, r6
 80023ee:	4638      	mov	r0, r7
 80023f0:	eb04 0803 	add.w	r8, r4, r3
 80023f4:	f000 f878 	bl	80024e8 <_sbrk_r>
 80023f8:	4580      	cmp	r8, r0
 80023fa:	d13a      	bne.n	8002472 <_malloc_r+0xd2>
 80023fc:	6821      	ldr	r1, [r4, #0]
 80023fe:	3503      	adds	r5, #3
 8002400:	1a6d      	subs	r5, r5, r1
 8002402:	f025 0503 	bic.w	r5, r5, #3
 8002406:	3508      	adds	r5, #8
 8002408:	2d0c      	cmp	r5, #12
 800240a:	bf38      	it	cc
 800240c:	250c      	movcc	r5, #12
 800240e:	4629      	mov	r1, r5
 8002410:	4638      	mov	r0, r7
 8002412:	f7ff ffa5 	bl	8002360 <sbrk_aligned>
 8002416:	3001      	adds	r0, #1
 8002418:	d02b      	beq.n	8002472 <_malloc_r+0xd2>
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	442b      	add	r3, r5
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	e00e      	b.n	8002440 <_malloc_r+0xa0>
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	1b52      	subs	r2, r2, r5
 8002426:	d41e      	bmi.n	8002466 <_malloc_r+0xc6>
 8002428:	2a0b      	cmp	r2, #11
 800242a:	d916      	bls.n	800245a <_malloc_r+0xba>
 800242c:	1961      	adds	r1, r4, r5
 800242e:	42a3      	cmp	r3, r4
 8002430:	6025      	str	r5, [r4, #0]
 8002432:	bf18      	it	ne
 8002434:	6059      	strne	r1, [r3, #4]
 8002436:	6863      	ldr	r3, [r4, #4]
 8002438:	bf08      	it	eq
 800243a:	6031      	streq	r1, [r6, #0]
 800243c:	5162      	str	r2, [r4, r5]
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	4638      	mov	r0, r7
 8002442:	f104 060b 	add.w	r6, r4, #11
 8002446:	f000 f865 	bl	8002514 <__malloc_unlock>
 800244a:	f026 0607 	bic.w	r6, r6, #7
 800244e:	1d23      	adds	r3, r4, #4
 8002450:	1af2      	subs	r2, r6, r3
 8002452:	d0b6      	beq.n	80023c2 <_malloc_r+0x22>
 8002454:	1b9b      	subs	r3, r3, r6
 8002456:	50a3      	str	r3, [r4, r2]
 8002458:	e7b3      	b.n	80023c2 <_malloc_r+0x22>
 800245a:	6862      	ldr	r2, [r4, #4]
 800245c:	42a3      	cmp	r3, r4
 800245e:	bf0c      	ite	eq
 8002460:	6032      	streq	r2, [r6, #0]
 8002462:	605a      	strne	r2, [r3, #4]
 8002464:	e7ec      	b.n	8002440 <_malloc_r+0xa0>
 8002466:	4623      	mov	r3, r4
 8002468:	6864      	ldr	r4, [r4, #4]
 800246a:	e7b2      	b.n	80023d2 <_malloc_r+0x32>
 800246c:	4634      	mov	r4, r6
 800246e:	6876      	ldr	r6, [r6, #4]
 8002470:	e7b9      	b.n	80023e6 <_malloc_r+0x46>
 8002472:	230c      	movs	r3, #12
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4638      	mov	r0, r7
 8002478:	f000 f84c 	bl	8002514 <__malloc_unlock>
 800247c:	e7a1      	b.n	80023c2 <_malloc_r+0x22>
 800247e:	6025      	str	r5, [r4, #0]
 8002480:	e7de      	b.n	8002440 <_malloc_r+0xa0>
 8002482:	bf00      	nop
 8002484:	20000134 	.word	0x20000134

08002488 <_realloc_r>:
 8002488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800248c:	4680      	mov	r8, r0
 800248e:	4614      	mov	r4, r2
 8002490:	460e      	mov	r6, r1
 8002492:	b921      	cbnz	r1, 800249e <_realloc_r+0x16>
 8002494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002498:	4611      	mov	r1, r2
 800249a:	f7ff bf81 	b.w	80023a0 <_malloc_r>
 800249e:	b92a      	cbnz	r2, 80024ac <_realloc_r+0x24>
 80024a0:	f7ff ff12 	bl	80022c8 <_free_r>
 80024a4:	4625      	mov	r5, r4
 80024a6:	4628      	mov	r0, r5
 80024a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024ac:	f000 f838 	bl	8002520 <_malloc_usable_size_r>
 80024b0:	4284      	cmp	r4, r0
 80024b2:	4607      	mov	r7, r0
 80024b4:	d802      	bhi.n	80024bc <_realloc_r+0x34>
 80024b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80024ba:	d812      	bhi.n	80024e2 <_realloc_r+0x5a>
 80024bc:	4621      	mov	r1, r4
 80024be:	4640      	mov	r0, r8
 80024c0:	f7ff ff6e 	bl	80023a0 <_malloc_r>
 80024c4:	4605      	mov	r5, r0
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d0ed      	beq.n	80024a6 <_realloc_r+0x1e>
 80024ca:	42bc      	cmp	r4, r7
 80024cc:	4622      	mov	r2, r4
 80024ce:	4631      	mov	r1, r6
 80024d0:	bf28      	it	cs
 80024d2:	463a      	movcs	r2, r7
 80024d4:	f7ff fed0 	bl	8002278 <memcpy>
 80024d8:	4631      	mov	r1, r6
 80024da:	4640      	mov	r0, r8
 80024dc:	f7ff fef4 	bl	80022c8 <_free_r>
 80024e0:	e7e1      	b.n	80024a6 <_realloc_r+0x1e>
 80024e2:	4635      	mov	r5, r6
 80024e4:	e7df      	b.n	80024a6 <_realloc_r+0x1e>
	...

080024e8 <_sbrk_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	4d06      	ldr	r5, [pc, #24]	; (8002504 <_sbrk_r+0x1c>)
 80024ec:	2300      	movs	r3, #0
 80024ee:	4604      	mov	r4, r0
 80024f0:	4608      	mov	r0, r1
 80024f2:	602b      	str	r3, [r5, #0]
 80024f4:	f7ff fa94 	bl	8001a20 <_sbrk>
 80024f8:	1c43      	adds	r3, r0, #1
 80024fa:	d102      	bne.n	8002502 <_sbrk_r+0x1a>
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	b103      	cbz	r3, 8002502 <_sbrk_r+0x1a>
 8002500:	6023      	str	r3, [r4, #0]
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	2000013c 	.word	0x2000013c

08002508 <__malloc_lock>:
 8002508:	4801      	ldr	r0, [pc, #4]	; (8002510 <__malloc_lock+0x8>)
 800250a:	f000 b811 	b.w	8002530 <__retarget_lock_acquire_recursive>
 800250e:	bf00      	nop
 8002510:	20000140 	.word	0x20000140

08002514 <__malloc_unlock>:
 8002514:	4801      	ldr	r0, [pc, #4]	; (800251c <__malloc_unlock+0x8>)
 8002516:	f000 b80c 	b.w	8002532 <__retarget_lock_release_recursive>
 800251a:	bf00      	nop
 800251c:	20000140 	.word	0x20000140

08002520 <_malloc_usable_size_r>:
 8002520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002524:	1f18      	subs	r0, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	bfbc      	itt	lt
 800252a:	580b      	ldrlt	r3, [r1, r0]
 800252c:	18c0      	addlt	r0, r0, r3
 800252e:	4770      	bx	lr

08002530 <__retarget_lock_acquire_recursive>:
 8002530:	4770      	bx	lr

08002532 <__retarget_lock_release_recursive>:
 8002532:	4770      	bx	lr

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
